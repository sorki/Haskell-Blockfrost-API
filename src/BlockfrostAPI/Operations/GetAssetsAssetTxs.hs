-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAssets_Asset_Txs
module BlockfrostAPI.Operations.GetAssetsAssetTxs where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /assets/{asset}/txs
-- 
-- List of a specific asset transactions
getAssets_Asset_Txs :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsAssetTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAssetsAssetTxsResponse) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_Txs parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAssetsAssetTxsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              AssetTxs)
                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetAssetsAssetTxsResponseBody400)
                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetAssetsAssetTxsResponseBody403)
                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetAssetsAssetTxsResponseBody404)
                                                                                                                                                                             | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetAssetsAssetTxsResponseBody418)
                                                                                                                                                                             | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetAssetsAssetTxsResponseBody429)
                                                                                                                                                                             | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetAssetsAssetTxsResponseBody500)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetTxsParametersPathAsset parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/assets\/{asset}\/txs.GET.parameters@ in the specification.
-- 
-- 
data GetAssetsAssetTxsParameters = GetAssetsAssetTxsParameters {
  -- | pathAsset: Represents the parameter named \'asset\'
  -- 
  -- Concatenation of the policy_id and hex-encoded asset_name
  getAssetsAssetTxsParametersPathAsset :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAssetsAssetTxsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAssetsAssetTxsParametersQueryOrder :: (GHC.Maybe.Maybe GetAssetsAssetTxsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAssetsAssetTxsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTxsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAsset" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsParametersPathAsset obj : "queryCount" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAsset" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsParametersPathAsset obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTxsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTxsParameters" (\obj -> (((GHC.Base.pure GetAssetsAssetTxsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAssetsAssetTxsParameters' with all required fields.
mkGetAssetsAssetTxsParameters :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsParametersPathAsset'
  -> GetAssetsAssetTxsParameters
mkGetAssetsAssetTxsParameters getAssetsAssetTxsParametersPathAsset = GetAssetsAssetTxsParameters{getAssetsAssetTxsParametersPathAsset = getAssetsAssetTxsParametersPathAsset,
                                                                                                 getAssetsAssetTxsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                 getAssetsAssetTxsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                 getAssetsAssetTxsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/assets\/{asset}\/txs.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAssetsAssetTxsParametersQueryOrder' =
   GetAssetsAssetTxsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAssetsAssetTxsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAssetsAssetTxsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAssetsAssetTxsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTxsParametersQueryOrder'
    where toJSON (GetAssetsAssetTxsParametersQueryOrder'Other val) = val
          toJSON (GetAssetsAssetTxsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAssetsAssetTxsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAssetsAssetTxsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTxsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAssetsAssetTxsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAssetsAssetTxsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAssetsAssetTxsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAssets_Asset_Txs'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAssetsAssetTxsResponseError' is used.
data GetAssetsAssetTxsResponse =
   GetAssetsAssetTxsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAssetsAssetTxsResponse200 AssetTxs -- ^ Return the information about the history of a specific asset
  | GetAssetsAssetTxsResponse400 GetAssetsAssetTxsResponseBody400 -- ^ Bad request
  | GetAssetsAssetTxsResponse403 GetAssetsAssetTxsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAssetsAssetTxsResponse404 GetAssetsAssetTxsResponseBody404 -- ^ Component not found
  | GetAssetsAssetTxsResponse418 GetAssetsAssetTxsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAssetsAssetTxsResponse429 GetAssetsAssetTxsResponseBody429 -- ^ Usage limit reached
  | GetAssetsAssetTxsResponse500 GetAssetsAssetTxsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTxsResponseBody400 = GetAssetsAssetTxsResponseBody400 {
  -- | error
  getAssetsAssetTxsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTxsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTxsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTxsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTxsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTxsResponseBody400" (\obj -> ((GHC.Base.pure GetAssetsAssetTxsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTxsResponseBody400' with all required fields.
mkGetAssetsAssetTxsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTxsResponseBody400StatusCode'
  -> GetAssetsAssetTxsResponseBody400
mkGetAssetsAssetTxsResponseBody400 getAssetsAssetTxsResponseBody400Error getAssetsAssetTxsResponseBody400Message getAssetsAssetTxsResponseBody400StatusCode = GetAssetsAssetTxsResponseBody400{getAssetsAssetTxsResponseBody400Error = getAssetsAssetTxsResponseBody400Error,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody400Message = getAssetsAssetTxsResponseBody400Message,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody400StatusCode = getAssetsAssetTxsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTxsResponseBody403 = GetAssetsAssetTxsResponseBody403 {
  -- | error
  getAssetsAssetTxsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTxsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTxsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTxsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTxsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTxsResponseBody403" (\obj -> ((GHC.Base.pure GetAssetsAssetTxsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTxsResponseBody403' with all required fields.
mkGetAssetsAssetTxsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTxsResponseBody403StatusCode'
  -> GetAssetsAssetTxsResponseBody403
mkGetAssetsAssetTxsResponseBody403 getAssetsAssetTxsResponseBody403Error getAssetsAssetTxsResponseBody403Message getAssetsAssetTxsResponseBody403StatusCode = GetAssetsAssetTxsResponseBody403{getAssetsAssetTxsResponseBody403Error = getAssetsAssetTxsResponseBody403Error,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody403Message = getAssetsAssetTxsResponseBody403Message,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody403StatusCode = getAssetsAssetTxsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTxsResponseBody404 = GetAssetsAssetTxsResponseBody404 {
  -- | error
  getAssetsAssetTxsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTxsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTxsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTxsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTxsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTxsResponseBody404" (\obj -> ((GHC.Base.pure GetAssetsAssetTxsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTxsResponseBody404' with all required fields.
mkGetAssetsAssetTxsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTxsResponseBody404StatusCode'
  -> GetAssetsAssetTxsResponseBody404
mkGetAssetsAssetTxsResponseBody404 getAssetsAssetTxsResponseBody404Error getAssetsAssetTxsResponseBody404Message getAssetsAssetTxsResponseBody404StatusCode = GetAssetsAssetTxsResponseBody404{getAssetsAssetTxsResponseBody404Error = getAssetsAssetTxsResponseBody404Error,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody404Message = getAssetsAssetTxsResponseBody404Message,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody404StatusCode = getAssetsAssetTxsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTxsResponseBody418 = GetAssetsAssetTxsResponseBody418 {
  -- | error
  getAssetsAssetTxsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTxsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTxsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTxsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTxsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTxsResponseBody418" (\obj -> ((GHC.Base.pure GetAssetsAssetTxsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTxsResponseBody418' with all required fields.
mkGetAssetsAssetTxsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTxsResponseBody418StatusCode'
  -> GetAssetsAssetTxsResponseBody418
mkGetAssetsAssetTxsResponseBody418 getAssetsAssetTxsResponseBody418Error getAssetsAssetTxsResponseBody418Message getAssetsAssetTxsResponseBody418StatusCode = GetAssetsAssetTxsResponseBody418{getAssetsAssetTxsResponseBody418Error = getAssetsAssetTxsResponseBody418Error,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody418Message = getAssetsAssetTxsResponseBody418Message,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody418StatusCode = getAssetsAssetTxsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTxsResponseBody429 = GetAssetsAssetTxsResponseBody429 {
  -- | error
  getAssetsAssetTxsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTxsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTxsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTxsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTxsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTxsResponseBody429" (\obj -> ((GHC.Base.pure GetAssetsAssetTxsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTxsResponseBody429' with all required fields.
mkGetAssetsAssetTxsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTxsResponseBody429StatusCode'
  -> GetAssetsAssetTxsResponseBody429
mkGetAssetsAssetTxsResponseBody429 getAssetsAssetTxsResponseBody429Error getAssetsAssetTxsResponseBody429Message getAssetsAssetTxsResponseBody429StatusCode = GetAssetsAssetTxsResponseBody429{getAssetsAssetTxsResponseBody429Error = getAssetsAssetTxsResponseBody429Error,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody429Message = getAssetsAssetTxsResponseBody429Message,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody429StatusCode = getAssetsAssetTxsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTxsResponseBody500 = GetAssetsAssetTxsResponseBody500 {
  -- | error
  getAssetsAssetTxsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTxsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTxsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTxsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTxsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTxsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTxsResponseBody500" (\obj -> ((GHC.Base.pure GetAssetsAssetTxsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTxsResponseBody500' with all required fields.
mkGetAssetsAssetTxsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTxsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTxsResponseBody500StatusCode'
  -> GetAssetsAssetTxsResponseBody500
mkGetAssetsAssetTxsResponseBody500 getAssetsAssetTxsResponseBody500Error getAssetsAssetTxsResponseBody500Message getAssetsAssetTxsResponseBody500StatusCode = GetAssetsAssetTxsResponseBody500{getAssetsAssetTxsResponseBody500Error = getAssetsAssetTxsResponseBody500Error,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody500Message = getAssetsAssetTxsResponseBody500Message,
                                                                                                                                                                                               getAssetsAssetTxsResponseBody500StatusCode = getAssetsAssetTxsResponseBody500StatusCode}
-- | > GET /assets/{asset}/txs
-- 
-- The same as 'getAssets_Asset_Txs' but accepts an explicit configuration.
getAssets_Asset_TxsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsAssetTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAssetsAssetTxsResponse) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_TxsWithConfiguration config
                                     parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAssetsAssetTxsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                               AssetTxs)
                                                                                                                                                                                              | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAssetsAssetTxsResponseBody400)
                                                                                                                                                                                              | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAssetsAssetTxsResponseBody403)
                                                                                                                                                                                              | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAssetsAssetTxsResponseBody404)
                                                                                                                                                                                              | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAssetsAssetTxsResponseBody418)
                                                                                                                                                                                              | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAssetsAssetTxsResponseBody429)
                                                                                                                                                                                              | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTxsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAssetsAssetTxsResponseBody500)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetTxsParametersPathAsset parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets/{asset}/txs
-- 
-- The same as 'getAssets_Asset_Txs' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAssets_Asset_TxsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsAssetTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_TxsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetTxsParametersPathAsset parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets/{asset}/txs
-- 
-- The same as 'getAssets_Asset_Txs' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAssets_Asset_TxsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsAssetTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_TxsWithConfigurationRaw config
                                        parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetTxsParametersPathAsset parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
