-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccounts_StakeAddress_
module BlockfrostAPI.Operations.GetAccountsStakeAddress_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /accounts/{stake_address}
-- 
-- Obtain information about a specific stake account.
getAccounts_StakeAddress_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ stake_address: Bech32 stake address.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_ stakeAddress = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  AccountContent)
                                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetAccountsStakeAddressResponseBody400)
                                                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetAccountsStakeAddressResponseBody403)
                                                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetAccountsStakeAddressResponseBody404)
                                                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetAccountsStakeAddressResponseBody418)
                                                                                                                                                                                           | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetAccountsStakeAddressResponseBody429)
                                                                                                                                                                                           | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetAccountsStakeAddressResponseBody500)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel stakeAddress)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getAccounts_StakeAddress_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountsStakeAddressResponseError' is used.
data GetAccountsStakeAddressResponse =
   GetAccountsStakeAddressResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountsStakeAddressResponse200 AccountContent -- ^ Return the account content.
  | GetAccountsStakeAddressResponse400 GetAccountsStakeAddressResponseBody400 -- ^ Bad request
  | GetAccountsStakeAddressResponse403 GetAccountsStakeAddressResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAccountsStakeAddressResponse404 GetAccountsStakeAddressResponseBody404 -- ^ Component not found
  | GetAccountsStakeAddressResponse418 GetAccountsStakeAddressResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAccountsStakeAddressResponse429 GetAccountsStakeAddressResponseBody429 -- ^ Usage limit reached
  | GetAccountsStakeAddressResponse500 GetAccountsStakeAddressResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressResponseBody400 = GetAccountsStakeAddressResponseBody400 {
  -- | error
  getAccountsStakeAddressResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressResponseBody400" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressResponseBody400' with all required fields.
mkGetAccountsStakeAddressResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressResponseBody400StatusCode'
  -> GetAccountsStakeAddressResponseBody400
mkGetAccountsStakeAddressResponseBody400 getAccountsStakeAddressResponseBody400Error getAccountsStakeAddressResponseBody400Message getAccountsStakeAddressResponseBody400StatusCode = GetAccountsStakeAddressResponseBody400{getAccountsStakeAddressResponseBody400Error = getAccountsStakeAddressResponseBody400Error,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody400Message = getAccountsStakeAddressResponseBody400Message,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody400StatusCode = getAccountsStakeAddressResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressResponseBody403 = GetAccountsStakeAddressResponseBody403 {
  -- | error
  getAccountsStakeAddressResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressResponseBody403" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressResponseBody403' with all required fields.
mkGetAccountsStakeAddressResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressResponseBody403StatusCode'
  -> GetAccountsStakeAddressResponseBody403
mkGetAccountsStakeAddressResponseBody403 getAccountsStakeAddressResponseBody403Error getAccountsStakeAddressResponseBody403Message getAccountsStakeAddressResponseBody403StatusCode = GetAccountsStakeAddressResponseBody403{getAccountsStakeAddressResponseBody403Error = getAccountsStakeAddressResponseBody403Error,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody403Message = getAccountsStakeAddressResponseBody403Message,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody403StatusCode = getAccountsStakeAddressResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressResponseBody404 = GetAccountsStakeAddressResponseBody404 {
  -- | error
  getAccountsStakeAddressResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressResponseBody404" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressResponseBody404' with all required fields.
mkGetAccountsStakeAddressResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressResponseBody404StatusCode'
  -> GetAccountsStakeAddressResponseBody404
mkGetAccountsStakeAddressResponseBody404 getAccountsStakeAddressResponseBody404Error getAccountsStakeAddressResponseBody404Message getAccountsStakeAddressResponseBody404StatusCode = GetAccountsStakeAddressResponseBody404{getAccountsStakeAddressResponseBody404Error = getAccountsStakeAddressResponseBody404Error,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody404Message = getAccountsStakeAddressResponseBody404Message,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody404StatusCode = getAccountsStakeAddressResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressResponseBody418 = GetAccountsStakeAddressResponseBody418 {
  -- | error
  getAccountsStakeAddressResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressResponseBody418" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressResponseBody418' with all required fields.
mkGetAccountsStakeAddressResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressResponseBody418StatusCode'
  -> GetAccountsStakeAddressResponseBody418
mkGetAccountsStakeAddressResponseBody418 getAccountsStakeAddressResponseBody418Error getAccountsStakeAddressResponseBody418Message getAccountsStakeAddressResponseBody418StatusCode = GetAccountsStakeAddressResponseBody418{getAccountsStakeAddressResponseBody418Error = getAccountsStakeAddressResponseBody418Error,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody418Message = getAccountsStakeAddressResponseBody418Message,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody418StatusCode = getAccountsStakeAddressResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressResponseBody429 = GetAccountsStakeAddressResponseBody429 {
  -- | error
  getAccountsStakeAddressResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressResponseBody429" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressResponseBody429' with all required fields.
mkGetAccountsStakeAddressResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressResponseBody429StatusCode'
  -> GetAccountsStakeAddressResponseBody429
mkGetAccountsStakeAddressResponseBody429 getAccountsStakeAddressResponseBody429Error getAccountsStakeAddressResponseBody429Message getAccountsStakeAddressResponseBody429StatusCode = GetAccountsStakeAddressResponseBody429{getAccountsStakeAddressResponseBody429Error = getAccountsStakeAddressResponseBody429Error,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody429Message = getAccountsStakeAddressResponseBody429Message,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody429StatusCode = getAccountsStakeAddressResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressResponseBody500 = GetAccountsStakeAddressResponseBody500 {
  -- | error
  getAccountsStakeAddressResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressResponseBody500" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressResponseBody500' with all required fields.
mkGetAccountsStakeAddressResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressResponseBody500StatusCode'
  -> GetAccountsStakeAddressResponseBody500
mkGetAccountsStakeAddressResponseBody500 getAccountsStakeAddressResponseBody500Error getAccountsStakeAddressResponseBody500Message getAccountsStakeAddressResponseBody500StatusCode = GetAccountsStakeAddressResponseBody500{getAccountsStakeAddressResponseBody500Error = getAccountsStakeAddressResponseBody500Error,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody500Message = getAccountsStakeAddressResponseBody500Message,
                                                                                                                                                                                                                             getAccountsStakeAddressResponseBody500StatusCode = getAccountsStakeAddressResponseBody500StatusCode}
-- | > GET /accounts/{stake_address}
-- 
-- The same as 'getAccounts_StakeAddress_' but accepts an explicit configuration.
getAccounts_StakeAddress_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ stake_address: Bech32 stake address.
  -> m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_WithConfiguration config
                                           stakeAddress = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   AccountContent)
                                                                                                                                                                                                            | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressResponseBody400)
                                                                                                                                                                                                            | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressResponseBody403)
                                                                                                                                                                                                            | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressResponseBody404)
                                                                                                                                                                                                            | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressResponseBody418)
                                                                                                                                                                                                            | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressResponseBody429)
                                                                                                                                                                                                            | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressResponseBody500)
                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel stakeAddress)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /accounts/{stake_address}
-- 
-- The same as 'getAccounts_StakeAddress_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ stake_address: Bech32 stake address.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_Raw stakeAddress = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel stakeAddress)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /accounts/{stake_address}
-- 
-- The same as 'getAccounts_StakeAddress_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ stake_address: Bech32 stake address.
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_WithConfigurationRaw config
                                              stakeAddress = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel stakeAddress)) GHC.Base.++ ""))) GHC.Base.mempty)
