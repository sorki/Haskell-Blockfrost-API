-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBlocksLatestTxs
module BlockfrostAPI.Operations.GetBlocksLatestTxs where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /blocks/latest/txs
-- 
-- Return the transactions within the latest block.
getBlocksLatestTxs :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetBlocksLatestTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetBlocksLatestTxsResponse) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestTxs parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBlocksLatestTxsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               BlockContentTxs)
                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksLatestTxsResponseBody400)
                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksLatestTxsResponseBody403)
                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksLatestTxsResponseBody404)
                                                                                                                                                                             | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksLatestTxsResponseBody418)
                                                                                                                                                                             | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksLatestTxsResponseBody429)
                                                                                                                                                                             | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksLatestTxsResponseBody500)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/blocks/latest/txs") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/blocks\/latest\/txs.GET.parameters@ in the specification.
-- 
-- 
data GetBlocksLatestTxsParameters = GetBlocksLatestTxsParameters {
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  getBlocksLatestTxsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- Ordered by tx index in the block.
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getBlocksLatestTxsParametersQueryOrder :: (GHC.Maybe.Maybe GetBlocksLatestTxsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getBlocksLatestTxsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestTxsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryCount" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryCount" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestTxsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestTxsParameters" (\obj -> ((GHC.Base.pure GetBlocksLatestTxsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetBlocksLatestTxsParameters' with all required fields.
mkGetBlocksLatestTxsParameters :: GetBlocksLatestTxsParameters
mkGetBlocksLatestTxsParameters = GetBlocksLatestTxsParameters{getBlocksLatestTxsParametersQueryCount = GHC.Maybe.Nothing,
                                                              getBlocksLatestTxsParametersQueryOrder = GHC.Maybe.Nothing,
                                                              getBlocksLatestTxsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/blocks\/latest\/txs.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- Ordered by tx index in the block.
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetBlocksLatestTxsParametersQueryOrder' =
   GetBlocksLatestTxsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetBlocksLatestTxsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetBlocksLatestTxsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetBlocksLatestTxsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestTxsParametersQueryOrder'
    where toJSON (GetBlocksLatestTxsParametersQueryOrder'Other val) = val
          toJSON (GetBlocksLatestTxsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetBlocksLatestTxsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetBlocksLatestTxsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestTxsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetBlocksLatestTxsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetBlocksLatestTxsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetBlocksLatestTxsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getBlocksLatestTxs'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBlocksLatestTxsResponseError' is used.
data GetBlocksLatestTxsResponse =
   GetBlocksLatestTxsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBlocksLatestTxsResponse200 BlockContentTxs -- ^ Return the transactions within the block.
  | GetBlocksLatestTxsResponse400 GetBlocksLatestTxsResponseBody400 -- ^ Bad request
  | GetBlocksLatestTxsResponse403 GetBlocksLatestTxsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetBlocksLatestTxsResponse404 GetBlocksLatestTxsResponseBody404 -- ^ Component not found
  | GetBlocksLatestTxsResponse418 GetBlocksLatestTxsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetBlocksLatestTxsResponse429 GetBlocksLatestTxsResponseBody429 -- ^ Usage limit reached
  | GetBlocksLatestTxsResponse500 GetBlocksLatestTxsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestTxsResponseBody400 = GetBlocksLatestTxsResponseBody400 {
  -- | error
  getBlocksLatestTxsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestTxsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestTxsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestTxsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestTxsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestTxsResponseBody400" (\obj -> ((GHC.Base.pure GetBlocksLatestTxsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestTxsResponseBody400' with all required fields.
mkGetBlocksLatestTxsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestTxsResponseBody400StatusCode'
  -> GetBlocksLatestTxsResponseBody400
mkGetBlocksLatestTxsResponseBody400 getBlocksLatestTxsResponseBody400Error getBlocksLatestTxsResponseBody400Message getBlocksLatestTxsResponseBody400StatusCode = GetBlocksLatestTxsResponseBody400{getBlocksLatestTxsResponseBody400Error = getBlocksLatestTxsResponseBody400Error,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody400Message = getBlocksLatestTxsResponseBody400Message,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody400StatusCode = getBlocksLatestTxsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestTxsResponseBody403 = GetBlocksLatestTxsResponseBody403 {
  -- | error
  getBlocksLatestTxsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestTxsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestTxsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestTxsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestTxsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestTxsResponseBody403" (\obj -> ((GHC.Base.pure GetBlocksLatestTxsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestTxsResponseBody403' with all required fields.
mkGetBlocksLatestTxsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestTxsResponseBody403StatusCode'
  -> GetBlocksLatestTxsResponseBody403
mkGetBlocksLatestTxsResponseBody403 getBlocksLatestTxsResponseBody403Error getBlocksLatestTxsResponseBody403Message getBlocksLatestTxsResponseBody403StatusCode = GetBlocksLatestTxsResponseBody403{getBlocksLatestTxsResponseBody403Error = getBlocksLatestTxsResponseBody403Error,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody403Message = getBlocksLatestTxsResponseBody403Message,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody403StatusCode = getBlocksLatestTxsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestTxsResponseBody404 = GetBlocksLatestTxsResponseBody404 {
  -- | error
  getBlocksLatestTxsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestTxsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestTxsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestTxsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestTxsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestTxsResponseBody404" (\obj -> ((GHC.Base.pure GetBlocksLatestTxsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestTxsResponseBody404' with all required fields.
mkGetBlocksLatestTxsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestTxsResponseBody404StatusCode'
  -> GetBlocksLatestTxsResponseBody404
mkGetBlocksLatestTxsResponseBody404 getBlocksLatestTxsResponseBody404Error getBlocksLatestTxsResponseBody404Message getBlocksLatestTxsResponseBody404StatusCode = GetBlocksLatestTxsResponseBody404{getBlocksLatestTxsResponseBody404Error = getBlocksLatestTxsResponseBody404Error,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody404Message = getBlocksLatestTxsResponseBody404Message,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody404StatusCode = getBlocksLatestTxsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestTxsResponseBody418 = GetBlocksLatestTxsResponseBody418 {
  -- | error
  getBlocksLatestTxsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestTxsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestTxsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestTxsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestTxsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestTxsResponseBody418" (\obj -> ((GHC.Base.pure GetBlocksLatestTxsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestTxsResponseBody418' with all required fields.
mkGetBlocksLatestTxsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestTxsResponseBody418StatusCode'
  -> GetBlocksLatestTxsResponseBody418
mkGetBlocksLatestTxsResponseBody418 getBlocksLatestTxsResponseBody418Error getBlocksLatestTxsResponseBody418Message getBlocksLatestTxsResponseBody418StatusCode = GetBlocksLatestTxsResponseBody418{getBlocksLatestTxsResponseBody418Error = getBlocksLatestTxsResponseBody418Error,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody418Message = getBlocksLatestTxsResponseBody418Message,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody418StatusCode = getBlocksLatestTxsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestTxsResponseBody429 = GetBlocksLatestTxsResponseBody429 {
  -- | error
  getBlocksLatestTxsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestTxsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestTxsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestTxsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestTxsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestTxsResponseBody429" (\obj -> ((GHC.Base.pure GetBlocksLatestTxsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestTxsResponseBody429' with all required fields.
mkGetBlocksLatestTxsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestTxsResponseBody429StatusCode'
  -> GetBlocksLatestTxsResponseBody429
mkGetBlocksLatestTxsResponseBody429 getBlocksLatestTxsResponseBody429Error getBlocksLatestTxsResponseBody429Message getBlocksLatestTxsResponseBody429StatusCode = GetBlocksLatestTxsResponseBody429{getBlocksLatestTxsResponseBody429Error = getBlocksLatestTxsResponseBody429Error,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody429Message = getBlocksLatestTxsResponseBody429Message,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody429StatusCode = getBlocksLatestTxsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestTxsResponseBody500 = GetBlocksLatestTxsResponseBody500 {
  -- | error
  getBlocksLatestTxsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestTxsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestTxsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestTxsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestTxsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestTxsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestTxsResponseBody500" (\obj -> ((GHC.Base.pure GetBlocksLatestTxsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestTxsResponseBody500' with all required fields.
mkGetBlocksLatestTxsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestTxsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestTxsResponseBody500StatusCode'
  -> GetBlocksLatestTxsResponseBody500
mkGetBlocksLatestTxsResponseBody500 getBlocksLatestTxsResponseBody500Error getBlocksLatestTxsResponseBody500Message getBlocksLatestTxsResponseBody500StatusCode = GetBlocksLatestTxsResponseBody500{getBlocksLatestTxsResponseBody500Error = getBlocksLatestTxsResponseBody500Error,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody500Message = getBlocksLatestTxsResponseBody500Message,
                                                                                                                                                                                                    getBlocksLatestTxsResponseBody500StatusCode = getBlocksLatestTxsResponseBody500StatusCode}
-- | > GET /blocks/latest/txs
-- 
-- The same as 'getBlocksLatestTxs' but accepts an explicit configuration.
getBlocksLatestTxsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetBlocksLatestTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetBlocksLatestTxsResponse) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestTxsWithConfiguration config
                                    parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetBlocksLatestTxsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                BlockContentTxs)
                                                                                                                                                                                              | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksLatestTxsResponseBody400)
                                                                                                                                                                                              | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksLatestTxsResponseBody403)
                                                                                                                                                                                              | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksLatestTxsResponseBody404)
                                                                                                                                                                                              | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksLatestTxsResponseBody418)
                                                                                                                                                                                              | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksLatestTxsResponseBody429)
                                                                                                                                                                                              | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestTxsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksLatestTxsResponseBody500)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/blocks/latest/txs") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                          BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                          BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /blocks/latest/txs
-- 
-- The same as 'getBlocksLatestTxs' but returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocksLatestTxsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetBlocksLatestTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestTxsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/blocks/latest/txs") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /blocks/latest/txs
-- 
-- The same as 'getBlocksLatestTxs' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocksLatestTxsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetBlocksLatestTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestTxsWithConfigurationRaw config
                                       parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/blocks/latest/txs") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                          BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                          BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksLatestTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
