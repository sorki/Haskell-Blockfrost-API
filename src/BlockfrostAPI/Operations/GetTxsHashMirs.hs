-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTxs_Hash_Mirs
module BlockfrostAPI.Operations.GetTxsHashMirs where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /txs/{hash}/mirs
-- 
-- Obtain information about Move Instantaneous Rewards (MIRs) of a specific transaction.
getTxs_Hash_Mirs :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetTxsHashMirsResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_Mirs hash = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTxsHashMirsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               TxContentMirs)
                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               GetTxsHashMirsResponseBody400)
                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               GetTxsHashMirsResponseBody403)
                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               GetTxsHashMirsResponseBody404)
                                                                                                                                                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               GetTxsHashMirsResponseBody418)
                                                                                                                                                                 | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               GetTxsHashMirsResponseBody429)
                                                                                                                                                                 | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                               GetTxsHashMirsResponseBody500)
                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/mirs"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getTxs_Hash_Mirs'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTxsHashMirsResponseError' is used.
data GetTxsHashMirsResponse =
   GetTxsHashMirsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTxsHashMirsResponse200 TxContentMirs -- ^ Obtain information about Move Instantaneous Rewards (MIRs) of a specific transaction.
  | GetTxsHashMirsResponse400 GetTxsHashMirsResponseBody400 -- ^ Bad request
  | GetTxsHashMirsResponse403 GetTxsHashMirsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetTxsHashMirsResponse404 GetTxsHashMirsResponseBody404 -- ^ Component not found
  | GetTxsHashMirsResponse418 GetTxsHashMirsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetTxsHashMirsResponse429 GetTxsHashMirsResponseBody429 -- ^ Usage limit reached
  | GetTxsHashMirsResponse500 GetTxsHashMirsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMirsResponseBody400 = GetTxsHashMirsResponseBody400 {
  -- | error
  getTxsHashMirsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMirsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMirsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMirsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMirsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMirsResponseBody400" (\obj -> ((GHC.Base.pure GetTxsHashMirsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMirsResponseBody400' with all required fields.
mkGetTxsHashMirsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMirsResponseBody400StatusCode'
  -> GetTxsHashMirsResponseBody400
mkGetTxsHashMirsResponseBody400 getTxsHashMirsResponseBody400Error getTxsHashMirsResponseBody400Message getTxsHashMirsResponseBody400StatusCode = GetTxsHashMirsResponseBody400{getTxsHashMirsResponseBody400Error = getTxsHashMirsResponseBody400Error,
                                                                                                                                                                                getTxsHashMirsResponseBody400Message = getTxsHashMirsResponseBody400Message,
                                                                                                                                                                                getTxsHashMirsResponseBody400StatusCode = getTxsHashMirsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMirsResponseBody403 = GetTxsHashMirsResponseBody403 {
  -- | error
  getTxsHashMirsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMirsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMirsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMirsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMirsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMirsResponseBody403" (\obj -> ((GHC.Base.pure GetTxsHashMirsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMirsResponseBody403' with all required fields.
mkGetTxsHashMirsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMirsResponseBody403StatusCode'
  -> GetTxsHashMirsResponseBody403
mkGetTxsHashMirsResponseBody403 getTxsHashMirsResponseBody403Error getTxsHashMirsResponseBody403Message getTxsHashMirsResponseBody403StatusCode = GetTxsHashMirsResponseBody403{getTxsHashMirsResponseBody403Error = getTxsHashMirsResponseBody403Error,
                                                                                                                                                                                getTxsHashMirsResponseBody403Message = getTxsHashMirsResponseBody403Message,
                                                                                                                                                                                getTxsHashMirsResponseBody403StatusCode = getTxsHashMirsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMirsResponseBody404 = GetTxsHashMirsResponseBody404 {
  -- | error
  getTxsHashMirsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMirsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMirsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMirsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMirsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMirsResponseBody404" (\obj -> ((GHC.Base.pure GetTxsHashMirsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMirsResponseBody404' with all required fields.
mkGetTxsHashMirsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMirsResponseBody404StatusCode'
  -> GetTxsHashMirsResponseBody404
mkGetTxsHashMirsResponseBody404 getTxsHashMirsResponseBody404Error getTxsHashMirsResponseBody404Message getTxsHashMirsResponseBody404StatusCode = GetTxsHashMirsResponseBody404{getTxsHashMirsResponseBody404Error = getTxsHashMirsResponseBody404Error,
                                                                                                                                                                                getTxsHashMirsResponseBody404Message = getTxsHashMirsResponseBody404Message,
                                                                                                                                                                                getTxsHashMirsResponseBody404StatusCode = getTxsHashMirsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMirsResponseBody418 = GetTxsHashMirsResponseBody418 {
  -- | error
  getTxsHashMirsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMirsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMirsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMirsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMirsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMirsResponseBody418" (\obj -> ((GHC.Base.pure GetTxsHashMirsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMirsResponseBody418' with all required fields.
mkGetTxsHashMirsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMirsResponseBody418StatusCode'
  -> GetTxsHashMirsResponseBody418
mkGetTxsHashMirsResponseBody418 getTxsHashMirsResponseBody418Error getTxsHashMirsResponseBody418Message getTxsHashMirsResponseBody418StatusCode = GetTxsHashMirsResponseBody418{getTxsHashMirsResponseBody418Error = getTxsHashMirsResponseBody418Error,
                                                                                                                                                                                getTxsHashMirsResponseBody418Message = getTxsHashMirsResponseBody418Message,
                                                                                                                                                                                getTxsHashMirsResponseBody418StatusCode = getTxsHashMirsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMirsResponseBody429 = GetTxsHashMirsResponseBody429 {
  -- | error
  getTxsHashMirsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMirsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMirsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMirsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMirsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMirsResponseBody429" (\obj -> ((GHC.Base.pure GetTxsHashMirsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMirsResponseBody429' with all required fields.
mkGetTxsHashMirsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMirsResponseBody429StatusCode'
  -> GetTxsHashMirsResponseBody429
mkGetTxsHashMirsResponseBody429 getTxsHashMirsResponseBody429Error getTxsHashMirsResponseBody429Message getTxsHashMirsResponseBody429StatusCode = GetTxsHashMirsResponseBody429{getTxsHashMirsResponseBody429Error = getTxsHashMirsResponseBody429Error,
                                                                                                                                                                                getTxsHashMirsResponseBody429Message = getTxsHashMirsResponseBody429Message,
                                                                                                                                                                                getTxsHashMirsResponseBody429StatusCode = getTxsHashMirsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMirsResponseBody500 = GetTxsHashMirsResponseBody500 {
  -- | error
  getTxsHashMirsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMirsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMirsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMirsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMirsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMirsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMirsResponseBody500" (\obj -> ((GHC.Base.pure GetTxsHashMirsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMirsResponseBody500' with all required fields.
mkGetTxsHashMirsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMirsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMirsResponseBody500StatusCode'
  -> GetTxsHashMirsResponseBody500
mkGetTxsHashMirsResponseBody500 getTxsHashMirsResponseBody500Error getTxsHashMirsResponseBody500Message getTxsHashMirsResponseBody500StatusCode = GetTxsHashMirsResponseBody500{getTxsHashMirsResponseBody500Error = getTxsHashMirsResponseBody500Error,
                                                                                                                                                                                getTxsHashMirsResponseBody500Message = getTxsHashMirsResponseBody500Message,
                                                                                                                                                                                getTxsHashMirsResponseBody500StatusCode = getTxsHashMirsResponseBody500StatusCode}
-- | > GET /txs/{hash}/mirs
-- 
-- The same as 'getTxs_Hash_Mirs' but accepts an explicit configuration.
getTxs_Hash_MirsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> m (Network.HTTP.Client.Types.Response GetTxsHashMirsResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_MirsWithConfiguration config
                                  hash = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetTxsHashMirsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                TxContentMirs)
                                                                                                                                                                                  | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashMirsResponseBody400)
                                                                                                                                                                                  | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashMirsResponseBody403)
                                                                                                                                                                                  | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashMirsResponseBody404)
                                                                                                                                                                                  | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashMirsResponseBody418)
                                                                                                                                                                                  | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashMirsResponseBody429)
                                                                                                                                                                                  | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMirsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashMirsResponseBody500)
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/mirs"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/mirs
-- 
-- The same as 'getTxs_Hash_Mirs' but returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_MirsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_MirsRaw hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/mirs"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/mirs
-- 
-- The same as 'getTxs_Hash_Mirs' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_MirsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_MirsWithConfigurationRaw config
                                     hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/mirs"))) GHC.Base.mempty)
