-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getEpochs_Number_Blocks_PoolId_
module BlockfrostAPI.Operations.GetEpochsNumberBlocksPoolId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /epochs/{number}/blocks/{pool_id}
-- 
-- Return the block minted for the epoch specified by stake pool.
getEpochs_Number_Blocks_PoolId_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberBlocksPoolIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetEpochsNumberBlocksPoolIdResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Blocks_PoolId_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberBlocksPoolIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              EpochBlockContent)
                                                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberBlocksPoolIdResponseBody400)
                                                                                                                                                                                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberBlocksPoolIdResponseBody403)
                                                                                                                                                                                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberBlocksPoolIdResponseBody404)
                                                                                                                                                                                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberBlocksPoolIdResponseBody418)
                                                                                                                                                                                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberBlocksPoolIdResponseBody429)
                                                                                                                                                                                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberBlocksPoolIdResponseBody500)
                                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksPoolIdParametersPathNumber parameters))) GHC.Base.++ ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksPoolIdParametersPathPoolId parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/epochs\/{number}\/blocks\/{pool_id}.GET.parameters@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksPoolIdParameters = GetEpochsNumberBlocksPoolIdParameters {
  -- | pathNumber: Represents the parameter named \'number\'
  -- 
  -- Number of the epoch
  getEpochsNumberBlocksPoolIdParametersPathNumber :: GHC.Integer.Type.Integer
  -- | pathPool_id: Represents the parameter named \'pool_id\'
  -- 
  -- Stake pool ID to filter
  , getEpochsNumberBlocksPoolIdParametersPathPoolId :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getEpochsNumberBlocksPoolIdParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getEpochsNumberBlocksPoolIdParametersQueryOrder :: (GHC.Maybe.Maybe GetEpochsNumberBlocksPoolIdParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getEpochsNumberBlocksPoolIdParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksPoolIdParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdParametersPathNumber obj : "pathPool_id" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdParametersPathPoolId obj : "queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdParametersPathNumber obj) GHC.Base.<> (("pathPool_id" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdParametersPathPoolId obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdParametersQueryPage obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksPoolIdParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksPoolIdParameters" (\obj -> ((((GHC.Base.pure GetEpochsNumberBlocksPoolIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNumber")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathPool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetEpochsNumberBlocksPoolIdParameters' with all required fields.
mkGetEpochsNumberBlocksPoolIdParameters :: GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksPoolIdParametersPathNumber'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdParametersPathPoolId'
  -> GetEpochsNumberBlocksPoolIdParameters
mkGetEpochsNumberBlocksPoolIdParameters getEpochsNumberBlocksPoolIdParametersPathNumber getEpochsNumberBlocksPoolIdParametersPathPoolId = GetEpochsNumberBlocksPoolIdParameters{getEpochsNumberBlocksPoolIdParametersPathNumber = getEpochsNumberBlocksPoolIdParametersPathNumber,
                                                                                                                                                                                getEpochsNumberBlocksPoolIdParametersPathPoolId = getEpochsNumberBlocksPoolIdParametersPathPoolId,
                                                                                                                                                                                getEpochsNumberBlocksPoolIdParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                                                                getEpochsNumberBlocksPoolIdParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                                                                getEpochsNumberBlocksPoolIdParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/epochs\/{number}\/blocks\/{pool_id}.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetEpochsNumberBlocksPoolIdParametersQueryOrder' =
   GetEpochsNumberBlocksPoolIdParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetEpochsNumberBlocksPoolIdParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetEpochsNumberBlocksPoolIdParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetEpochsNumberBlocksPoolIdParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksPoolIdParametersQueryOrder'
    where toJSON (GetEpochsNumberBlocksPoolIdParametersQueryOrder'Other val) = val
          toJSON (GetEpochsNumberBlocksPoolIdParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetEpochsNumberBlocksPoolIdParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetEpochsNumberBlocksPoolIdParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksPoolIdParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetEpochsNumberBlocksPoolIdParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetEpochsNumberBlocksPoolIdParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetEpochsNumberBlocksPoolIdParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getEpochs_Number_Blocks_PoolId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetEpochsNumberBlocksPoolIdResponseError' is used.
data GetEpochsNumberBlocksPoolIdResponse =
   GetEpochsNumberBlocksPoolIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetEpochsNumberBlocksPoolIdResponse200 EpochBlockContent -- ^ Return the data about the epoch
  | GetEpochsNumberBlocksPoolIdResponse400 GetEpochsNumberBlocksPoolIdResponseBody400 -- ^ Bad request
  | GetEpochsNumberBlocksPoolIdResponse403 GetEpochsNumberBlocksPoolIdResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetEpochsNumberBlocksPoolIdResponse404 GetEpochsNumberBlocksPoolIdResponseBody404 -- ^ Component not found
  | GetEpochsNumberBlocksPoolIdResponse418 GetEpochsNumberBlocksPoolIdResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetEpochsNumberBlocksPoolIdResponse429 GetEpochsNumberBlocksPoolIdResponseBody429 -- ^ Usage limit reached
  | GetEpochsNumberBlocksPoolIdResponse500 GetEpochsNumberBlocksPoolIdResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksPoolIdResponseBody400 = GetEpochsNumberBlocksPoolIdResponseBody400 {
  -- | error
  getEpochsNumberBlocksPoolIdResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksPoolIdResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksPoolIdResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksPoolIdResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksPoolIdResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksPoolIdResponseBody400" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksPoolIdResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksPoolIdResponseBody400' with all required fields.
mkGetEpochsNumberBlocksPoolIdResponseBody400 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksPoolIdResponseBody400StatusCode'
  -> GetEpochsNumberBlocksPoolIdResponseBody400
mkGetEpochsNumberBlocksPoolIdResponseBody400 getEpochsNumberBlocksPoolIdResponseBody400Error getEpochsNumberBlocksPoolIdResponseBody400Message getEpochsNumberBlocksPoolIdResponseBody400StatusCode = GetEpochsNumberBlocksPoolIdResponseBody400{getEpochsNumberBlocksPoolIdResponseBody400Error = getEpochsNumberBlocksPoolIdResponseBody400Error,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody400Message = getEpochsNumberBlocksPoolIdResponseBody400Message,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody400StatusCode = getEpochsNumberBlocksPoolIdResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksPoolIdResponseBody403 = GetEpochsNumberBlocksPoolIdResponseBody403 {
  -- | error
  getEpochsNumberBlocksPoolIdResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksPoolIdResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksPoolIdResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksPoolIdResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksPoolIdResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksPoolIdResponseBody403" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksPoolIdResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksPoolIdResponseBody403' with all required fields.
mkGetEpochsNumberBlocksPoolIdResponseBody403 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksPoolIdResponseBody403StatusCode'
  -> GetEpochsNumberBlocksPoolIdResponseBody403
mkGetEpochsNumberBlocksPoolIdResponseBody403 getEpochsNumberBlocksPoolIdResponseBody403Error getEpochsNumberBlocksPoolIdResponseBody403Message getEpochsNumberBlocksPoolIdResponseBody403StatusCode = GetEpochsNumberBlocksPoolIdResponseBody403{getEpochsNumberBlocksPoolIdResponseBody403Error = getEpochsNumberBlocksPoolIdResponseBody403Error,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody403Message = getEpochsNumberBlocksPoolIdResponseBody403Message,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody403StatusCode = getEpochsNumberBlocksPoolIdResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksPoolIdResponseBody404 = GetEpochsNumberBlocksPoolIdResponseBody404 {
  -- | error
  getEpochsNumberBlocksPoolIdResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksPoolIdResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksPoolIdResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksPoolIdResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksPoolIdResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksPoolIdResponseBody404" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksPoolIdResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksPoolIdResponseBody404' with all required fields.
mkGetEpochsNumberBlocksPoolIdResponseBody404 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksPoolIdResponseBody404StatusCode'
  -> GetEpochsNumberBlocksPoolIdResponseBody404
mkGetEpochsNumberBlocksPoolIdResponseBody404 getEpochsNumberBlocksPoolIdResponseBody404Error getEpochsNumberBlocksPoolIdResponseBody404Message getEpochsNumberBlocksPoolIdResponseBody404StatusCode = GetEpochsNumberBlocksPoolIdResponseBody404{getEpochsNumberBlocksPoolIdResponseBody404Error = getEpochsNumberBlocksPoolIdResponseBody404Error,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody404Message = getEpochsNumberBlocksPoolIdResponseBody404Message,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody404StatusCode = getEpochsNumberBlocksPoolIdResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksPoolIdResponseBody418 = GetEpochsNumberBlocksPoolIdResponseBody418 {
  -- | error
  getEpochsNumberBlocksPoolIdResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksPoolIdResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksPoolIdResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksPoolIdResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksPoolIdResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksPoolIdResponseBody418" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksPoolIdResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksPoolIdResponseBody418' with all required fields.
mkGetEpochsNumberBlocksPoolIdResponseBody418 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksPoolIdResponseBody418StatusCode'
  -> GetEpochsNumberBlocksPoolIdResponseBody418
mkGetEpochsNumberBlocksPoolIdResponseBody418 getEpochsNumberBlocksPoolIdResponseBody418Error getEpochsNumberBlocksPoolIdResponseBody418Message getEpochsNumberBlocksPoolIdResponseBody418StatusCode = GetEpochsNumberBlocksPoolIdResponseBody418{getEpochsNumberBlocksPoolIdResponseBody418Error = getEpochsNumberBlocksPoolIdResponseBody418Error,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody418Message = getEpochsNumberBlocksPoolIdResponseBody418Message,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody418StatusCode = getEpochsNumberBlocksPoolIdResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksPoolIdResponseBody429 = GetEpochsNumberBlocksPoolIdResponseBody429 {
  -- | error
  getEpochsNumberBlocksPoolIdResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksPoolIdResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksPoolIdResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksPoolIdResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksPoolIdResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksPoolIdResponseBody429" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksPoolIdResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksPoolIdResponseBody429' with all required fields.
mkGetEpochsNumberBlocksPoolIdResponseBody429 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksPoolIdResponseBody429StatusCode'
  -> GetEpochsNumberBlocksPoolIdResponseBody429
mkGetEpochsNumberBlocksPoolIdResponseBody429 getEpochsNumberBlocksPoolIdResponseBody429Error getEpochsNumberBlocksPoolIdResponseBody429Message getEpochsNumberBlocksPoolIdResponseBody429StatusCode = GetEpochsNumberBlocksPoolIdResponseBody429{getEpochsNumberBlocksPoolIdResponseBody429Error = getEpochsNumberBlocksPoolIdResponseBody429Error,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody429Message = getEpochsNumberBlocksPoolIdResponseBody429Message,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody429StatusCode = getEpochsNumberBlocksPoolIdResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksPoolIdResponseBody500 = GetEpochsNumberBlocksPoolIdResponseBody500 {
  -- | error
  getEpochsNumberBlocksPoolIdResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksPoolIdResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksPoolIdResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksPoolIdResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksPoolIdResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksPoolIdResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksPoolIdResponseBody500" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksPoolIdResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksPoolIdResponseBody500' with all required fields.
mkGetEpochsNumberBlocksPoolIdResponseBody500 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksPoolIdResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksPoolIdResponseBody500StatusCode'
  -> GetEpochsNumberBlocksPoolIdResponseBody500
mkGetEpochsNumberBlocksPoolIdResponseBody500 getEpochsNumberBlocksPoolIdResponseBody500Error getEpochsNumberBlocksPoolIdResponseBody500Message getEpochsNumberBlocksPoolIdResponseBody500StatusCode = GetEpochsNumberBlocksPoolIdResponseBody500{getEpochsNumberBlocksPoolIdResponseBody500Error = getEpochsNumberBlocksPoolIdResponseBody500Error,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody500Message = getEpochsNumberBlocksPoolIdResponseBody500Message,
                                                                                                                                                                                                                                                 getEpochsNumberBlocksPoolIdResponseBody500StatusCode = getEpochsNumberBlocksPoolIdResponseBody500StatusCode}
-- | > GET /epochs/{number}/blocks/{pool_id}
-- 
-- The same as 'getEpochs_Number_Blocks_PoolId_' but accepts an explicit configuration.
getEpochs_Number_Blocks_PoolId_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberBlocksPoolIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetEpochsNumberBlocksPoolIdResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Blocks_PoolId_WithConfiguration config
                                                 parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberBlocksPoolIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               EpochBlockContent)
                                                                                                                                                                                                                    | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberBlocksPoolIdResponseBody400)
                                                                                                                                                                                                                    | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberBlocksPoolIdResponseBody403)
                                                                                                                                                                                                                    | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberBlocksPoolIdResponseBody404)
                                                                                                                                                                                                                    | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberBlocksPoolIdResponseBody418)
                                                                                                                                                                                                                    | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberBlocksPoolIdResponseBody429)
                                                                                                                                                                                                                    | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksPoolIdResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberBlocksPoolIdResponseBody500)
                                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksPoolIdParametersPathNumber parameters))) GHC.Base.++ ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksPoolIdParametersPathPoolId parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/blocks/{pool_id}
-- 
-- The same as 'getEpochs_Number_Blocks_PoolId_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_Blocks_PoolId_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberBlocksPoolIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Blocks_PoolId_Raw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksPoolIdParametersPathNumber parameters))) GHC.Base.++ ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksPoolIdParametersPathPoolId parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/blocks/{pool_id}
-- 
-- The same as 'getEpochs_Number_Blocks_PoolId_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_Blocks_PoolId_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberBlocksPoolIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Blocks_PoolId_WithConfigurationRaw config
                                                    parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksPoolIdParametersPathNumber parameters))) GHC.Base.++ ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksPoolIdParametersPathPoolId parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksPoolIdParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
