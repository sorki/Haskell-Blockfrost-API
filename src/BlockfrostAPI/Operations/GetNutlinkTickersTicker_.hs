-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getNutlinkTickers_Ticker_
module BlockfrostAPI.Operations.GetNutlinkTickersTicker_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /nutlink/tickers/{ticker}
-- 
-- List of records of a specific ticker
getNutlinkTickers_Ticker_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetNutlinkTickersTickerParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetNutlinkTickersTickerResponse) -- ^ Monadic computation which returns the result of the operation
getNutlinkTickers_Ticker_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetNutlinkTickersTickerResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                NutlinkTickersTicker)
                                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetNutlinkTickersTickerResponseBody400)
                                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetNutlinkTickersTickerResponseBody403)
                                                                                                                                                                                         | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetNutlinkTickersTickerResponseBody404)
                                                                                                                                                                                         | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetNutlinkTickersTickerResponseBody418)
                                                                                                                                                                                         | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetNutlinkTickersTickerResponseBody429)
                                                                                                                                                                                         | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetNutlinkTickersTickerResponseBody500)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/tickers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkTickersTickerParametersPathTicker parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/nutlink\/tickers\/{ticker}.GET.parameters@ in the specification.
-- 
-- 
data GetNutlinkTickersTickerParameters = GetNutlinkTickersTickerParameters {
  -- | pathTicker: Represents the parameter named \'ticker\'
  -- 
  -- Ticker for the pool record
  getNutlinkTickersTickerParametersPathTicker :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getNutlinkTickersTickerParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getNutlinkTickersTickerParametersQueryOrder :: (GHC.Maybe.Maybe GetNutlinkTickersTickerParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getNutlinkTickersTickerParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkTickersTickerParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathTicker" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerParametersPathTicker obj : "queryCount" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathTicker" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerParametersPathTicker obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkTickersTickerParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkTickersTickerParameters" (\obj -> (((GHC.Base.pure GetNutlinkTickersTickerParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathTicker")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetNutlinkTickersTickerParameters' with all required fields.
mkGetNutlinkTickersTickerParameters :: Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerParametersPathTicker'
  -> GetNutlinkTickersTickerParameters
mkGetNutlinkTickersTickerParameters getNutlinkTickersTickerParametersPathTicker = GetNutlinkTickersTickerParameters{getNutlinkTickersTickerParametersPathTicker = getNutlinkTickersTickerParametersPathTicker,
                                                                                                                    getNutlinkTickersTickerParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                    getNutlinkTickersTickerParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                    getNutlinkTickersTickerParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/nutlink\/tickers\/{ticker}.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetNutlinkTickersTickerParametersQueryOrder' =
   GetNutlinkTickersTickerParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetNutlinkTickersTickerParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetNutlinkTickersTickerParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetNutlinkTickersTickerParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkTickersTickerParametersQueryOrder'
    where toJSON (GetNutlinkTickersTickerParametersQueryOrder'Other val) = val
          toJSON (GetNutlinkTickersTickerParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetNutlinkTickersTickerParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetNutlinkTickersTickerParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkTickersTickerParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetNutlinkTickersTickerParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetNutlinkTickersTickerParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetNutlinkTickersTickerParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getNutlinkTickers_Ticker_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetNutlinkTickersTickerResponseError' is used.
data GetNutlinkTickersTickerResponse =
   GetNutlinkTickersTickerResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetNutlinkTickersTickerResponse200 NutlinkTickersTicker -- ^ Return the tickers provided by the metadata oracle
  | GetNutlinkTickersTickerResponse400 GetNutlinkTickersTickerResponseBody400 -- ^ Bad request
  | GetNutlinkTickersTickerResponse403 GetNutlinkTickersTickerResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetNutlinkTickersTickerResponse404 GetNutlinkTickersTickerResponseBody404 -- ^ Component not found
  | GetNutlinkTickersTickerResponse418 GetNutlinkTickersTickerResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetNutlinkTickersTickerResponse429 GetNutlinkTickersTickerResponseBody429 -- ^ Usage limit reached
  | GetNutlinkTickersTickerResponse500 GetNutlinkTickersTickerResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkTickersTickerResponseBody400 = GetNutlinkTickersTickerResponseBody400 {
  -- | error
  getNutlinkTickersTickerResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkTickersTickerResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkTickersTickerResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkTickersTickerResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkTickersTickerResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkTickersTickerResponseBody400" (\obj -> ((GHC.Base.pure GetNutlinkTickersTickerResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkTickersTickerResponseBody400' with all required fields.
mkGetNutlinkTickersTickerResponseBody400 :: Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkTickersTickerResponseBody400StatusCode'
  -> GetNutlinkTickersTickerResponseBody400
mkGetNutlinkTickersTickerResponseBody400 getNutlinkTickersTickerResponseBody400Error getNutlinkTickersTickerResponseBody400Message getNutlinkTickersTickerResponseBody400StatusCode = GetNutlinkTickersTickerResponseBody400{getNutlinkTickersTickerResponseBody400Error = getNutlinkTickersTickerResponseBody400Error,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody400Message = getNutlinkTickersTickerResponseBody400Message,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody400StatusCode = getNutlinkTickersTickerResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkTickersTickerResponseBody403 = GetNutlinkTickersTickerResponseBody403 {
  -- | error
  getNutlinkTickersTickerResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkTickersTickerResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkTickersTickerResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkTickersTickerResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkTickersTickerResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkTickersTickerResponseBody403" (\obj -> ((GHC.Base.pure GetNutlinkTickersTickerResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkTickersTickerResponseBody403' with all required fields.
mkGetNutlinkTickersTickerResponseBody403 :: Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkTickersTickerResponseBody403StatusCode'
  -> GetNutlinkTickersTickerResponseBody403
mkGetNutlinkTickersTickerResponseBody403 getNutlinkTickersTickerResponseBody403Error getNutlinkTickersTickerResponseBody403Message getNutlinkTickersTickerResponseBody403StatusCode = GetNutlinkTickersTickerResponseBody403{getNutlinkTickersTickerResponseBody403Error = getNutlinkTickersTickerResponseBody403Error,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody403Message = getNutlinkTickersTickerResponseBody403Message,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody403StatusCode = getNutlinkTickersTickerResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkTickersTickerResponseBody404 = GetNutlinkTickersTickerResponseBody404 {
  -- | error
  getNutlinkTickersTickerResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkTickersTickerResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkTickersTickerResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkTickersTickerResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkTickersTickerResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkTickersTickerResponseBody404" (\obj -> ((GHC.Base.pure GetNutlinkTickersTickerResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkTickersTickerResponseBody404' with all required fields.
mkGetNutlinkTickersTickerResponseBody404 :: Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkTickersTickerResponseBody404StatusCode'
  -> GetNutlinkTickersTickerResponseBody404
mkGetNutlinkTickersTickerResponseBody404 getNutlinkTickersTickerResponseBody404Error getNutlinkTickersTickerResponseBody404Message getNutlinkTickersTickerResponseBody404StatusCode = GetNutlinkTickersTickerResponseBody404{getNutlinkTickersTickerResponseBody404Error = getNutlinkTickersTickerResponseBody404Error,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody404Message = getNutlinkTickersTickerResponseBody404Message,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody404StatusCode = getNutlinkTickersTickerResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkTickersTickerResponseBody418 = GetNutlinkTickersTickerResponseBody418 {
  -- | error
  getNutlinkTickersTickerResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkTickersTickerResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkTickersTickerResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkTickersTickerResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkTickersTickerResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkTickersTickerResponseBody418" (\obj -> ((GHC.Base.pure GetNutlinkTickersTickerResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkTickersTickerResponseBody418' with all required fields.
mkGetNutlinkTickersTickerResponseBody418 :: Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkTickersTickerResponseBody418StatusCode'
  -> GetNutlinkTickersTickerResponseBody418
mkGetNutlinkTickersTickerResponseBody418 getNutlinkTickersTickerResponseBody418Error getNutlinkTickersTickerResponseBody418Message getNutlinkTickersTickerResponseBody418StatusCode = GetNutlinkTickersTickerResponseBody418{getNutlinkTickersTickerResponseBody418Error = getNutlinkTickersTickerResponseBody418Error,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody418Message = getNutlinkTickersTickerResponseBody418Message,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody418StatusCode = getNutlinkTickersTickerResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkTickersTickerResponseBody429 = GetNutlinkTickersTickerResponseBody429 {
  -- | error
  getNutlinkTickersTickerResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkTickersTickerResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkTickersTickerResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkTickersTickerResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkTickersTickerResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkTickersTickerResponseBody429" (\obj -> ((GHC.Base.pure GetNutlinkTickersTickerResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkTickersTickerResponseBody429' with all required fields.
mkGetNutlinkTickersTickerResponseBody429 :: Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkTickersTickerResponseBody429StatusCode'
  -> GetNutlinkTickersTickerResponseBody429
mkGetNutlinkTickersTickerResponseBody429 getNutlinkTickersTickerResponseBody429Error getNutlinkTickersTickerResponseBody429Message getNutlinkTickersTickerResponseBody429StatusCode = GetNutlinkTickersTickerResponseBody429{getNutlinkTickersTickerResponseBody429Error = getNutlinkTickersTickerResponseBody429Error,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody429Message = getNutlinkTickersTickerResponseBody429Message,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody429StatusCode = getNutlinkTickersTickerResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkTickersTickerResponseBody500 = GetNutlinkTickersTickerResponseBody500 {
  -- | error
  getNutlinkTickersTickerResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkTickersTickerResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkTickersTickerResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkTickersTickerResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkTickersTickerResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkTickersTickerResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkTickersTickerResponseBody500" (\obj -> ((GHC.Base.pure GetNutlinkTickersTickerResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkTickersTickerResponseBody500' with all required fields.
mkGetNutlinkTickersTickerResponseBody500 :: Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkTickersTickerResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkTickersTickerResponseBody500StatusCode'
  -> GetNutlinkTickersTickerResponseBody500
mkGetNutlinkTickersTickerResponseBody500 getNutlinkTickersTickerResponseBody500Error getNutlinkTickersTickerResponseBody500Message getNutlinkTickersTickerResponseBody500StatusCode = GetNutlinkTickersTickerResponseBody500{getNutlinkTickersTickerResponseBody500Error = getNutlinkTickersTickerResponseBody500Error,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody500Message = getNutlinkTickersTickerResponseBody500Message,
                                                                                                                                                                                                                             getNutlinkTickersTickerResponseBody500StatusCode = getNutlinkTickersTickerResponseBody500StatusCode}
-- | > GET /nutlink/tickers/{ticker}
-- 
-- The same as 'getNutlinkTickers_Ticker_' but accepts an explicit configuration.
getNutlinkTickers_Ticker_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetNutlinkTickersTickerParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetNutlinkTickersTickerResponse) -- ^ Monadic computation which returns the result of the operation
getNutlinkTickers_Ticker_WithConfiguration config
                                           parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetNutlinkTickersTickerResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 NutlinkTickersTicker)
                                                                                                                                                                                                          | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkTickersTickerResponseBody400)
                                                                                                                                                                                                          | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkTickersTickerResponseBody403)
                                                                                                                                                                                                          | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkTickersTickerResponseBody404)
                                                                                                                                                                                                          | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkTickersTickerResponseBody418)
                                                                                                                                                                                                          | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkTickersTickerResponseBody429)
                                                                                                                                                                                                          | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkTickersTickerResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkTickersTickerResponseBody500)
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/tickers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkTickersTickerParametersPathTicker parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /nutlink/tickers/{ticker}
-- 
-- The same as 'getNutlinkTickers_Ticker_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getNutlinkTickers_Ticker_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetNutlinkTickersTickerParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getNutlinkTickers_Ticker_Raw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/tickers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkTickersTickerParametersPathTicker parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /nutlink/tickers/{ticker}
-- 
-- The same as 'getNutlinkTickers_Ticker_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getNutlinkTickers_Ticker_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetNutlinkTickersTickerParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getNutlinkTickers_Ticker_WithConfigurationRaw config
                                              parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/tickers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkTickersTickerParametersPathTicker parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkTickersTickerParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
