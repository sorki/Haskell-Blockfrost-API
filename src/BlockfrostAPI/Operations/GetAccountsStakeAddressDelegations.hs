-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccounts_StakeAddress_Delegations
module BlockfrostAPI.Operations.GetAccountsStakeAddressDelegations where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /accounts/{stake_address}/delegations
-- 
-- Obtain information about the delegation of a specific account.
getAccounts_StakeAddress_Delegations :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressDelegationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressDelegationsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_Delegations parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressDelegationsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AccountDelegationContents)
                                                                                                                                                                                                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressDelegationsResponseBody400)
                                                                                                                                                                                                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressDelegationsResponseBody403)
                                                                                                                                                                                                               | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressDelegationsResponseBody404)
                                                                                                                                                                                                               | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressDelegationsResponseBody418)
                                                                                                                                                                                                               | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressDelegationsResponseBody429)
                                                                                                                                                                                                               | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressDelegationsResponseBody500)
                                                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressDelegationsParametersPathStakeAddress parameters))) GHC.Base.++ "/delegations"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/accounts\/{stake_address}\/delegations.GET.parameters@ in the specification.
-- 
-- 
data GetAccountsStakeAddressDelegationsParameters = GetAccountsStakeAddressDelegationsParameters {
  -- | pathStake_address: Represents the parameter named \'stake_address\'
  -- 
  -- Bech32 stake address.
  getAccountsStakeAddressDelegationsParametersPathStakeAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAccountsStakeAddressDelegationsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAccountsStakeAddressDelegationsParametersQueryOrder :: (GHC.Maybe.Maybe GetAccountsStakeAddressDelegationsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAccountsStakeAddressDelegationsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressDelegationsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsParametersPathStakeAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsParametersPathStakeAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressDelegationsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressDelegationsParameters" (\obj -> (((GHC.Base.pure GetAccountsStakeAddressDelegationsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathStake_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAccountsStakeAddressDelegationsParameters' with all required fields.
mkGetAccountsStakeAddressDelegationsParameters :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsParametersPathStakeAddress'
  -> GetAccountsStakeAddressDelegationsParameters
mkGetAccountsStakeAddressDelegationsParameters getAccountsStakeAddressDelegationsParametersPathStakeAddress = GetAccountsStakeAddressDelegationsParameters{getAccountsStakeAddressDelegationsParametersPathStakeAddress = getAccountsStakeAddressDelegationsParametersPathStakeAddress,
                                                                                                                                                           getAccountsStakeAddressDelegationsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                                           getAccountsStakeAddressDelegationsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                                           getAccountsStakeAddressDelegationsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/accounts\/{stake_address}\/delegations.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAccountsStakeAddressDelegationsParametersQueryOrder' =
   GetAccountsStakeAddressDelegationsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAccountsStakeAddressDelegationsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAccountsStakeAddressDelegationsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAccountsStakeAddressDelegationsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressDelegationsParametersQueryOrder'
    where toJSON (GetAccountsStakeAddressDelegationsParametersQueryOrder'Other val) = val
          toJSON (GetAccountsStakeAddressDelegationsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAccountsStakeAddressDelegationsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAccountsStakeAddressDelegationsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressDelegationsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAccountsStakeAddressDelegationsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAccountsStakeAddressDelegationsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAccountsStakeAddressDelegationsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAccounts_StakeAddress_Delegations'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountsStakeAddressDelegationsResponseError' is used.
data GetAccountsStakeAddressDelegationsResponse =
   GetAccountsStakeAddressDelegationsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountsStakeAddressDelegationsResponse200 AccountDelegationContents -- ^ Return the account delegations content
  | GetAccountsStakeAddressDelegationsResponse400 GetAccountsStakeAddressDelegationsResponseBody400 -- ^ Bad request
  | GetAccountsStakeAddressDelegationsResponse403 GetAccountsStakeAddressDelegationsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAccountsStakeAddressDelegationsResponse404 GetAccountsStakeAddressDelegationsResponseBody404 -- ^ Component not found
  | GetAccountsStakeAddressDelegationsResponse418 GetAccountsStakeAddressDelegationsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAccountsStakeAddressDelegationsResponse429 GetAccountsStakeAddressDelegationsResponseBody429 -- ^ Usage limit reached
  | GetAccountsStakeAddressDelegationsResponse500 GetAccountsStakeAddressDelegationsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressDelegationsResponseBody400 = GetAccountsStakeAddressDelegationsResponseBody400 {
  -- | error
  getAccountsStakeAddressDelegationsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressDelegationsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressDelegationsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressDelegationsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressDelegationsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressDelegationsResponseBody400" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressDelegationsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressDelegationsResponseBody400' with all required fields.
mkGetAccountsStakeAddressDelegationsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressDelegationsResponseBody400StatusCode'
  -> GetAccountsStakeAddressDelegationsResponseBody400
mkGetAccountsStakeAddressDelegationsResponseBody400 getAccountsStakeAddressDelegationsResponseBody400Error getAccountsStakeAddressDelegationsResponseBody400Message getAccountsStakeAddressDelegationsResponseBody400StatusCode = GetAccountsStakeAddressDelegationsResponseBody400{getAccountsStakeAddressDelegationsResponseBody400Error = getAccountsStakeAddressDelegationsResponseBody400Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody400Message = getAccountsStakeAddressDelegationsResponseBody400Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody400StatusCode = getAccountsStakeAddressDelegationsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressDelegationsResponseBody403 = GetAccountsStakeAddressDelegationsResponseBody403 {
  -- | error
  getAccountsStakeAddressDelegationsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressDelegationsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressDelegationsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressDelegationsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressDelegationsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressDelegationsResponseBody403" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressDelegationsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressDelegationsResponseBody403' with all required fields.
mkGetAccountsStakeAddressDelegationsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressDelegationsResponseBody403StatusCode'
  -> GetAccountsStakeAddressDelegationsResponseBody403
mkGetAccountsStakeAddressDelegationsResponseBody403 getAccountsStakeAddressDelegationsResponseBody403Error getAccountsStakeAddressDelegationsResponseBody403Message getAccountsStakeAddressDelegationsResponseBody403StatusCode = GetAccountsStakeAddressDelegationsResponseBody403{getAccountsStakeAddressDelegationsResponseBody403Error = getAccountsStakeAddressDelegationsResponseBody403Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody403Message = getAccountsStakeAddressDelegationsResponseBody403Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody403StatusCode = getAccountsStakeAddressDelegationsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressDelegationsResponseBody404 = GetAccountsStakeAddressDelegationsResponseBody404 {
  -- | error
  getAccountsStakeAddressDelegationsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressDelegationsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressDelegationsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressDelegationsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressDelegationsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressDelegationsResponseBody404" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressDelegationsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressDelegationsResponseBody404' with all required fields.
mkGetAccountsStakeAddressDelegationsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressDelegationsResponseBody404StatusCode'
  -> GetAccountsStakeAddressDelegationsResponseBody404
mkGetAccountsStakeAddressDelegationsResponseBody404 getAccountsStakeAddressDelegationsResponseBody404Error getAccountsStakeAddressDelegationsResponseBody404Message getAccountsStakeAddressDelegationsResponseBody404StatusCode = GetAccountsStakeAddressDelegationsResponseBody404{getAccountsStakeAddressDelegationsResponseBody404Error = getAccountsStakeAddressDelegationsResponseBody404Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody404Message = getAccountsStakeAddressDelegationsResponseBody404Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody404StatusCode = getAccountsStakeAddressDelegationsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressDelegationsResponseBody418 = GetAccountsStakeAddressDelegationsResponseBody418 {
  -- | error
  getAccountsStakeAddressDelegationsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressDelegationsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressDelegationsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressDelegationsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressDelegationsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressDelegationsResponseBody418" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressDelegationsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressDelegationsResponseBody418' with all required fields.
mkGetAccountsStakeAddressDelegationsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressDelegationsResponseBody418StatusCode'
  -> GetAccountsStakeAddressDelegationsResponseBody418
mkGetAccountsStakeAddressDelegationsResponseBody418 getAccountsStakeAddressDelegationsResponseBody418Error getAccountsStakeAddressDelegationsResponseBody418Message getAccountsStakeAddressDelegationsResponseBody418StatusCode = GetAccountsStakeAddressDelegationsResponseBody418{getAccountsStakeAddressDelegationsResponseBody418Error = getAccountsStakeAddressDelegationsResponseBody418Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody418Message = getAccountsStakeAddressDelegationsResponseBody418Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody418StatusCode = getAccountsStakeAddressDelegationsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressDelegationsResponseBody429 = GetAccountsStakeAddressDelegationsResponseBody429 {
  -- | error
  getAccountsStakeAddressDelegationsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressDelegationsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressDelegationsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressDelegationsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressDelegationsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressDelegationsResponseBody429" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressDelegationsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressDelegationsResponseBody429' with all required fields.
mkGetAccountsStakeAddressDelegationsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressDelegationsResponseBody429StatusCode'
  -> GetAccountsStakeAddressDelegationsResponseBody429
mkGetAccountsStakeAddressDelegationsResponseBody429 getAccountsStakeAddressDelegationsResponseBody429Error getAccountsStakeAddressDelegationsResponseBody429Message getAccountsStakeAddressDelegationsResponseBody429StatusCode = GetAccountsStakeAddressDelegationsResponseBody429{getAccountsStakeAddressDelegationsResponseBody429Error = getAccountsStakeAddressDelegationsResponseBody429Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody429Message = getAccountsStakeAddressDelegationsResponseBody429Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody429StatusCode = getAccountsStakeAddressDelegationsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressDelegationsResponseBody500 = GetAccountsStakeAddressDelegationsResponseBody500 {
  -- | error
  getAccountsStakeAddressDelegationsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressDelegationsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressDelegationsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressDelegationsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressDelegationsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressDelegationsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressDelegationsResponseBody500" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressDelegationsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressDelegationsResponseBody500' with all required fields.
mkGetAccountsStakeAddressDelegationsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressDelegationsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressDelegationsResponseBody500StatusCode'
  -> GetAccountsStakeAddressDelegationsResponseBody500
mkGetAccountsStakeAddressDelegationsResponseBody500 getAccountsStakeAddressDelegationsResponseBody500Error getAccountsStakeAddressDelegationsResponseBody500Message getAccountsStakeAddressDelegationsResponseBody500StatusCode = GetAccountsStakeAddressDelegationsResponseBody500{getAccountsStakeAddressDelegationsResponseBody500Error = getAccountsStakeAddressDelegationsResponseBody500Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody500Message = getAccountsStakeAddressDelegationsResponseBody500Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressDelegationsResponseBody500StatusCode = getAccountsStakeAddressDelegationsResponseBody500StatusCode}
-- | > GET /accounts/{stake_address}/delegations
-- 
-- The same as 'getAccounts_StakeAddress_Delegations' but accepts an explicit configuration.
getAccounts_StakeAddress_DelegationsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressDelegationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressDelegationsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_DelegationsWithConfiguration config
                                                      parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressDelegationsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AccountDelegationContents)
                                                                                                                                                                                                                                | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressDelegationsResponseBody400)
                                                                                                                                                                                                                                | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressDelegationsResponseBody403)
                                                                                                                                                                                                                                | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressDelegationsResponseBody404)
                                                                                                                                                                                                                                | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressDelegationsResponseBody418)
                                                                                                                                                                                                                                | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressDelegationsResponseBody429)
                                                                                                                                                                                                                                | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressDelegationsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressDelegationsResponseBody500)
                                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressDelegationsParametersPathStakeAddress parameters))) GHC.Base.++ "/delegations"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/delegations
-- 
-- The same as 'getAccounts_StakeAddress_Delegations' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_DelegationsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressDelegationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_DelegationsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressDelegationsParametersPathStakeAddress parameters))) GHC.Base.++ "/delegations"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/delegations
-- 
-- The same as 'getAccounts_StakeAddress_Delegations' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_DelegationsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressDelegationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_DelegationsWithConfigurationRaw config
                                                         parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressDelegationsParametersPathStakeAddress parameters))) GHC.Base.++ "/delegations"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressDelegationsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
