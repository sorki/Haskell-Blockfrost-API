-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBlocks_HashOrNumber_Txs
module BlockfrostAPI.Operations.GetBlocksHashOrNumberTxs where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /blocks/{hash_or_number}/txs
-- 
-- Return the transactions within the block.
getBlocks_HashOrNumber_Txs :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetBlocksHashOrNumberTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetBlocksHashOrNumberTxsResponse) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_Txs parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBlocksHashOrNumberTxsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   BlockContentTxs)
                                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksHashOrNumberTxsResponseBody400)
                                                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksHashOrNumberTxsResponseBody403)
                                                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksHashOrNumberTxsResponseBody404)
                                                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksHashOrNumberTxsResponseBody418)
                                                                                                                                                                                           | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksHashOrNumberTxsResponseBody429)
                                                                                                                                                                                           | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksHashOrNumberTxsResponseBody500)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberTxsParametersPathHashOrNumber parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/blocks\/{hash_or_number}\/txs.GET.parameters@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberTxsParameters = GetBlocksHashOrNumberTxsParameters {
  -- | pathHash_or_number: Represents the parameter named \'hash_or_number\'
  -- 
  -- Hash of the requested block.
  getBlocksHashOrNumberTxsParametersPathHashOrNumber :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getBlocksHashOrNumberTxsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- Ordered by tx index in the block.
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getBlocksHashOrNumberTxsParametersQueryOrder :: (GHC.Maybe.Maybe GetBlocksHashOrNumberTxsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getBlocksHashOrNumberTxsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberTxsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathHash_or_number" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsParametersPathHashOrNumber obj : "queryCount" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathHash_or_number" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsParametersPathHashOrNumber obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberTxsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberTxsParameters" (\obj -> (((GHC.Base.pure GetBlocksHashOrNumberTxsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathHash_or_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetBlocksHashOrNumberTxsParameters' with all required fields.
mkGetBlocksHashOrNumberTxsParameters :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsParametersPathHashOrNumber'
  -> GetBlocksHashOrNumberTxsParameters
mkGetBlocksHashOrNumberTxsParameters getBlocksHashOrNumberTxsParametersPathHashOrNumber = GetBlocksHashOrNumberTxsParameters{getBlocksHashOrNumberTxsParametersPathHashOrNumber = getBlocksHashOrNumberTxsParametersPathHashOrNumber,
                                                                                                                             getBlocksHashOrNumberTxsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                             getBlocksHashOrNumberTxsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                             getBlocksHashOrNumberTxsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/blocks\/{hash_or_number}\/txs.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- Ordered by tx index in the block.
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetBlocksHashOrNumberTxsParametersQueryOrder' =
   GetBlocksHashOrNumberTxsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetBlocksHashOrNumberTxsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetBlocksHashOrNumberTxsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetBlocksHashOrNumberTxsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberTxsParametersQueryOrder'
    where toJSON (GetBlocksHashOrNumberTxsParametersQueryOrder'Other val) = val
          toJSON (GetBlocksHashOrNumberTxsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetBlocksHashOrNumberTxsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetBlocksHashOrNumberTxsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberTxsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetBlocksHashOrNumberTxsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetBlocksHashOrNumberTxsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetBlocksHashOrNumberTxsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getBlocks_HashOrNumber_Txs'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBlocksHashOrNumberTxsResponseError' is used.
data GetBlocksHashOrNumberTxsResponse =
   GetBlocksHashOrNumberTxsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBlocksHashOrNumberTxsResponse200 BlockContentTxs -- ^ Return the transactions within the block.
  | GetBlocksHashOrNumberTxsResponse400 GetBlocksHashOrNumberTxsResponseBody400 -- ^ Bad request
  | GetBlocksHashOrNumberTxsResponse403 GetBlocksHashOrNumberTxsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetBlocksHashOrNumberTxsResponse404 GetBlocksHashOrNumberTxsResponseBody404 -- ^ Component not found
  | GetBlocksHashOrNumberTxsResponse418 GetBlocksHashOrNumberTxsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetBlocksHashOrNumberTxsResponse429 GetBlocksHashOrNumberTxsResponseBody429 -- ^ Usage limit reached
  | GetBlocksHashOrNumberTxsResponse500 GetBlocksHashOrNumberTxsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberTxsResponseBody400 = GetBlocksHashOrNumberTxsResponseBody400 {
  -- | error
  getBlocksHashOrNumberTxsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberTxsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberTxsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberTxsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberTxsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberTxsResponseBody400" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberTxsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberTxsResponseBody400' with all required fields.
mkGetBlocksHashOrNumberTxsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberTxsResponseBody400StatusCode'
  -> GetBlocksHashOrNumberTxsResponseBody400
mkGetBlocksHashOrNumberTxsResponseBody400 getBlocksHashOrNumberTxsResponseBody400Error getBlocksHashOrNumberTxsResponseBody400Message getBlocksHashOrNumberTxsResponseBody400StatusCode = GetBlocksHashOrNumberTxsResponseBody400{getBlocksHashOrNumberTxsResponseBody400Error = getBlocksHashOrNumberTxsResponseBody400Error,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody400Message = getBlocksHashOrNumberTxsResponseBody400Message,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody400StatusCode = getBlocksHashOrNumberTxsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberTxsResponseBody403 = GetBlocksHashOrNumberTxsResponseBody403 {
  -- | error
  getBlocksHashOrNumberTxsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberTxsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberTxsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberTxsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberTxsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberTxsResponseBody403" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberTxsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberTxsResponseBody403' with all required fields.
mkGetBlocksHashOrNumberTxsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberTxsResponseBody403StatusCode'
  -> GetBlocksHashOrNumberTxsResponseBody403
mkGetBlocksHashOrNumberTxsResponseBody403 getBlocksHashOrNumberTxsResponseBody403Error getBlocksHashOrNumberTxsResponseBody403Message getBlocksHashOrNumberTxsResponseBody403StatusCode = GetBlocksHashOrNumberTxsResponseBody403{getBlocksHashOrNumberTxsResponseBody403Error = getBlocksHashOrNumberTxsResponseBody403Error,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody403Message = getBlocksHashOrNumberTxsResponseBody403Message,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody403StatusCode = getBlocksHashOrNumberTxsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberTxsResponseBody404 = GetBlocksHashOrNumberTxsResponseBody404 {
  -- | error
  getBlocksHashOrNumberTxsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberTxsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberTxsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberTxsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberTxsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberTxsResponseBody404" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberTxsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberTxsResponseBody404' with all required fields.
mkGetBlocksHashOrNumberTxsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberTxsResponseBody404StatusCode'
  -> GetBlocksHashOrNumberTxsResponseBody404
mkGetBlocksHashOrNumberTxsResponseBody404 getBlocksHashOrNumberTxsResponseBody404Error getBlocksHashOrNumberTxsResponseBody404Message getBlocksHashOrNumberTxsResponseBody404StatusCode = GetBlocksHashOrNumberTxsResponseBody404{getBlocksHashOrNumberTxsResponseBody404Error = getBlocksHashOrNumberTxsResponseBody404Error,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody404Message = getBlocksHashOrNumberTxsResponseBody404Message,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody404StatusCode = getBlocksHashOrNumberTxsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberTxsResponseBody418 = GetBlocksHashOrNumberTxsResponseBody418 {
  -- | error
  getBlocksHashOrNumberTxsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberTxsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberTxsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberTxsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberTxsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberTxsResponseBody418" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberTxsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberTxsResponseBody418' with all required fields.
mkGetBlocksHashOrNumberTxsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberTxsResponseBody418StatusCode'
  -> GetBlocksHashOrNumberTxsResponseBody418
mkGetBlocksHashOrNumberTxsResponseBody418 getBlocksHashOrNumberTxsResponseBody418Error getBlocksHashOrNumberTxsResponseBody418Message getBlocksHashOrNumberTxsResponseBody418StatusCode = GetBlocksHashOrNumberTxsResponseBody418{getBlocksHashOrNumberTxsResponseBody418Error = getBlocksHashOrNumberTxsResponseBody418Error,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody418Message = getBlocksHashOrNumberTxsResponseBody418Message,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody418StatusCode = getBlocksHashOrNumberTxsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberTxsResponseBody429 = GetBlocksHashOrNumberTxsResponseBody429 {
  -- | error
  getBlocksHashOrNumberTxsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberTxsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberTxsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberTxsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberTxsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberTxsResponseBody429" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberTxsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberTxsResponseBody429' with all required fields.
mkGetBlocksHashOrNumberTxsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberTxsResponseBody429StatusCode'
  -> GetBlocksHashOrNumberTxsResponseBody429
mkGetBlocksHashOrNumberTxsResponseBody429 getBlocksHashOrNumberTxsResponseBody429Error getBlocksHashOrNumberTxsResponseBody429Message getBlocksHashOrNumberTxsResponseBody429StatusCode = GetBlocksHashOrNumberTxsResponseBody429{getBlocksHashOrNumberTxsResponseBody429Error = getBlocksHashOrNumberTxsResponseBody429Error,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody429Message = getBlocksHashOrNumberTxsResponseBody429Message,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody429StatusCode = getBlocksHashOrNumberTxsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberTxsResponseBody500 = GetBlocksHashOrNumberTxsResponseBody500 {
  -- | error
  getBlocksHashOrNumberTxsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberTxsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberTxsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberTxsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberTxsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberTxsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberTxsResponseBody500" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberTxsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberTxsResponseBody500' with all required fields.
mkGetBlocksHashOrNumberTxsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberTxsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberTxsResponseBody500StatusCode'
  -> GetBlocksHashOrNumberTxsResponseBody500
mkGetBlocksHashOrNumberTxsResponseBody500 getBlocksHashOrNumberTxsResponseBody500Error getBlocksHashOrNumberTxsResponseBody500Message getBlocksHashOrNumberTxsResponseBody500StatusCode = GetBlocksHashOrNumberTxsResponseBody500{getBlocksHashOrNumberTxsResponseBody500Error = getBlocksHashOrNumberTxsResponseBody500Error,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody500Message = getBlocksHashOrNumberTxsResponseBody500Message,
                                                                                                                                                                                                                                  getBlocksHashOrNumberTxsResponseBody500StatusCode = getBlocksHashOrNumberTxsResponseBody500StatusCode}
-- | > GET /blocks/{hash_or_number}/txs
-- 
-- The same as 'getBlocks_HashOrNumber_Txs' but accepts an explicit configuration.
getBlocks_HashOrNumber_TxsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetBlocksHashOrNumberTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetBlocksHashOrNumberTxsResponse) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_TxsWithConfiguration config
                                            parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetBlocksHashOrNumberTxsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockContentTxs)
                                                                                                                                                                                                            | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberTxsResponseBody400)
                                                                                                                                                                                                            | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberTxsResponseBody403)
                                                                                                                                                                                                            | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberTxsResponseBody404)
                                                                                                                                                                                                            | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberTxsResponseBody418)
                                                                                                                                                                                                            | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberTxsResponseBody429)
                                                                                                                                                                                                            | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberTxsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberTxsResponseBody500)
                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberTxsParametersPathHashOrNumber parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /blocks/{hash_or_number}/txs
-- 
-- The same as 'getBlocks_HashOrNumber_Txs' but returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocks_HashOrNumber_TxsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetBlocksHashOrNumberTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_TxsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberTxsParametersPathHashOrNumber parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /blocks/{hash_or_number}/txs
-- 
-- The same as 'getBlocks_HashOrNumber_Txs' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocks_HashOrNumber_TxsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetBlocksHashOrNumberTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_TxsWithConfigurationRaw config
                                               parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberTxsParametersPathHashOrNumber parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
