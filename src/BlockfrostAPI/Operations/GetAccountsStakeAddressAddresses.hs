-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccounts_StakeAddress_Addresses
module BlockfrostAPI.Operations.GetAccountsStakeAddressAddresses where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /accounts/{stake_address}/addresses
-- 
-- Obtain information about the addresses of a specific account.
getAccounts_StakeAddress_Addresses :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressAddressesResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_Addresses parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressAddressesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           AccountAddressesContent)
                                                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAccountsStakeAddressAddressesResponseBody400)
                                                                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAccountsStakeAddressAddressesResponseBody403)
                                                                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAccountsStakeAddressAddressesResponseBody404)
                                                                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAccountsStakeAddressAddressesResponseBody418)
                                                                                                                                                                                                           | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAccountsStakeAddressAddressesResponseBody429)
                                                                                                                                                                                                           | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAccountsStakeAddressAddressesResponseBody500)
                                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressAddressesParametersPathStakeAddress parameters))) GHC.Base.++ "/addresses"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/accounts\/{stake_address}\/addresses.GET.parameters@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesParameters = GetAccountsStakeAddressAddressesParameters {
  -- | pathStake_address: Represents the parameter named \'stake_address\'
  -- 
  -- Bech32 stake address.
  getAccountsStakeAddressAddressesParametersPathStakeAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAccountsStakeAddressAddressesParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAccountsStakeAddressAddressesParametersQueryOrder :: (GHC.Maybe.Maybe GetAccountsStakeAddressAddressesParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAccountsStakeAddressAddressesParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesParametersPathStakeAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesParametersPathStakeAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesParameters" (\obj -> (((GHC.Base.pure GetAccountsStakeAddressAddressesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathStake_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAccountsStakeAddressAddressesParameters' with all required fields.
mkGetAccountsStakeAddressAddressesParameters :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesParametersPathStakeAddress'
  -> GetAccountsStakeAddressAddressesParameters
mkGetAccountsStakeAddressAddressesParameters getAccountsStakeAddressAddressesParametersPathStakeAddress = GetAccountsStakeAddressAddressesParameters{getAccountsStakeAddressAddressesParametersPathStakeAddress = getAccountsStakeAddressAddressesParametersPathStakeAddress,
                                                                                                                                                     getAccountsStakeAddressAddressesParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                                     getAccountsStakeAddressAddressesParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                                     getAccountsStakeAddressAddressesParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/accounts\/{stake_address}\/addresses.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAccountsStakeAddressAddressesParametersQueryOrder' =
   GetAccountsStakeAddressAddressesParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAccountsStakeAddressAddressesParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAccountsStakeAddressAddressesParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAccountsStakeAddressAddressesParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesParametersQueryOrder'
    where toJSON (GetAccountsStakeAddressAddressesParametersQueryOrder'Other val) = val
          toJSON (GetAccountsStakeAddressAddressesParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAccountsStakeAddressAddressesParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAccountsStakeAddressAddressesParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAccountsStakeAddressAddressesParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAccountsStakeAddressAddressesParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAccountsStakeAddressAddressesParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAccounts_StakeAddress_Addresses'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountsStakeAddressAddressesResponseError' is used.
data GetAccountsStakeAddressAddressesResponse =
   GetAccountsStakeAddressAddressesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountsStakeAddressAddressesResponse200 AccountAddressesContent -- ^ Return the account addresses content
  | GetAccountsStakeAddressAddressesResponse400 GetAccountsStakeAddressAddressesResponseBody400 -- ^ Bad request
  | GetAccountsStakeAddressAddressesResponse403 GetAccountsStakeAddressAddressesResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAccountsStakeAddressAddressesResponse404 GetAccountsStakeAddressAddressesResponseBody404 -- ^ Component not found
  | GetAccountsStakeAddressAddressesResponse418 GetAccountsStakeAddressAddressesResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAccountsStakeAddressAddressesResponse429 GetAccountsStakeAddressAddressesResponseBody429 -- ^ Usage limit reached
  | GetAccountsStakeAddressAddressesResponse500 GetAccountsStakeAddressAddressesResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesResponseBody400 = GetAccountsStakeAddressAddressesResponseBody400 {
  -- | error
  getAccountsStakeAddressAddressesResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesResponseBody400" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesResponseBody400' with all required fields.
mkGetAccountsStakeAddressAddressesResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesResponseBody400StatusCode'
  -> GetAccountsStakeAddressAddressesResponseBody400
mkGetAccountsStakeAddressAddressesResponseBody400 getAccountsStakeAddressAddressesResponseBody400Error getAccountsStakeAddressAddressesResponseBody400Message getAccountsStakeAddressAddressesResponseBody400StatusCode = GetAccountsStakeAddressAddressesResponseBody400{getAccountsStakeAddressAddressesResponseBody400Error = getAccountsStakeAddressAddressesResponseBody400Error,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody400Message = getAccountsStakeAddressAddressesResponseBody400Message,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody400StatusCode = getAccountsStakeAddressAddressesResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesResponseBody403 = GetAccountsStakeAddressAddressesResponseBody403 {
  -- | error
  getAccountsStakeAddressAddressesResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesResponseBody403" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesResponseBody403' with all required fields.
mkGetAccountsStakeAddressAddressesResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesResponseBody403StatusCode'
  -> GetAccountsStakeAddressAddressesResponseBody403
mkGetAccountsStakeAddressAddressesResponseBody403 getAccountsStakeAddressAddressesResponseBody403Error getAccountsStakeAddressAddressesResponseBody403Message getAccountsStakeAddressAddressesResponseBody403StatusCode = GetAccountsStakeAddressAddressesResponseBody403{getAccountsStakeAddressAddressesResponseBody403Error = getAccountsStakeAddressAddressesResponseBody403Error,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody403Message = getAccountsStakeAddressAddressesResponseBody403Message,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody403StatusCode = getAccountsStakeAddressAddressesResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesResponseBody404 = GetAccountsStakeAddressAddressesResponseBody404 {
  -- | error
  getAccountsStakeAddressAddressesResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesResponseBody404" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesResponseBody404' with all required fields.
mkGetAccountsStakeAddressAddressesResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesResponseBody404StatusCode'
  -> GetAccountsStakeAddressAddressesResponseBody404
mkGetAccountsStakeAddressAddressesResponseBody404 getAccountsStakeAddressAddressesResponseBody404Error getAccountsStakeAddressAddressesResponseBody404Message getAccountsStakeAddressAddressesResponseBody404StatusCode = GetAccountsStakeAddressAddressesResponseBody404{getAccountsStakeAddressAddressesResponseBody404Error = getAccountsStakeAddressAddressesResponseBody404Error,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody404Message = getAccountsStakeAddressAddressesResponseBody404Message,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody404StatusCode = getAccountsStakeAddressAddressesResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesResponseBody418 = GetAccountsStakeAddressAddressesResponseBody418 {
  -- | error
  getAccountsStakeAddressAddressesResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesResponseBody418" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesResponseBody418' with all required fields.
mkGetAccountsStakeAddressAddressesResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesResponseBody418StatusCode'
  -> GetAccountsStakeAddressAddressesResponseBody418
mkGetAccountsStakeAddressAddressesResponseBody418 getAccountsStakeAddressAddressesResponseBody418Error getAccountsStakeAddressAddressesResponseBody418Message getAccountsStakeAddressAddressesResponseBody418StatusCode = GetAccountsStakeAddressAddressesResponseBody418{getAccountsStakeAddressAddressesResponseBody418Error = getAccountsStakeAddressAddressesResponseBody418Error,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody418Message = getAccountsStakeAddressAddressesResponseBody418Message,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody418StatusCode = getAccountsStakeAddressAddressesResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesResponseBody429 = GetAccountsStakeAddressAddressesResponseBody429 {
  -- | error
  getAccountsStakeAddressAddressesResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesResponseBody429" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesResponseBody429' with all required fields.
mkGetAccountsStakeAddressAddressesResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesResponseBody429StatusCode'
  -> GetAccountsStakeAddressAddressesResponseBody429
mkGetAccountsStakeAddressAddressesResponseBody429 getAccountsStakeAddressAddressesResponseBody429Error getAccountsStakeAddressAddressesResponseBody429Message getAccountsStakeAddressAddressesResponseBody429StatusCode = GetAccountsStakeAddressAddressesResponseBody429{getAccountsStakeAddressAddressesResponseBody429Error = getAccountsStakeAddressAddressesResponseBody429Error,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody429Message = getAccountsStakeAddressAddressesResponseBody429Message,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody429StatusCode = getAccountsStakeAddressAddressesResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesResponseBody500 = GetAccountsStakeAddressAddressesResponseBody500 {
  -- | error
  getAccountsStakeAddressAddressesResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesResponseBody500" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesResponseBody500' with all required fields.
mkGetAccountsStakeAddressAddressesResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesResponseBody500StatusCode'
  -> GetAccountsStakeAddressAddressesResponseBody500
mkGetAccountsStakeAddressAddressesResponseBody500 getAccountsStakeAddressAddressesResponseBody500Error getAccountsStakeAddressAddressesResponseBody500Message getAccountsStakeAddressAddressesResponseBody500StatusCode = GetAccountsStakeAddressAddressesResponseBody500{getAccountsStakeAddressAddressesResponseBody500Error = getAccountsStakeAddressAddressesResponseBody500Error,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody500Message = getAccountsStakeAddressAddressesResponseBody500Message,
                                                                                                                                                                                                                                                                          getAccountsStakeAddressAddressesResponseBody500StatusCode = getAccountsStakeAddressAddressesResponseBody500StatusCode}
-- | > GET /accounts/{stake_address}/addresses
-- 
-- The same as 'getAccounts_StakeAddress_Addresses' but accepts an explicit configuration.
getAccounts_StakeAddress_AddressesWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressAddressesResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_AddressesWithConfiguration config
                                                    parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressAddressesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            AccountAddressesContent)
                                                                                                                                                                                                                            | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetAccountsStakeAddressAddressesResponseBody400)
                                                                                                                                                                                                                            | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetAccountsStakeAddressAddressesResponseBody403)
                                                                                                                                                                                                                            | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetAccountsStakeAddressAddressesResponseBody404)
                                                                                                                                                                                                                            | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetAccountsStakeAddressAddressesResponseBody418)
                                                                                                                                                                                                                            | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetAccountsStakeAddressAddressesResponseBody429)
                                                                                                                                                                                                                            | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetAccountsStakeAddressAddressesResponseBody500)
                                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressAddressesParametersPathStakeAddress parameters))) GHC.Base.++ "/addresses"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/addresses
-- 
-- The same as 'getAccounts_StakeAddress_Addresses' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_AddressesRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_AddressesRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressAddressesParametersPathStakeAddress parameters))) GHC.Base.++ "/addresses"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/addresses
-- 
-- The same as 'getAccounts_StakeAddress_Addresses' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_AddressesWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_AddressesWithConfigurationRaw config
                                                       parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressAddressesParametersPathStakeAddress parameters))) GHC.Base.++ "/addresses"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
