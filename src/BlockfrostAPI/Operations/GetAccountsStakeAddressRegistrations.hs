-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccounts_StakeAddress_Registrations
module BlockfrostAPI.Operations.GetAccountsStakeAddressRegistrations where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /accounts/{stake_address}/registrations
-- 
-- Obtain information about the registrations and deregistrations of a specific account.
getAccounts_StakeAddress_Registrations :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressRegistrationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressRegistrationsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_Registrations parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressRegistrationsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       AccountRegistrationContents)
                                                                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetAccountsStakeAddressRegistrationsResponseBody400)
                                                                                                                                                                                                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetAccountsStakeAddressRegistrationsResponseBody403)
                                                                                                                                                                                                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetAccountsStakeAddressRegistrationsResponseBody404)
                                                                                                                                                                                                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetAccountsStakeAddressRegistrationsResponseBody418)
                                                                                                                                                                                                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetAccountsStakeAddressRegistrationsResponseBody429)
                                                                                                                                                                                                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetAccountsStakeAddressRegistrationsResponseBody500)
                                                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressRegistrationsParametersPathStakeAddress parameters))) GHC.Base.++ "/registrations"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/accounts\/{stake_address}\/registrations.GET.parameters@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRegistrationsParameters = GetAccountsStakeAddressRegistrationsParameters {
  -- | pathStake_address: Represents the parameter named \'stake_address\'
  -- 
  -- Bech32 stake address.
  getAccountsStakeAddressRegistrationsParametersPathStakeAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAccountsStakeAddressRegistrationsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAccountsStakeAddressRegistrationsParametersQueryOrder :: (GHC.Maybe.Maybe GetAccountsStakeAddressRegistrationsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAccountsStakeAddressRegistrationsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRegistrationsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsParametersPathStakeAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsParametersPathStakeAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRegistrationsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRegistrationsParameters" (\obj -> (((GHC.Base.pure GetAccountsStakeAddressRegistrationsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathStake_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAccountsStakeAddressRegistrationsParameters' with all required fields.
mkGetAccountsStakeAddressRegistrationsParameters :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsParametersPathStakeAddress'
  -> GetAccountsStakeAddressRegistrationsParameters
mkGetAccountsStakeAddressRegistrationsParameters getAccountsStakeAddressRegistrationsParametersPathStakeAddress = GetAccountsStakeAddressRegistrationsParameters{getAccountsStakeAddressRegistrationsParametersPathStakeAddress = getAccountsStakeAddressRegistrationsParametersPathStakeAddress,
                                                                                                                                                                 getAccountsStakeAddressRegistrationsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                                                 getAccountsStakeAddressRegistrationsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                                                 getAccountsStakeAddressRegistrationsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/accounts\/{stake_address}\/registrations.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAccountsStakeAddressRegistrationsParametersQueryOrder' =
   GetAccountsStakeAddressRegistrationsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAccountsStakeAddressRegistrationsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAccountsStakeAddressRegistrationsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAccountsStakeAddressRegistrationsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRegistrationsParametersQueryOrder'
    where toJSON (GetAccountsStakeAddressRegistrationsParametersQueryOrder'Other val) = val
          toJSON (GetAccountsStakeAddressRegistrationsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAccountsStakeAddressRegistrationsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAccountsStakeAddressRegistrationsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRegistrationsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAccountsStakeAddressRegistrationsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAccountsStakeAddressRegistrationsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAccountsStakeAddressRegistrationsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAccounts_StakeAddress_Registrations'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountsStakeAddressRegistrationsResponseError' is used.
data GetAccountsStakeAddressRegistrationsResponse =
   GetAccountsStakeAddressRegistrationsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountsStakeAddressRegistrationsResponse200 AccountRegistrationContents -- ^ Return the account registration content.
  | GetAccountsStakeAddressRegistrationsResponse400 GetAccountsStakeAddressRegistrationsResponseBody400 -- ^ Bad request
  | GetAccountsStakeAddressRegistrationsResponse403 GetAccountsStakeAddressRegistrationsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAccountsStakeAddressRegistrationsResponse404 GetAccountsStakeAddressRegistrationsResponseBody404 -- ^ Component not found
  | GetAccountsStakeAddressRegistrationsResponse418 GetAccountsStakeAddressRegistrationsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAccountsStakeAddressRegistrationsResponse429 GetAccountsStakeAddressRegistrationsResponseBody429 -- ^ Usage limit reached
  | GetAccountsStakeAddressRegistrationsResponse500 GetAccountsStakeAddressRegistrationsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRegistrationsResponseBody400 = GetAccountsStakeAddressRegistrationsResponseBody400 {
  -- | error
  getAccountsStakeAddressRegistrationsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRegistrationsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRegistrationsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRegistrationsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRegistrationsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRegistrationsResponseBody400" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRegistrationsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRegistrationsResponseBody400' with all required fields.
mkGetAccountsStakeAddressRegistrationsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRegistrationsResponseBody400StatusCode'
  -> GetAccountsStakeAddressRegistrationsResponseBody400
mkGetAccountsStakeAddressRegistrationsResponseBody400 getAccountsStakeAddressRegistrationsResponseBody400Error getAccountsStakeAddressRegistrationsResponseBody400Message getAccountsStakeAddressRegistrationsResponseBody400StatusCode = GetAccountsStakeAddressRegistrationsResponseBody400{getAccountsStakeAddressRegistrationsResponseBody400Error = getAccountsStakeAddressRegistrationsResponseBody400Error,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody400Message = getAccountsStakeAddressRegistrationsResponseBody400Message,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody400StatusCode = getAccountsStakeAddressRegistrationsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRegistrationsResponseBody403 = GetAccountsStakeAddressRegistrationsResponseBody403 {
  -- | error
  getAccountsStakeAddressRegistrationsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRegistrationsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRegistrationsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRegistrationsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRegistrationsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRegistrationsResponseBody403" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRegistrationsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRegistrationsResponseBody403' with all required fields.
mkGetAccountsStakeAddressRegistrationsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRegistrationsResponseBody403StatusCode'
  -> GetAccountsStakeAddressRegistrationsResponseBody403
mkGetAccountsStakeAddressRegistrationsResponseBody403 getAccountsStakeAddressRegistrationsResponseBody403Error getAccountsStakeAddressRegistrationsResponseBody403Message getAccountsStakeAddressRegistrationsResponseBody403StatusCode = GetAccountsStakeAddressRegistrationsResponseBody403{getAccountsStakeAddressRegistrationsResponseBody403Error = getAccountsStakeAddressRegistrationsResponseBody403Error,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody403Message = getAccountsStakeAddressRegistrationsResponseBody403Message,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody403StatusCode = getAccountsStakeAddressRegistrationsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRegistrationsResponseBody404 = GetAccountsStakeAddressRegistrationsResponseBody404 {
  -- | error
  getAccountsStakeAddressRegistrationsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRegistrationsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRegistrationsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRegistrationsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRegistrationsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRegistrationsResponseBody404" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRegistrationsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRegistrationsResponseBody404' with all required fields.
mkGetAccountsStakeAddressRegistrationsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRegistrationsResponseBody404StatusCode'
  -> GetAccountsStakeAddressRegistrationsResponseBody404
mkGetAccountsStakeAddressRegistrationsResponseBody404 getAccountsStakeAddressRegistrationsResponseBody404Error getAccountsStakeAddressRegistrationsResponseBody404Message getAccountsStakeAddressRegistrationsResponseBody404StatusCode = GetAccountsStakeAddressRegistrationsResponseBody404{getAccountsStakeAddressRegistrationsResponseBody404Error = getAccountsStakeAddressRegistrationsResponseBody404Error,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody404Message = getAccountsStakeAddressRegistrationsResponseBody404Message,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody404StatusCode = getAccountsStakeAddressRegistrationsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRegistrationsResponseBody418 = GetAccountsStakeAddressRegistrationsResponseBody418 {
  -- | error
  getAccountsStakeAddressRegistrationsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRegistrationsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRegistrationsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRegistrationsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRegistrationsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRegistrationsResponseBody418" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRegistrationsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRegistrationsResponseBody418' with all required fields.
mkGetAccountsStakeAddressRegistrationsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRegistrationsResponseBody418StatusCode'
  -> GetAccountsStakeAddressRegistrationsResponseBody418
mkGetAccountsStakeAddressRegistrationsResponseBody418 getAccountsStakeAddressRegistrationsResponseBody418Error getAccountsStakeAddressRegistrationsResponseBody418Message getAccountsStakeAddressRegistrationsResponseBody418StatusCode = GetAccountsStakeAddressRegistrationsResponseBody418{getAccountsStakeAddressRegistrationsResponseBody418Error = getAccountsStakeAddressRegistrationsResponseBody418Error,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody418Message = getAccountsStakeAddressRegistrationsResponseBody418Message,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody418StatusCode = getAccountsStakeAddressRegistrationsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRegistrationsResponseBody429 = GetAccountsStakeAddressRegistrationsResponseBody429 {
  -- | error
  getAccountsStakeAddressRegistrationsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRegistrationsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRegistrationsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRegistrationsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRegistrationsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRegistrationsResponseBody429" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRegistrationsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRegistrationsResponseBody429' with all required fields.
mkGetAccountsStakeAddressRegistrationsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRegistrationsResponseBody429StatusCode'
  -> GetAccountsStakeAddressRegistrationsResponseBody429
mkGetAccountsStakeAddressRegistrationsResponseBody429 getAccountsStakeAddressRegistrationsResponseBody429Error getAccountsStakeAddressRegistrationsResponseBody429Message getAccountsStakeAddressRegistrationsResponseBody429StatusCode = GetAccountsStakeAddressRegistrationsResponseBody429{getAccountsStakeAddressRegistrationsResponseBody429Error = getAccountsStakeAddressRegistrationsResponseBody429Error,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody429Message = getAccountsStakeAddressRegistrationsResponseBody429Message,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody429StatusCode = getAccountsStakeAddressRegistrationsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRegistrationsResponseBody500 = GetAccountsStakeAddressRegistrationsResponseBody500 {
  -- | error
  getAccountsStakeAddressRegistrationsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRegistrationsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRegistrationsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRegistrationsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRegistrationsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRegistrationsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRegistrationsResponseBody500" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRegistrationsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRegistrationsResponseBody500' with all required fields.
mkGetAccountsStakeAddressRegistrationsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRegistrationsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRegistrationsResponseBody500StatusCode'
  -> GetAccountsStakeAddressRegistrationsResponseBody500
mkGetAccountsStakeAddressRegistrationsResponseBody500 getAccountsStakeAddressRegistrationsResponseBody500Error getAccountsStakeAddressRegistrationsResponseBody500Message getAccountsStakeAddressRegistrationsResponseBody500StatusCode = GetAccountsStakeAddressRegistrationsResponseBody500{getAccountsStakeAddressRegistrationsResponseBody500Error = getAccountsStakeAddressRegistrationsResponseBody500Error,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody500Message = getAccountsStakeAddressRegistrationsResponseBody500Message,
                                                                                                                                                                                                                                                                                              getAccountsStakeAddressRegistrationsResponseBody500StatusCode = getAccountsStakeAddressRegistrationsResponseBody500StatusCode}
-- | > GET /accounts/{stake_address}/registrations
-- 
-- The same as 'getAccounts_StakeAddress_Registrations' but accepts an explicit configuration.
getAccounts_StakeAddress_RegistrationsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressRegistrationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressRegistrationsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_RegistrationsWithConfiguration config
                                                        parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressRegistrationsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AccountRegistrationContents)
                                                                                                                                                                                                                                    | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAccountsStakeAddressRegistrationsResponseBody400)
                                                                                                                                                                                                                                    | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAccountsStakeAddressRegistrationsResponseBody403)
                                                                                                                                                                                                                                    | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAccountsStakeAddressRegistrationsResponseBody404)
                                                                                                                                                                                                                                    | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAccountsStakeAddressRegistrationsResponseBody418)
                                                                                                                                                                                                                                    | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAccountsStakeAddressRegistrationsResponseBody429)
                                                                                                                                                                                                                                    | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRegistrationsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAccountsStakeAddressRegistrationsResponseBody500)
                                                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressRegistrationsParametersPathStakeAddress parameters))) GHC.Base.++ "/registrations"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/registrations
-- 
-- The same as 'getAccounts_StakeAddress_Registrations' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_RegistrationsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressRegistrationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_RegistrationsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressRegistrationsParametersPathStakeAddress parameters))) GHC.Base.++ "/registrations"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/registrations
-- 
-- The same as 'getAccounts_StakeAddress_Registrations' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_RegistrationsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressRegistrationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_RegistrationsWithConfigurationRaw config
                                                           parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressRegistrationsParametersPathStakeAddress parameters))) GHC.Base.++ "/registrations"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRegistrationsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
