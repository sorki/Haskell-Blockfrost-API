-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBlocks_HashOrNumber_Previous
module BlockfrostAPI.Operations.GetBlocksHashOrNumberPrevious where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /blocks/{hash_or_number}/previous
-- 
-- Return the list of blocks preceding a specific block.
getBlocks_HashOrNumber_Previous :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetBlocksHashOrNumberPreviousParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetBlocksHashOrNumberPreviousResponse) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_Previous parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBlocksHashOrNumberPreviousResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockContentArray)
                                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksHashOrNumberPreviousResponseBody400)
                                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksHashOrNumberPreviousResponseBody403)
                                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksHashOrNumberPreviousResponseBody404)
                                                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksHashOrNumberPreviousResponseBody418)
                                                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksHashOrNumberPreviousResponseBody429)
                                                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksHashOrNumberPreviousResponseBody500)
                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberPreviousParametersPathHashOrNumber parameters))) GHC.Base.++ "/previous"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberPreviousParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberPreviousParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/blocks\/{hash_or_number}\/previous.GET.parameters@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberPreviousParameters = GetBlocksHashOrNumberPreviousParameters {
  -- | pathHash_or_number: Represents the parameter named \'hash_or_number\'
  -- 
  -- Hash of the requested block
  getBlocksHashOrNumberPreviousParametersPathHashOrNumber :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getBlocksHashOrNumberPreviousParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getBlocksHashOrNumberPreviousParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberPreviousParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathHash_or_number" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousParametersPathHashOrNumber obj : "queryCount" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousParametersQueryCount obj : "queryPage" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathHash_or_number" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousParametersPathHashOrNumber obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousParametersQueryCount obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberPreviousParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberPreviousParameters" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberPreviousParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathHash_or_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetBlocksHashOrNumberPreviousParameters' with all required fields.
mkGetBlocksHashOrNumberPreviousParameters :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousParametersPathHashOrNumber'
  -> GetBlocksHashOrNumberPreviousParameters
mkGetBlocksHashOrNumberPreviousParameters getBlocksHashOrNumberPreviousParametersPathHashOrNumber = GetBlocksHashOrNumberPreviousParameters{getBlocksHashOrNumberPreviousParametersPathHashOrNumber = getBlocksHashOrNumberPreviousParametersPathHashOrNumber,
                                                                                                                                            getBlocksHashOrNumberPreviousParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                            getBlocksHashOrNumberPreviousParametersQueryPage = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getBlocks_HashOrNumber_Previous'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBlocksHashOrNumberPreviousResponseError' is used.
data GetBlocksHashOrNumberPreviousResponse =
   GetBlocksHashOrNumberPreviousResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBlocksHashOrNumberPreviousResponse200 BlockContentArray -- ^ Return the contents of the block
  | GetBlocksHashOrNumberPreviousResponse400 GetBlocksHashOrNumberPreviousResponseBody400 -- ^ Bad request
  | GetBlocksHashOrNumberPreviousResponse403 GetBlocksHashOrNumberPreviousResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetBlocksHashOrNumberPreviousResponse404 GetBlocksHashOrNumberPreviousResponseBody404 -- ^ Component not found
  | GetBlocksHashOrNumberPreviousResponse418 GetBlocksHashOrNumberPreviousResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetBlocksHashOrNumberPreviousResponse429 GetBlocksHashOrNumberPreviousResponseBody429 -- ^ Usage limit reached
  | GetBlocksHashOrNumberPreviousResponse500 GetBlocksHashOrNumberPreviousResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberPreviousResponseBody400 = GetBlocksHashOrNumberPreviousResponseBody400 {
  -- | error
  getBlocksHashOrNumberPreviousResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberPreviousResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberPreviousResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberPreviousResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberPreviousResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberPreviousResponseBody400" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberPreviousResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberPreviousResponseBody400' with all required fields.
mkGetBlocksHashOrNumberPreviousResponseBody400 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberPreviousResponseBody400StatusCode'
  -> GetBlocksHashOrNumberPreviousResponseBody400
mkGetBlocksHashOrNumberPreviousResponseBody400 getBlocksHashOrNumberPreviousResponseBody400Error getBlocksHashOrNumberPreviousResponseBody400Message getBlocksHashOrNumberPreviousResponseBody400StatusCode = GetBlocksHashOrNumberPreviousResponseBody400{getBlocksHashOrNumberPreviousResponseBody400Error = getBlocksHashOrNumberPreviousResponseBody400Error,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody400Message = getBlocksHashOrNumberPreviousResponseBody400Message,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody400StatusCode = getBlocksHashOrNumberPreviousResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberPreviousResponseBody403 = GetBlocksHashOrNumberPreviousResponseBody403 {
  -- | error
  getBlocksHashOrNumberPreviousResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberPreviousResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberPreviousResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberPreviousResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberPreviousResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberPreviousResponseBody403" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberPreviousResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberPreviousResponseBody403' with all required fields.
mkGetBlocksHashOrNumberPreviousResponseBody403 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberPreviousResponseBody403StatusCode'
  -> GetBlocksHashOrNumberPreviousResponseBody403
mkGetBlocksHashOrNumberPreviousResponseBody403 getBlocksHashOrNumberPreviousResponseBody403Error getBlocksHashOrNumberPreviousResponseBody403Message getBlocksHashOrNumberPreviousResponseBody403StatusCode = GetBlocksHashOrNumberPreviousResponseBody403{getBlocksHashOrNumberPreviousResponseBody403Error = getBlocksHashOrNumberPreviousResponseBody403Error,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody403Message = getBlocksHashOrNumberPreviousResponseBody403Message,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody403StatusCode = getBlocksHashOrNumberPreviousResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberPreviousResponseBody404 = GetBlocksHashOrNumberPreviousResponseBody404 {
  -- | error
  getBlocksHashOrNumberPreviousResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberPreviousResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberPreviousResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberPreviousResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberPreviousResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberPreviousResponseBody404" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberPreviousResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberPreviousResponseBody404' with all required fields.
mkGetBlocksHashOrNumberPreviousResponseBody404 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberPreviousResponseBody404StatusCode'
  -> GetBlocksHashOrNumberPreviousResponseBody404
mkGetBlocksHashOrNumberPreviousResponseBody404 getBlocksHashOrNumberPreviousResponseBody404Error getBlocksHashOrNumberPreviousResponseBody404Message getBlocksHashOrNumberPreviousResponseBody404StatusCode = GetBlocksHashOrNumberPreviousResponseBody404{getBlocksHashOrNumberPreviousResponseBody404Error = getBlocksHashOrNumberPreviousResponseBody404Error,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody404Message = getBlocksHashOrNumberPreviousResponseBody404Message,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody404StatusCode = getBlocksHashOrNumberPreviousResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberPreviousResponseBody418 = GetBlocksHashOrNumberPreviousResponseBody418 {
  -- | error
  getBlocksHashOrNumberPreviousResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberPreviousResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberPreviousResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberPreviousResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberPreviousResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberPreviousResponseBody418" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberPreviousResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberPreviousResponseBody418' with all required fields.
mkGetBlocksHashOrNumberPreviousResponseBody418 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberPreviousResponseBody418StatusCode'
  -> GetBlocksHashOrNumberPreviousResponseBody418
mkGetBlocksHashOrNumberPreviousResponseBody418 getBlocksHashOrNumberPreviousResponseBody418Error getBlocksHashOrNumberPreviousResponseBody418Message getBlocksHashOrNumberPreviousResponseBody418StatusCode = GetBlocksHashOrNumberPreviousResponseBody418{getBlocksHashOrNumberPreviousResponseBody418Error = getBlocksHashOrNumberPreviousResponseBody418Error,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody418Message = getBlocksHashOrNumberPreviousResponseBody418Message,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody418StatusCode = getBlocksHashOrNumberPreviousResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberPreviousResponseBody429 = GetBlocksHashOrNumberPreviousResponseBody429 {
  -- | error
  getBlocksHashOrNumberPreviousResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberPreviousResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberPreviousResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberPreviousResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberPreviousResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberPreviousResponseBody429" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberPreviousResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberPreviousResponseBody429' with all required fields.
mkGetBlocksHashOrNumberPreviousResponseBody429 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberPreviousResponseBody429StatusCode'
  -> GetBlocksHashOrNumberPreviousResponseBody429
mkGetBlocksHashOrNumberPreviousResponseBody429 getBlocksHashOrNumberPreviousResponseBody429Error getBlocksHashOrNumberPreviousResponseBody429Message getBlocksHashOrNumberPreviousResponseBody429StatusCode = GetBlocksHashOrNumberPreviousResponseBody429{getBlocksHashOrNumberPreviousResponseBody429Error = getBlocksHashOrNumberPreviousResponseBody429Error,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody429Message = getBlocksHashOrNumberPreviousResponseBody429Message,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody429StatusCode = getBlocksHashOrNumberPreviousResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberPreviousResponseBody500 = GetBlocksHashOrNumberPreviousResponseBody500 {
  -- | error
  getBlocksHashOrNumberPreviousResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberPreviousResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberPreviousResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberPreviousResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberPreviousResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberPreviousResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberPreviousResponseBody500" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberPreviousResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberPreviousResponseBody500' with all required fields.
mkGetBlocksHashOrNumberPreviousResponseBody500 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberPreviousResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberPreviousResponseBody500StatusCode'
  -> GetBlocksHashOrNumberPreviousResponseBody500
mkGetBlocksHashOrNumberPreviousResponseBody500 getBlocksHashOrNumberPreviousResponseBody500Error getBlocksHashOrNumberPreviousResponseBody500Message getBlocksHashOrNumberPreviousResponseBody500StatusCode = GetBlocksHashOrNumberPreviousResponseBody500{getBlocksHashOrNumberPreviousResponseBody500Error = getBlocksHashOrNumberPreviousResponseBody500Error,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody500Message = getBlocksHashOrNumberPreviousResponseBody500Message,
                                                                                                                                                                                                                                                           getBlocksHashOrNumberPreviousResponseBody500StatusCode = getBlocksHashOrNumberPreviousResponseBody500StatusCode}
-- | > GET /blocks/{hash_or_number}/previous
-- 
-- The same as 'getBlocks_HashOrNumber_Previous' but accepts an explicit configuration.
getBlocks_HashOrNumber_PreviousWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetBlocksHashOrNumberPreviousParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetBlocksHashOrNumberPreviousResponse) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_PreviousWithConfiguration config
                                                 parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetBlocksHashOrNumberPreviousResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   BlockContentArray)
                                                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksHashOrNumberPreviousResponseBody400)
                                                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksHashOrNumberPreviousResponseBody403)
                                                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksHashOrNumberPreviousResponseBody404)
                                                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksHashOrNumberPreviousResponseBody418)
                                                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksHashOrNumberPreviousResponseBody429)
                                                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberPreviousResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksHashOrNumberPreviousResponseBody500)
                                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberPreviousParametersPathHashOrNumber parameters))) GHC.Base.++ "/previous"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberPreviousParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberPreviousParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /blocks/{hash_or_number}/previous
-- 
-- The same as 'getBlocks_HashOrNumber_Previous' but returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocks_HashOrNumber_PreviousRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetBlocksHashOrNumberPreviousParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_PreviousRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberPreviousParametersPathHashOrNumber parameters))) GHC.Base.++ "/previous"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberPreviousParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberPreviousParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /blocks/{hash_or_number}/previous
-- 
-- The same as 'getBlocks_HashOrNumber_Previous' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocks_HashOrNumber_PreviousWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetBlocksHashOrNumberPreviousParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_PreviousWithConfigurationRaw config
                                                    parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberPreviousParametersPathHashOrNumber parameters))) GHC.Base.++ "/previous"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberPreviousParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberPreviousParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
