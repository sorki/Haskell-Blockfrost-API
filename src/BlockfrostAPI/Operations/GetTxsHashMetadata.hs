-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTxs_Hash_Metadata
module BlockfrostAPI.Operations.GetTxsHashMetadata where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /txs/{hash}/metadata
-- 
-- Obtain the transaction metadata.
getTxs_Hash_Metadata :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetTxsHashMetadataResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_Metadata hash = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTxsHashMetadataResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           TxContentMetadata)
                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           GetTxsHashMetadataResponseBody400)
                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           GetTxsHashMetadataResponseBody403)
                                                                                                                                                                         | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           GetTxsHashMetadataResponseBody404)
                                                                                                                                                                         | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           GetTxsHashMetadataResponseBody418)
                                                                                                                                                                         | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           GetTxsHashMetadataResponseBody429)
                                                                                                                                                                         | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           GetTxsHashMetadataResponseBody500)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/metadata"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getTxs_Hash_Metadata'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTxsHashMetadataResponseError' is used.
data GetTxsHashMetadataResponse =
   GetTxsHashMetadataResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTxsHashMetadataResponse200 TxContentMetadata -- ^ Obtain information about stake pool retirements within a specific transaction.
  | GetTxsHashMetadataResponse400 GetTxsHashMetadataResponseBody400 -- ^ Bad request
  | GetTxsHashMetadataResponse403 GetTxsHashMetadataResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetTxsHashMetadataResponse404 GetTxsHashMetadataResponseBody404 -- ^ Component not found
  | GetTxsHashMetadataResponse418 GetTxsHashMetadataResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetTxsHashMetadataResponse429 GetTxsHashMetadataResponseBody429 -- ^ Usage limit reached
  | GetTxsHashMetadataResponse500 GetTxsHashMetadataResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataResponseBody400 = GetTxsHashMetadataResponseBody400 {
  -- | error
  getTxsHashMetadataResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataResponseBody400" (\obj -> ((GHC.Base.pure GetTxsHashMetadataResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataResponseBody400' with all required fields.
mkGetTxsHashMetadataResponseBody400 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataResponseBody400StatusCode'
  -> GetTxsHashMetadataResponseBody400
mkGetTxsHashMetadataResponseBody400 getTxsHashMetadataResponseBody400Error getTxsHashMetadataResponseBody400Message getTxsHashMetadataResponseBody400StatusCode = GetTxsHashMetadataResponseBody400{getTxsHashMetadataResponseBody400Error = getTxsHashMetadataResponseBody400Error,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody400Message = getTxsHashMetadataResponseBody400Message,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody400StatusCode = getTxsHashMetadataResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataResponseBody403 = GetTxsHashMetadataResponseBody403 {
  -- | error
  getTxsHashMetadataResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataResponseBody403" (\obj -> ((GHC.Base.pure GetTxsHashMetadataResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataResponseBody403' with all required fields.
mkGetTxsHashMetadataResponseBody403 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataResponseBody403StatusCode'
  -> GetTxsHashMetadataResponseBody403
mkGetTxsHashMetadataResponseBody403 getTxsHashMetadataResponseBody403Error getTxsHashMetadataResponseBody403Message getTxsHashMetadataResponseBody403StatusCode = GetTxsHashMetadataResponseBody403{getTxsHashMetadataResponseBody403Error = getTxsHashMetadataResponseBody403Error,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody403Message = getTxsHashMetadataResponseBody403Message,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody403StatusCode = getTxsHashMetadataResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataResponseBody404 = GetTxsHashMetadataResponseBody404 {
  -- | error
  getTxsHashMetadataResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataResponseBody404" (\obj -> ((GHC.Base.pure GetTxsHashMetadataResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataResponseBody404' with all required fields.
mkGetTxsHashMetadataResponseBody404 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataResponseBody404StatusCode'
  -> GetTxsHashMetadataResponseBody404
mkGetTxsHashMetadataResponseBody404 getTxsHashMetadataResponseBody404Error getTxsHashMetadataResponseBody404Message getTxsHashMetadataResponseBody404StatusCode = GetTxsHashMetadataResponseBody404{getTxsHashMetadataResponseBody404Error = getTxsHashMetadataResponseBody404Error,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody404Message = getTxsHashMetadataResponseBody404Message,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody404StatusCode = getTxsHashMetadataResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataResponseBody418 = GetTxsHashMetadataResponseBody418 {
  -- | error
  getTxsHashMetadataResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataResponseBody418" (\obj -> ((GHC.Base.pure GetTxsHashMetadataResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataResponseBody418' with all required fields.
mkGetTxsHashMetadataResponseBody418 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataResponseBody418StatusCode'
  -> GetTxsHashMetadataResponseBody418
mkGetTxsHashMetadataResponseBody418 getTxsHashMetadataResponseBody418Error getTxsHashMetadataResponseBody418Message getTxsHashMetadataResponseBody418StatusCode = GetTxsHashMetadataResponseBody418{getTxsHashMetadataResponseBody418Error = getTxsHashMetadataResponseBody418Error,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody418Message = getTxsHashMetadataResponseBody418Message,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody418StatusCode = getTxsHashMetadataResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataResponseBody429 = GetTxsHashMetadataResponseBody429 {
  -- | error
  getTxsHashMetadataResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataResponseBody429" (\obj -> ((GHC.Base.pure GetTxsHashMetadataResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataResponseBody429' with all required fields.
mkGetTxsHashMetadataResponseBody429 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataResponseBody429StatusCode'
  -> GetTxsHashMetadataResponseBody429
mkGetTxsHashMetadataResponseBody429 getTxsHashMetadataResponseBody429Error getTxsHashMetadataResponseBody429Message getTxsHashMetadataResponseBody429StatusCode = GetTxsHashMetadataResponseBody429{getTxsHashMetadataResponseBody429Error = getTxsHashMetadataResponseBody429Error,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody429Message = getTxsHashMetadataResponseBody429Message,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody429StatusCode = getTxsHashMetadataResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataResponseBody500 = GetTxsHashMetadataResponseBody500 {
  -- | error
  getTxsHashMetadataResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataResponseBody500" (\obj -> ((GHC.Base.pure GetTxsHashMetadataResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataResponseBody500' with all required fields.
mkGetTxsHashMetadataResponseBody500 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataResponseBody500StatusCode'
  -> GetTxsHashMetadataResponseBody500
mkGetTxsHashMetadataResponseBody500 getTxsHashMetadataResponseBody500Error getTxsHashMetadataResponseBody500Message getTxsHashMetadataResponseBody500StatusCode = GetTxsHashMetadataResponseBody500{getTxsHashMetadataResponseBody500Error = getTxsHashMetadataResponseBody500Error,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody500Message = getTxsHashMetadataResponseBody500Message,
                                                                                                                                                                                                    getTxsHashMetadataResponseBody500StatusCode = getTxsHashMetadataResponseBody500StatusCode}
-- | > GET /txs/{hash}/metadata
-- 
-- The same as 'getTxs_Hash_Metadata' but accepts an explicit configuration.
getTxs_Hash_MetadataWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> m (Network.HTTP.Client.Types.Response GetTxsHashMetadataResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_MetadataWithConfiguration config
                                      hash = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetTxsHashMetadataResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            TxContentMetadata)
                                                                                                                                                                                          | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              GetTxsHashMetadataResponseBody400)
                                                                                                                                                                                          | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              GetTxsHashMetadataResponseBody403)
                                                                                                                                                                                          | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              GetTxsHashMetadataResponseBody404)
                                                                                                                                                                                          | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              GetTxsHashMetadataResponseBody418)
                                                                                                                                                                                          | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              GetTxsHashMetadataResponseBody429)
                                                                                                                                                                                          | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              GetTxsHashMetadataResponseBody500)
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/metadata"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/metadata
-- 
-- The same as 'getTxs_Hash_Metadata' but returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_MetadataRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_MetadataRaw hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/metadata"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/metadata
-- 
-- The same as 'getTxs_Hash_Metadata' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_MetadataWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_MetadataWithConfigurationRaw config
                                         hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/metadata"))) GHC.Base.mempty)
