-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getIpfsPinList_
module BlockfrostAPI.Operations.GetIpfsPinList_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /ipfs/pin/list/
-- 
-- List objects pinned to local storage
getIpfsPinList_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetIpfsPinListParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetIpfsPinListResponse) -- ^ Monadic computation which returns the result of the operation
getIpfsPinList_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetIpfsPinListResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    ([GetIpfsPinListResponseBody200]))
                                                                                                                                                                      | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetIpfsPinListResponseBody400)
                                                                                                                                                                      | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetIpfsPinListResponseBody403)
                                                                                                                                                                      | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetIpfsPinListResponseBody404)
                                                                                                                                                                      | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetIpfsPinListResponseBody418)
                                                                                                                                                                      | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetIpfsPinListResponseBody429)
                                                                                                                                                                      | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetIpfsPinListResponseBody500)
                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ipfs/pin/list/") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/ipfs\/pin\/list\/.GET.parameters@ in the specification.
-- 
-- 
data GetIpfsPinListParameters = GetIpfsPinListParameters {
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  getIpfsPinListParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getIpfsPinListParametersQueryOrder :: (GHC.Maybe.Maybe GetIpfsPinListParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getIpfsPinListParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryCount" Data.Aeson.Types.ToJSON..= getIpfsPinListParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getIpfsPinListParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getIpfsPinListParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryCount" Data.Aeson.Types.ToJSON..= getIpfsPinListParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getIpfsPinListParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getIpfsPinListParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListParameters" (\obj -> ((GHC.Base.pure GetIpfsPinListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetIpfsPinListParameters' with all required fields.
mkGetIpfsPinListParameters :: GetIpfsPinListParameters
mkGetIpfsPinListParameters = GetIpfsPinListParameters{getIpfsPinListParametersQueryCount = GHC.Maybe.Nothing,
                                                      getIpfsPinListParametersQueryOrder = GHC.Maybe.Nothing,
                                                      getIpfsPinListParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/ipfs\/pin\/list\/.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetIpfsPinListParametersQueryOrder' =
   GetIpfsPinListParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetIpfsPinListParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetIpfsPinListParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetIpfsPinListParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListParametersQueryOrder'
    where toJSON (GetIpfsPinListParametersQueryOrder'Other val) = val
          toJSON (GetIpfsPinListParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetIpfsPinListParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetIpfsPinListParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetIpfsPinListParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetIpfsPinListParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetIpfsPinListParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getIpfsPinList_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetIpfsPinListResponseError' is used.
data GetIpfsPinListResponse =
   GetIpfsPinListResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetIpfsPinListResponse200 ([GetIpfsPinListResponseBody200]) -- ^ Returns pinned objects
  | GetIpfsPinListResponse400 GetIpfsPinListResponseBody400 -- ^ Bad request
  | GetIpfsPinListResponse403 GetIpfsPinListResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetIpfsPinListResponse404 GetIpfsPinListResponseBody404 -- ^ Component not found
  | GetIpfsPinListResponse418 GetIpfsPinListResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetIpfsPinListResponse429 GetIpfsPinListResponseBody429 -- ^ Usage limit reached
  | GetIpfsPinListResponse500 GetIpfsPinListResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/ipfs\/pin\/list\/.GET.responses.200.content.application\/json.schema.items@ in the specification.
-- 
-- 
data GetIpfsPinListResponseBody200 = GetIpfsPinListResponseBody200 {
  -- | ipfs_hash: IPFS hash of the pinned object
  getIpfsPinListResponseBody200IpfsHash :: Data.Text.Internal.Text
  -- | size: Size of the object in Bytes
  , getIpfsPinListResponseBody200Size :: Data.Text.Internal.Text
  -- | time_created: Creation time of the IPFS object on our backends
  , getIpfsPinListResponseBody200TimeCreated :: GHC.Integer.Type.Integer
  -- | time_pinned: Pin time of the IPFS object on our backends
  , getIpfsPinListResponseBody200TimePinned :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ipfs_hash" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody200IpfsHash obj : "size" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody200Size obj : "time_created" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody200TimeCreated obj : "time_pinned" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody200TimePinned obj : "state" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "queued|pinned|unpinned|failed|gc" : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ipfs_hash" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody200IpfsHash obj) GHC.Base.<> (("size" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody200Size obj) GHC.Base.<> (("time_created" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody200TimeCreated obj) GHC.Base.<> (("time_pinned" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody200TimePinned obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "queued|pinned|unpinned|failed|gc")))))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListResponseBody200" (\obj -> (((GHC.Base.pure GetIpfsPinListResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipfs_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time_created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time_pinned"))
-- | Create a new 'GetIpfsPinListResponseBody200' with all required fields.
mkGetIpfsPinListResponseBody200 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody200IpfsHash'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody200Size'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListResponseBody200TimeCreated'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListResponseBody200TimePinned'
  -> GetIpfsPinListResponseBody200
mkGetIpfsPinListResponseBody200 getIpfsPinListResponseBody200IpfsHash getIpfsPinListResponseBody200Size getIpfsPinListResponseBody200TimeCreated getIpfsPinListResponseBody200TimePinned = GetIpfsPinListResponseBody200{getIpfsPinListResponseBody200IpfsHash = getIpfsPinListResponseBody200IpfsHash,
                                                                                                                                                                                                                         getIpfsPinListResponseBody200Size = getIpfsPinListResponseBody200Size,
                                                                                                                                                                                                                         getIpfsPinListResponseBody200TimeCreated = getIpfsPinListResponseBody200TimeCreated,
                                                                                                                                                                                                                         getIpfsPinListResponseBody200TimePinned = getIpfsPinListResponseBody200TimePinned}
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListResponseBody400 = GetIpfsPinListResponseBody400 {
  -- | error
  getIpfsPinListResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListResponseBody400" (\obj -> ((GHC.Base.pure GetIpfsPinListResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListResponseBody400' with all required fields.
mkGetIpfsPinListResponseBody400 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListResponseBody400StatusCode'
  -> GetIpfsPinListResponseBody400
mkGetIpfsPinListResponseBody400 getIpfsPinListResponseBody400Error getIpfsPinListResponseBody400Message getIpfsPinListResponseBody400StatusCode = GetIpfsPinListResponseBody400{getIpfsPinListResponseBody400Error = getIpfsPinListResponseBody400Error,
                                                                                                                                                                                getIpfsPinListResponseBody400Message = getIpfsPinListResponseBody400Message,
                                                                                                                                                                                getIpfsPinListResponseBody400StatusCode = getIpfsPinListResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListResponseBody403 = GetIpfsPinListResponseBody403 {
  -- | error
  getIpfsPinListResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListResponseBody403" (\obj -> ((GHC.Base.pure GetIpfsPinListResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListResponseBody403' with all required fields.
mkGetIpfsPinListResponseBody403 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListResponseBody403StatusCode'
  -> GetIpfsPinListResponseBody403
mkGetIpfsPinListResponseBody403 getIpfsPinListResponseBody403Error getIpfsPinListResponseBody403Message getIpfsPinListResponseBody403StatusCode = GetIpfsPinListResponseBody403{getIpfsPinListResponseBody403Error = getIpfsPinListResponseBody403Error,
                                                                                                                                                                                getIpfsPinListResponseBody403Message = getIpfsPinListResponseBody403Message,
                                                                                                                                                                                getIpfsPinListResponseBody403StatusCode = getIpfsPinListResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListResponseBody404 = GetIpfsPinListResponseBody404 {
  -- | error
  getIpfsPinListResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListResponseBody404" (\obj -> ((GHC.Base.pure GetIpfsPinListResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListResponseBody404' with all required fields.
mkGetIpfsPinListResponseBody404 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListResponseBody404StatusCode'
  -> GetIpfsPinListResponseBody404
mkGetIpfsPinListResponseBody404 getIpfsPinListResponseBody404Error getIpfsPinListResponseBody404Message getIpfsPinListResponseBody404StatusCode = GetIpfsPinListResponseBody404{getIpfsPinListResponseBody404Error = getIpfsPinListResponseBody404Error,
                                                                                                                                                                                getIpfsPinListResponseBody404Message = getIpfsPinListResponseBody404Message,
                                                                                                                                                                                getIpfsPinListResponseBody404StatusCode = getIpfsPinListResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListResponseBody418 = GetIpfsPinListResponseBody418 {
  -- | error
  getIpfsPinListResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListResponseBody418" (\obj -> ((GHC.Base.pure GetIpfsPinListResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListResponseBody418' with all required fields.
mkGetIpfsPinListResponseBody418 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListResponseBody418StatusCode'
  -> GetIpfsPinListResponseBody418
mkGetIpfsPinListResponseBody418 getIpfsPinListResponseBody418Error getIpfsPinListResponseBody418Message getIpfsPinListResponseBody418StatusCode = GetIpfsPinListResponseBody418{getIpfsPinListResponseBody418Error = getIpfsPinListResponseBody418Error,
                                                                                                                                                                                getIpfsPinListResponseBody418Message = getIpfsPinListResponseBody418Message,
                                                                                                                                                                                getIpfsPinListResponseBody418StatusCode = getIpfsPinListResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListResponseBody429 = GetIpfsPinListResponseBody429 {
  -- | error
  getIpfsPinListResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListResponseBody429" (\obj -> ((GHC.Base.pure GetIpfsPinListResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListResponseBody429' with all required fields.
mkGetIpfsPinListResponseBody429 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListResponseBody429StatusCode'
  -> GetIpfsPinListResponseBody429
mkGetIpfsPinListResponseBody429 getIpfsPinListResponseBody429Error getIpfsPinListResponseBody429Message getIpfsPinListResponseBody429StatusCode = GetIpfsPinListResponseBody429{getIpfsPinListResponseBody429Error = getIpfsPinListResponseBody429Error,
                                                                                                                                                                                getIpfsPinListResponseBody429Message = getIpfsPinListResponseBody429Message,
                                                                                                                                                                                getIpfsPinListResponseBody429StatusCode = getIpfsPinListResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListResponseBody500 = GetIpfsPinListResponseBody500 {
  -- | error
  getIpfsPinListResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListResponseBody500" (\obj -> ((GHC.Base.pure GetIpfsPinListResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListResponseBody500' with all required fields.
mkGetIpfsPinListResponseBody500 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListResponseBody500StatusCode'
  -> GetIpfsPinListResponseBody500
mkGetIpfsPinListResponseBody500 getIpfsPinListResponseBody500Error getIpfsPinListResponseBody500Message getIpfsPinListResponseBody500StatusCode = GetIpfsPinListResponseBody500{getIpfsPinListResponseBody500Error = getIpfsPinListResponseBody500Error,
                                                                                                                                                                                getIpfsPinListResponseBody500Message = getIpfsPinListResponseBody500Message,
                                                                                                                                                                                getIpfsPinListResponseBody500StatusCode = getIpfsPinListResponseBody500StatusCode}
-- | > GET /ipfs/pin/list/
-- 
-- The same as 'getIpfsPinList_' but accepts an explicit configuration.
getIpfsPinList_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetIpfsPinListParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetIpfsPinListResponse) -- ^ Monadic computation which returns the result of the operation
getIpfsPinList_WithConfiguration config
                                 parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetIpfsPinListResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     ([GetIpfsPinListResponseBody200]))
                                                                                                                                                                                       | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetIpfsPinListResponseBody400)
                                                                                                                                                                                       | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetIpfsPinListResponseBody403)
                                                                                                                                                                                       | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetIpfsPinListResponseBody404)
                                                                                                                                                                                       | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetIpfsPinListResponseBody418)
                                                                                                                                                                                       | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetIpfsPinListResponseBody429)
                                                                                                                                                                                       | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetIpfsPinListResponseBody500)
                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ipfs/pin/list/") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /ipfs/pin/list/
-- 
-- The same as 'getIpfsPinList_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getIpfsPinList_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetIpfsPinListParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getIpfsPinList_Raw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ipfs/pin/list/") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                             BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                             BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /ipfs/pin/list/
-- 
-- The same as 'getIpfsPinList_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getIpfsPinList_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetIpfsPinListParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getIpfsPinList_WithConfigurationRaw config
                                    parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ipfs/pin/list/") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIpfsPinListParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
