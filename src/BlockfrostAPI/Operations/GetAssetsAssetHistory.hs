-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAssets_Asset_History
module BlockfrostAPI.Operations.GetAssetsAssetHistory where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /assets/{asset}/history
-- 
-- History of a specific asset
getAssets_Asset_History :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsAssetHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAssetsAssetHistoryResponse) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_History parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAssetsAssetHistoryResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          AssetHistory)
                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAssetsAssetHistoryResponseBody400)
                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAssetsAssetHistoryResponseBody403)
                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAssetsAssetHistoryResponseBody404)
                                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAssetsAssetHistoryResponseBody418)
                                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAssetsAssetHistoryResponseBody429)
                                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetAssetsAssetHistoryResponseBody500)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetHistoryParametersPathAsset parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/assets\/{asset}\/history.GET.parameters@ in the specification.
-- 
-- 
data GetAssetsAssetHistoryParameters = GetAssetsAssetHistoryParameters {
  -- | pathAsset: Represents the parameter named \'asset\'
  -- 
  -- Concatenation of the policy_id and hex-encoded asset_name
  getAssetsAssetHistoryParametersPathAsset :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAssetsAssetHistoryParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAssetsAssetHistoryParametersQueryOrder :: (GHC.Maybe.Maybe GetAssetsAssetHistoryParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAssetsAssetHistoryParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetHistoryParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAsset" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryParametersPathAsset obj : "queryCount" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAsset" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryParametersPathAsset obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetHistoryParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetHistoryParameters" (\obj -> (((GHC.Base.pure GetAssetsAssetHistoryParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAssetsAssetHistoryParameters' with all required fields.
mkGetAssetsAssetHistoryParameters :: Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryParametersPathAsset'
  -> GetAssetsAssetHistoryParameters
mkGetAssetsAssetHistoryParameters getAssetsAssetHistoryParametersPathAsset = GetAssetsAssetHistoryParameters{getAssetsAssetHistoryParametersPathAsset = getAssetsAssetHistoryParametersPathAsset,
                                                                                                             getAssetsAssetHistoryParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                             getAssetsAssetHistoryParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                             getAssetsAssetHistoryParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/assets\/{asset}\/history.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAssetsAssetHistoryParametersQueryOrder' =
   GetAssetsAssetHistoryParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAssetsAssetHistoryParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAssetsAssetHistoryParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAssetsAssetHistoryParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetHistoryParametersQueryOrder'
    where toJSON (GetAssetsAssetHistoryParametersQueryOrder'Other val) = val
          toJSON (GetAssetsAssetHistoryParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAssetsAssetHistoryParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAssetsAssetHistoryParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetHistoryParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAssetsAssetHistoryParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAssetsAssetHistoryParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAssetsAssetHistoryParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAssets_Asset_History'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAssetsAssetHistoryResponseError' is used.
data GetAssetsAssetHistoryResponse =
   GetAssetsAssetHistoryResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAssetsAssetHistoryResponse200 AssetHistory -- ^ Return the information about the history of a specific asset
  | GetAssetsAssetHistoryResponse400 GetAssetsAssetHistoryResponseBody400 -- ^ Bad request
  | GetAssetsAssetHistoryResponse403 GetAssetsAssetHistoryResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAssetsAssetHistoryResponse404 GetAssetsAssetHistoryResponseBody404 -- ^ Component not found
  | GetAssetsAssetHistoryResponse418 GetAssetsAssetHistoryResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAssetsAssetHistoryResponse429 GetAssetsAssetHistoryResponseBody429 -- ^ Usage limit reached
  | GetAssetsAssetHistoryResponse500 GetAssetsAssetHistoryResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetHistoryResponseBody400 = GetAssetsAssetHistoryResponseBody400 {
  -- | error
  getAssetsAssetHistoryResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetHistoryResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetHistoryResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetHistoryResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetHistoryResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetHistoryResponseBody400" (\obj -> ((GHC.Base.pure GetAssetsAssetHistoryResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetHistoryResponseBody400' with all required fields.
mkGetAssetsAssetHistoryResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetHistoryResponseBody400StatusCode'
  -> GetAssetsAssetHistoryResponseBody400
mkGetAssetsAssetHistoryResponseBody400 getAssetsAssetHistoryResponseBody400Error getAssetsAssetHistoryResponseBody400Message getAssetsAssetHistoryResponseBody400StatusCode = GetAssetsAssetHistoryResponseBody400{getAssetsAssetHistoryResponseBody400Error = getAssetsAssetHistoryResponseBody400Error,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody400Message = getAssetsAssetHistoryResponseBody400Message,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody400StatusCode = getAssetsAssetHistoryResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetHistoryResponseBody403 = GetAssetsAssetHistoryResponseBody403 {
  -- | error
  getAssetsAssetHistoryResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetHistoryResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetHistoryResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetHistoryResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetHistoryResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetHistoryResponseBody403" (\obj -> ((GHC.Base.pure GetAssetsAssetHistoryResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetHistoryResponseBody403' with all required fields.
mkGetAssetsAssetHistoryResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetHistoryResponseBody403StatusCode'
  -> GetAssetsAssetHistoryResponseBody403
mkGetAssetsAssetHistoryResponseBody403 getAssetsAssetHistoryResponseBody403Error getAssetsAssetHistoryResponseBody403Message getAssetsAssetHistoryResponseBody403StatusCode = GetAssetsAssetHistoryResponseBody403{getAssetsAssetHistoryResponseBody403Error = getAssetsAssetHistoryResponseBody403Error,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody403Message = getAssetsAssetHistoryResponseBody403Message,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody403StatusCode = getAssetsAssetHistoryResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetHistoryResponseBody404 = GetAssetsAssetHistoryResponseBody404 {
  -- | error
  getAssetsAssetHistoryResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetHistoryResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetHistoryResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetHistoryResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetHistoryResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetHistoryResponseBody404" (\obj -> ((GHC.Base.pure GetAssetsAssetHistoryResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetHistoryResponseBody404' with all required fields.
mkGetAssetsAssetHistoryResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetHistoryResponseBody404StatusCode'
  -> GetAssetsAssetHistoryResponseBody404
mkGetAssetsAssetHistoryResponseBody404 getAssetsAssetHistoryResponseBody404Error getAssetsAssetHistoryResponseBody404Message getAssetsAssetHistoryResponseBody404StatusCode = GetAssetsAssetHistoryResponseBody404{getAssetsAssetHistoryResponseBody404Error = getAssetsAssetHistoryResponseBody404Error,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody404Message = getAssetsAssetHistoryResponseBody404Message,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody404StatusCode = getAssetsAssetHistoryResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetHistoryResponseBody418 = GetAssetsAssetHistoryResponseBody418 {
  -- | error
  getAssetsAssetHistoryResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetHistoryResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetHistoryResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetHistoryResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetHistoryResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetHistoryResponseBody418" (\obj -> ((GHC.Base.pure GetAssetsAssetHistoryResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetHistoryResponseBody418' with all required fields.
mkGetAssetsAssetHistoryResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetHistoryResponseBody418StatusCode'
  -> GetAssetsAssetHistoryResponseBody418
mkGetAssetsAssetHistoryResponseBody418 getAssetsAssetHistoryResponseBody418Error getAssetsAssetHistoryResponseBody418Message getAssetsAssetHistoryResponseBody418StatusCode = GetAssetsAssetHistoryResponseBody418{getAssetsAssetHistoryResponseBody418Error = getAssetsAssetHistoryResponseBody418Error,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody418Message = getAssetsAssetHistoryResponseBody418Message,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody418StatusCode = getAssetsAssetHistoryResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetHistoryResponseBody429 = GetAssetsAssetHistoryResponseBody429 {
  -- | error
  getAssetsAssetHistoryResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetHistoryResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetHistoryResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetHistoryResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetHistoryResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetHistoryResponseBody429" (\obj -> ((GHC.Base.pure GetAssetsAssetHistoryResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetHistoryResponseBody429' with all required fields.
mkGetAssetsAssetHistoryResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetHistoryResponseBody429StatusCode'
  -> GetAssetsAssetHistoryResponseBody429
mkGetAssetsAssetHistoryResponseBody429 getAssetsAssetHistoryResponseBody429Error getAssetsAssetHistoryResponseBody429Message getAssetsAssetHistoryResponseBody429StatusCode = GetAssetsAssetHistoryResponseBody429{getAssetsAssetHistoryResponseBody429Error = getAssetsAssetHistoryResponseBody429Error,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody429Message = getAssetsAssetHistoryResponseBody429Message,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody429StatusCode = getAssetsAssetHistoryResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetHistoryResponseBody500 = GetAssetsAssetHistoryResponseBody500 {
  -- | error
  getAssetsAssetHistoryResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetHistoryResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetHistoryResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetHistoryResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetHistoryResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetHistoryResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetHistoryResponseBody500" (\obj -> ((GHC.Base.pure GetAssetsAssetHistoryResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetHistoryResponseBody500' with all required fields.
mkGetAssetsAssetHistoryResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetHistoryResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetHistoryResponseBody500StatusCode'
  -> GetAssetsAssetHistoryResponseBody500
mkGetAssetsAssetHistoryResponseBody500 getAssetsAssetHistoryResponseBody500Error getAssetsAssetHistoryResponseBody500Message getAssetsAssetHistoryResponseBody500StatusCode = GetAssetsAssetHistoryResponseBody500{getAssetsAssetHistoryResponseBody500Error = getAssetsAssetHistoryResponseBody500Error,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody500Message = getAssetsAssetHistoryResponseBody500Message,
                                                                                                                                                                                                                   getAssetsAssetHistoryResponseBody500StatusCode = getAssetsAssetHistoryResponseBody500StatusCode}
-- | > GET /assets/{asset}/history
-- 
-- The same as 'getAssets_Asset_History' but accepts an explicit configuration.
getAssets_Asset_HistoryWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsAssetHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAssetsAssetHistoryResponse) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_HistoryWithConfiguration config
                                         parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAssetsAssetHistoryResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           AssetHistory)
                                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAssetsAssetHistoryResponseBody400)
                                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAssetsAssetHistoryResponseBody403)
                                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAssetsAssetHistoryResponseBody404)
                                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAssetsAssetHistoryResponseBody418)
                                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAssetsAssetHistoryResponseBody429)
                                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetHistoryResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAssetsAssetHistoryResponseBody500)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetHistoryParametersPathAsset parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets/{asset}/history
-- 
-- The same as 'getAssets_Asset_History' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAssets_Asset_HistoryRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsAssetHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_HistoryRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetHistoryParametersPathAsset parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets/{asset}/history
-- 
-- The same as 'getAssets_Asset_History' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAssets_Asset_HistoryWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsAssetHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_HistoryWithConfigurationRaw config
                                            parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetHistoryParametersPathAsset parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
