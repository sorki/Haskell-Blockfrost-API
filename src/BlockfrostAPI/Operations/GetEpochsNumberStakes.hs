-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getEpochs_Number_Stakes
module BlockfrostAPI.Operations.GetEpochsNumberStakes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /epochs/{number}/stakes
-- 
-- Return the active stake distribution for the epoch specified.
getEpochs_Number_Stakes :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberStakesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetEpochsNumberStakesResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Stakes parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberStakesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          EpochStakeContents)
                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberStakesResponseBody400)
                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberStakesResponseBody403)
                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberStakesResponseBody404)
                                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberStakesResponseBody418)
                                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberStakesResponseBody429)
                                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberStakesResponseBody500)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesParametersPathNumber parameters))) GHC.Base.++ "/stakes"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/epochs\/{number}\/stakes.GET.parameters@ in the specification.
-- 
-- 
data GetEpochsNumberStakesParameters = GetEpochsNumberStakesParameters {
  -- | pathNumber: Represents the parameter named \'number\'
  -- 
  -- Number of the epoch
  getEpochsNumberStakesParametersPathNumber :: GHC.Integer.Type.Integer
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getEpochsNumberStakesParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getEpochsNumberStakesParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesParametersPathNumber obj : "queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesParametersQueryCount obj : "queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesParametersPathNumber obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesParametersQueryCount obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesParameters" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNumber")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetEpochsNumberStakesParameters' with all required fields.
mkGetEpochsNumberStakesParameters :: GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesParametersPathNumber'
  -> GetEpochsNumberStakesParameters
mkGetEpochsNumberStakesParameters getEpochsNumberStakesParametersPathNumber = GetEpochsNumberStakesParameters{getEpochsNumberStakesParametersPathNumber = getEpochsNumberStakesParametersPathNumber,
                                                                                                              getEpochsNumberStakesParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                              getEpochsNumberStakesParametersQueryPage = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getEpochs_Number_Stakes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetEpochsNumberStakesResponseError' is used.
data GetEpochsNumberStakesResponse =
   GetEpochsNumberStakesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetEpochsNumberStakesResponse200 EpochStakeContents -- ^ Return the data about the epoch
  | GetEpochsNumberStakesResponse400 GetEpochsNumberStakesResponseBody400 -- ^ Bad request
  | GetEpochsNumberStakesResponse403 GetEpochsNumberStakesResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetEpochsNumberStakesResponse404 GetEpochsNumberStakesResponseBody404 -- ^ Component not found
  | GetEpochsNumberStakesResponse418 GetEpochsNumberStakesResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetEpochsNumberStakesResponse429 GetEpochsNumberStakesResponseBody429 -- ^ Usage limit reached
  | GetEpochsNumberStakesResponse500 GetEpochsNumberStakesResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesResponseBody400 = GetEpochsNumberStakesResponseBody400 {
  -- | error
  getEpochsNumberStakesResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesResponseBody400" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesResponseBody400' with all required fields.
mkGetEpochsNumberStakesResponseBody400 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesResponseBody400StatusCode'
  -> GetEpochsNumberStakesResponseBody400
mkGetEpochsNumberStakesResponseBody400 getEpochsNumberStakesResponseBody400Error getEpochsNumberStakesResponseBody400Message getEpochsNumberStakesResponseBody400StatusCode = GetEpochsNumberStakesResponseBody400{getEpochsNumberStakesResponseBody400Error = getEpochsNumberStakesResponseBody400Error,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody400Message = getEpochsNumberStakesResponseBody400Message,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody400StatusCode = getEpochsNumberStakesResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesResponseBody403 = GetEpochsNumberStakesResponseBody403 {
  -- | error
  getEpochsNumberStakesResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesResponseBody403" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesResponseBody403' with all required fields.
mkGetEpochsNumberStakesResponseBody403 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesResponseBody403StatusCode'
  -> GetEpochsNumberStakesResponseBody403
mkGetEpochsNumberStakesResponseBody403 getEpochsNumberStakesResponseBody403Error getEpochsNumberStakesResponseBody403Message getEpochsNumberStakesResponseBody403StatusCode = GetEpochsNumberStakesResponseBody403{getEpochsNumberStakesResponseBody403Error = getEpochsNumberStakesResponseBody403Error,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody403Message = getEpochsNumberStakesResponseBody403Message,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody403StatusCode = getEpochsNumberStakesResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesResponseBody404 = GetEpochsNumberStakesResponseBody404 {
  -- | error
  getEpochsNumberStakesResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesResponseBody404" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesResponseBody404' with all required fields.
mkGetEpochsNumberStakesResponseBody404 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesResponseBody404StatusCode'
  -> GetEpochsNumberStakesResponseBody404
mkGetEpochsNumberStakesResponseBody404 getEpochsNumberStakesResponseBody404Error getEpochsNumberStakesResponseBody404Message getEpochsNumberStakesResponseBody404StatusCode = GetEpochsNumberStakesResponseBody404{getEpochsNumberStakesResponseBody404Error = getEpochsNumberStakesResponseBody404Error,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody404Message = getEpochsNumberStakesResponseBody404Message,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody404StatusCode = getEpochsNumberStakesResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesResponseBody418 = GetEpochsNumberStakesResponseBody418 {
  -- | error
  getEpochsNumberStakesResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesResponseBody418" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesResponseBody418' with all required fields.
mkGetEpochsNumberStakesResponseBody418 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesResponseBody418StatusCode'
  -> GetEpochsNumberStakesResponseBody418
mkGetEpochsNumberStakesResponseBody418 getEpochsNumberStakesResponseBody418Error getEpochsNumberStakesResponseBody418Message getEpochsNumberStakesResponseBody418StatusCode = GetEpochsNumberStakesResponseBody418{getEpochsNumberStakesResponseBody418Error = getEpochsNumberStakesResponseBody418Error,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody418Message = getEpochsNumberStakesResponseBody418Message,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody418StatusCode = getEpochsNumberStakesResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesResponseBody429 = GetEpochsNumberStakesResponseBody429 {
  -- | error
  getEpochsNumberStakesResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesResponseBody429" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesResponseBody429' with all required fields.
mkGetEpochsNumberStakesResponseBody429 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesResponseBody429StatusCode'
  -> GetEpochsNumberStakesResponseBody429
mkGetEpochsNumberStakesResponseBody429 getEpochsNumberStakesResponseBody429Error getEpochsNumberStakesResponseBody429Message getEpochsNumberStakesResponseBody429StatusCode = GetEpochsNumberStakesResponseBody429{getEpochsNumberStakesResponseBody429Error = getEpochsNumberStakesResponseBody429Error,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody429Message = getEpochsNumberStakesResponseBody429Message,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody429StatusCode = getEpochsNumberStakesResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesResponseBody500 = GetEpochsNumberStakesResponseBody500 {
  -- | error
  getEpochsNumberStakesResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesResponseBody500" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesResponseBody500' with all required fields.
mkGetEpochsNumberStakesResponseBody500 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesResponseBody500StatusCode'
  -> GetEpochsNumberStakesResponseBody500
mkGetEpochsNumberStakesResponseBody500 getEpochsNumberStakesResponseBody500Error getEpochsNumberStakesResponseBody500Message getEpochsNumberStakesResponseBody500StatusCode = GetEpochsNumberStakesResponseBody500{getEpochsNumberStakesResponseBody500Error = getEpochsNumberStakesResponseBody500Error,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody500Message = getEpochsNumberStakesResponseBody500Message,
                                                                                                                                                                                                                   getEpochsNumberStakesResponseBody500StatusCode = getEpochsNumberStakesResponseBody500StatusCode}
-- | > GET /epochs/{number}/stakes
-- 
-- The same as 'getEpochs_Number_Stakes' but accepts an explicit configuration.
getEpochs_Number_StakesWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberStakesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetEpochsNumberStakesResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_StakesWithConfiguration config
                                         parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberStakesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           EpochStakeContents)
                                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberStakesResponseBody400)
                                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberStakesResponseBody403)
                                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberStakesResponseBody404)
                                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberStakesResponseBody418)
                                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberStakesResponseBody429)
                                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberStakesResponseBody500)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesParametersPathNumber parameters))) GHC.Base.++ "/stakes"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/stakes
-- 
-- The same as 'getEpochs_Number_Stakes' but returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_StakesRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberStakesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_StakesRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesParametersPathNumber parameters))) GHC.Base.++ "/stakes"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/stakes
-- 
-- The same as 'getEpochs_Number_Stakes' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_StakesWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberStakesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_StakesWithConfigurationRaw config
                                            parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesParametersPathNumber parameters))) GHC.Base.++ "/stakes"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
