-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAssetsPolicy_PolicyId_
module BlockfrostAPI.Operations.GetAssetsPolicyPolicyId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /assets/policy/{policy_id}
-- 
-- List of asset minted under a specific policy
getAssetsPolicy_PolicyId_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsPolicyPolicyIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAssetsPolicyPolicyIdResponse) -- ^ Monadic computation which returns the result of the operation
getAssetsPolicy_PolicyId_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAssetsPolicyPolicyIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                AssetPolicies)
                                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsPolicyPolicyIdResponseBody400)
                                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsPolicyPolicyIdResponseBody403)
                                                                                                                                                                                         | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsPolicyPolicyIdResponseBody404)
                                                                                                                                                                                         | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsPolicyPolicyIdResponseBody418)
                                                                                                                                                                                         | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsPolicyPolicyIdResponseBody429)
                                                                                                                                                                                         | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsPolicyPolicyIdResponseBody500)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/policy/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsPolicyPolicyIdParametersPathPolicyId parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/assets\/policy\/{policy_id}.GET.parameters@ in the specification.
-- 
-- 
data GetAssetsPolicyPolicyIdParameters = GetAssetsPolicyPolicyIdParameters {
  -- | pathPolicy_id: Represents the parameter named \'policy_id\'
  -- 
  -- Specific policy_id
  getAssetsPolicyPolicyIdParametersPathPolicyId :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAssetsPolicyPolicyIdParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAssetsPolicyPolicyIdParametersQueryOrder :: (GHC.Maybe.Maybe GetAssetsPolicyPolicyIdParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAssetsPolicyPolicyIdParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsPolicyPolicyIdParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathPolicy_id" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdParametersPathPolicyId obj : "queryCount" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathPolicy_id" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdParametersPathPolicyId obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsPolicyPolicyIdParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsPolicyPolicyIdParameters" (\obj -> (((GHC.Base.pure GetAssetsPolicyPolicyIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathPolicy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAssetsPolicyPolicyIdParameters' with all required fields.
mkGetAssetsPolicyPolicyIdParameters :: Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdParametersPathPolicyId'
  -> GetAssetsPolicyPolicyIdParameters
mkGetAssetsPolicyPolicyIdParameters getAssetsPolicyPolicyIdParametersPathPolicyId = GetAssetsPolicyPolicyIdParameters{getAssetsPolicyPolicyIdParametersPathPolicyId = getAssetsPolicyPolicyIdParametersPathPolicyId,
                                                                                                                      getAssetsPolicyPolicyIdParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                      getAssetsPolicyPolicyIdParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                      getAssetsPolicyPolicyIdParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/assets\/policy\/{policy_id}.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAssetsPolicyPolicyIdParametersQueryOrder' =
   GetAssetsPolicyPolicyIdParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAssetsPolicyPolicyIdParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAssetsPolicyPolicyIdParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAssetsPolicyPolicyIdParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsPolicyPolicyIdParametersQueryOrder'
    where toJSON (GetAssetsPolicyPolicyIdParametersQueryOrder'Other val) = val
          toJSON (GetAssetsPolicyPolicyIdParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAssetsPolicyPolicyIdParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAssetsPolicyPolicyIdParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsPolicyPolicyIdParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAssetsPolicyPolicyIdParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAssetsPolicyPolicyIdParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAssetsPolicyPolicyIdParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAssetsPolicy_PolicyId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAssetsPolicyPolicyIdResponseError' is used.
data GetAssetsPolicyPolicyIdResponse =
   GetAssetsPolicyPolicyIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAssetsPolicyPolicyIdResponse200 AssetPolicies -- ^ Return the information about a specific asset
  | GetAssetsPolicyPolicyIdResponse400 GetAssetsPolicyPolicyIdResponseBody400 -- ^ Bad request
  | GetAssetsPolicyPolicyIdResponse403 GetAssetsPolicyPolicyIdResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAssetsPolicyPolicyIdResponse404 GetAssetsPolicyPolicyIdResponseBody404 -- ^ Component not found
  | GetAssetsPolicyPolicyIdResponse418 GetAssetsPolicyPolicyIdResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAssetsPolicyPolicyIdResponse429 GetAssetsPolicyPolicyIdResponseBody429 -- ^ Usage limit reached
  | GetAssetsPolicyPolicyIdResponse500 GetAssetsPolicyPolicyIdResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsPolicyPolicyIdResponseBody400 = GetAssetsPolicyPolicyIdResponseBody400 {
  -- | error
  getAssetsPolicyPolicyIdResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsPolicyPolicyIdResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsPolicyPolicyIdResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsPolicyPolicyIdResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsPolicyPolicyIdResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsPolicyPolicyIdResponseBody400" (\obj -> ((GHC.Base.pure GetAssetsPolicyPolicyIdResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsPolicyPolicyIdResponseBody400' with all required fields.
mkGetAssetsPolicyPolicyIdResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsPolicyPolicyIdResponseBody400StatusCode'
  -> GetAssetsPolicyPolicyIdResponseBody400
mkGetAssetsPolicyPolicyIdResponseBody400 getAssetsPolicyPolicyIdResponseBody400Error getAssetsPolicyPolicyIdResponseBody400Message getAssetsPolicyPolicyIdResponseBody400StatusCode = GetAssetsPolicyPolicyIdResponseBody400{getAssetsPolicyPolicyIdResponseBody400Error = getAssetsPolicyPolicyIdResponseBody400Error,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody400Message = getAssetsPolicyPolicyIdResponseBody400Message,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody400StatusCode = getAssetsPolicyPolicyIdResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsPolicyPolicyIdResponseBody403 = GetAssetsPolicyPolicyIdResponseBody403 {
  -- | error
  getAssetsPolicyPolicyIdResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsPolicyPolicyIdResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsPolicyPolicyIdResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsPolicyPolicyIdResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsPolicyPolicyIdResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsPolicyPolicyIdResponseBody403" (\obj -> ((GHC.Base.pure GetAssetsPolicyPolicyIdResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsPolicyPolicyIdResponseBody403' with all required fields.
mkGetAssetsPolicyPolicyIdResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsPolicyPolicyIdResponseBody403StatusCode'
  -> GetAssetsPolicyPolicyIdResponseBody403
mkGetAssetsPolicyPolicyIdResponseBody403 getAssetsPolicyPolicyIdResponseBody403Error getAssetsPolicyPolicyIdResponseBody403Message getAssetsPolicyPolicyIdResponseBody403StatusCode = GetAssetsPolicyPolicyIdResponseBody403{getAssetsPolicyPolicyIdResponseBody403Error = getAssetsPolicyPolicyIdResponseBody403Error,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody403Message = getAssetsPolicyPolicyIdResponseBody403Message,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody403StatusCode = getAssetsPolicyPolicyIdResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsPolicyPolicyIdResponseBody404 = GetAssetsPolicyPolicyIdResponseBody404 {
  -- | error
  getAssetsPolicyPolicyIdResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsPolicyPolicyIdResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsPolicyPolicyIdResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsPolicyPolicyIdResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsPolicyPolicyIdResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsPolicyPolicyIdResponseBody404" (\obj -> ((GHC.Base.pure GetAssetsPolicyPolicyIdResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsPolicyPolicyIdResponseBody404' with all required fields.
mkGetAssetsPolicyPolicyIdResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsPolicyPolicyIdResponseBody404StatusCode'
  -> GetAssetsPolicyPolicyIdResponseBody404
mkGetAssetsPolicyPolicyIdResponseBody404 getAssetsPolicyPolicyIdResponseBody404Error getAssetsPolicyPolicyIdResponseBody404Message getAssetsPolicyPolicyIdResponseBody404StatusCode = GetAssetsPolicyPolicyIdResponseBody404{getAssetsPolicyPolicyIdResponseBody404Error = getAssetsPolicyPolicyIdResponseBody404Error,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody404Message = getAssetsPolicyPolicyIdResponseBody404Message,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody404StatusCode = getAssetsPolicyPolicyIdResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsPolicyPolicyIdResponseBody418 = GetAssetsPolicyPolicyIdResponseBody418 {
  -- | error
  getAssetsPolicyPolicyIdResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsPolicyPolicyIdResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsPolicyPolicyIdResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsPolicyPolicyIdResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsPolicyPolicyIdResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsPolicyPolicyIdResponseBody418" (\obj -> ((GHC.Base.pure GetAssetsPolicyPolicyIdResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsPolicyPolicyIdResponseBody418' with all required fields.
mkGetAssetsPolicyPolicyIdResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsPolicyPolicyIdResponseBody418StatusCode'
  -> GetAssetsPolicyPolicyIdResponseBody418
mkGetAssetsPolicyPolicyIdResponseBody418 getAssetsPolicyPolicyIdResponseBody418Error getAssetsPolicyPolicyIdResponseBody418Message getAssetsPolicyPolicyIdResponseBody418StatusCode = GetAssetsPolicyPolicyIdResponseBody418{getAssetsPolicyPolicyIdResponseBody418Error = getAssetsPolicyPolicyIdResponseBody418Error,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody418Message = getAssetsPolicyPolicyIdResponseBody418Message,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody418StatusCode = getAssetsPolicyPolicyIdResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsPolicyPolicyIdResponseBody429 = GetAssetsPolicyPolicyIdResponseBody429 {
  -- | error
  getAssetsPolicyPolicyIdResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsPolicyPolicyIdResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsPolicyPolicyIdResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsPolicyPolicyIdResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsPolicyPolicyIdResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsPolicyPolicyIdResponseBody429" (\obj -> ((GHC.Base.pure GetAssetsPolicyPolicyIdResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsPolicyPolicyIdResponseBody429' with all required fields.
mkGetAssetsPolicyPolicyIdResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsPolicyPolicyIdResponseBody429StatusCode'
  -> GetAssetsPolicyPolicyIdResponseBody429
mkGetAssetsPolicyPolicyIdResponseBody429 getAssetsPolicyPolicyIdResponseBody429Error getAssetsPolicyPolicyIdResponseBody429Message getAssetsPolicyPolicyIdResponseBody429StatusCode = GetAssetsPolicyPolicyIdResponseBody429{getAssetsPolicyPolicyIdResponseBody429Error = getAssetsPolicyPolicyIdResponseBody429Error,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody429Message = getAssetsPolicyPolicyIdResponseBody429Message,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody429StatusCode = getAssetsPolicyPolicyIdResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsPolicyPolicyIdResponseBody500 = GetAssetsPolicyPolicyIdResponseBody500 {
  -- | error
  getAssetsPolicyPolicyIdResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsPolicyPolicyIdResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsPolicyPolicyIdResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsPolicyPolicyIdResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsPolicyPolicyIdResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsPolicyPolicyIdResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsPolicyPolicyIdResponseBody500" (\obj -> ((GHC.Base.pure GetAssetsPolicyPolicyIdResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsPolicyPolicyIdResponseBody500' with all required fields.
mkGetAssetsPolicyPolicyIdResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsPolicyPolicyIdResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsPolicyPolicyIdResponseBody500StatusCode'
  -> GetAssetsPolicyPolicyIdResponseBody500
mkGetAssetsPolicyPolicyIdResponseBody500 getAssetsPolicyPolicyIdResponseBody500Error getAssetsPolicyPolicyIdResponseBody500Message getAssetsPolicyPolicyIdResponseBody500StatusCode = GetAssetsPolicyPolicyIdResponseBody500{getAssetsPolicyPolicyIdResponseBody500Error = getAssetsPolicyPolicyIdResponseBody500Error,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody500Message = getAssetsPolicyPolicyIdResponseBody500Message,
                                                                                                                                                                                                                             getAssetsPolicyPolicyIdResponseBody500StatusCode = getAssetsPolicyPolicyIdResponseBody500StatusCode}
-- | > GET /assets/policy/{policy_id}
-- 
-- The same as 'getAssetsPolicy_PolicyId_' but accepts an explicit configuration.
getAssetsPolicy_PolicyId_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsPolicyPolicyIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAssetsPolicyPolicyIdResponse) -- ^ Monadic computation which returns the result of the operation
getAssetsPolicy_PolicyId_WithConfiguration config
                                           parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAssetsPolicyPolicyIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AssetPolicies)
                                                                                                                                                                                                          | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsPolicyPolicyIdResponseBody400)
                                                                                                                                                                                                          | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsPolicyPolicyIdResponseBody403)
                                                                                                                                                                                                          | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsPolicyPolicyIdResponseBody404)
                                                                                                                                                                                                          | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsPolicyPolicyIdResponseBody418)
                                                                                                                                                                                                          | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsPolicyPolicyIdResponseBody429)
                                                                                                                                                                                                          | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsPolicyPolicyIdResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsPolicyPolicyIdResponseBody500)
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/policy/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsPolicyPolicyIdParametersPathPolicyId parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets/policy/{policy_id}
-- 
-- The same as 'getAssetsPolicy_PolicyId_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAssetsPolicy_PolicyId_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsPolicyPolicyIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssetsPolicy_PolicyId_Raw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/policy/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsPolicyPolicyIdParametersPathPolicyId parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets/policy/{policy_id}
-- 
-- The same as 'getAssetsPolicy_PolicyId_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAssetsPolicy_PolicyId_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsPolicyPolicyIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssetsPolicy_PolicyId_WithConfigurationRaw config
                                              parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/policy/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsPolicyPolicyIdParametersPathPolicyId parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsPolicyPolicyIdParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
