-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAddresses_Address_Total
module BlockfrostAPI.Operations.GetAddressesAddressTotal where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /addresses/{address}/total
-- 
-- Obtain details about an address.
getAddresses_Address_Total :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ address: Bech32 address.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAddressesAddressTotalResponse) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_Total address = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAddressesAddressTotalResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                AddressContentTotal)
                                                                                                                                                                                        | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTotalResponseBody400)
                                                                                                                                                                                        | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTotalResponseBody403)
                                                                                                                                                                                        | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTotalResponseBody404)
                                                                                                                                                                                        | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTotalResponseBody418)
                                                                                                                                                                                        | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTotalResponseBody429)
                                                                                                                                                                                        | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTotalResponseBody500)
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel address)) GHC.Base.++ "/total"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getAddresses_Address_Total'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAddressesAddressTotalResponseError' is used.
data GetAddressesAddressTotalResponse =
   GetAddressesAddressTotalResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAddressesAddressTotalResponse200 AddressContentTotal -- ^ Return the Address details.
  | GetAddressesAddressTotalResponse400 GetAddressesAddressTotalResponseBody400 -- ^ Bad request
  | GetAddressesAddressTotalResponse403 GetAddressesAddressTotalResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAddressesAddressTotalResponse404 GetAddressesAddressTotalResponseBody404 -- ^ Component not found
  | GetAddressesAddressTotalResponse418 GetAddressesAddressTotalResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAddressesAddressTotalResponse429 GetAddressesAddressTotalResponseBody429 -- ^ Usage limit reached
  | GetAddressesAddressTotalResponse500 GetAddressesAddressTotalResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTotalResponseBody400 = GetAddressesAddressTotalResponseBody400 {
  -- | error
  getAddressesAddressTotalResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTotalResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTotalResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTotalResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTotalResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTotalResponseBody400" (\obj -> ((GHC.Base.pure GetAddressesAddressTotalResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTotalResponseBody400' with all required fields.
mkGetAddressesAddressTotalResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTotalResponseBody400StatusCode'
  -> GetAddressesAddressTotalResponseBody400
mkGetAddressesAddressTotalResponseBody400 getAddressesAddressTotalResponseBody400Error getAddressesAddressTotalResponseBody400Message getAddressesAddressTotalResponseBody400StatusCode = GetAddressesAddressTotalResponseBody400{getAddressesAddressTotalResponseBody400Error = getAddressesAddressTotalResponseBody400Error,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody400Message = getAddressesAddressTotalResponseBody400Message,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody400StatusCode = getAddressesAddressTotalResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTotalResponseBody403 = GetAddressesAddressTotalResponseBody403 {
  -- | error
  getAddressesAddressTotalResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTotalResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTotalResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTotalResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTotalResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTotalResponseBody403" (\obj -> ((GHC.Base.pure GetAddressesAddressTotalResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTotalResponseBody403' with all required fields.
mkGetAddressesAddressTotalResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTotalResponseBody403StatusCode'
  -> GetAddressesAddressTotalResponseBody403
mkGetAddressesAddressTotalResponseBody403 getAddressesAddressTotalResponseBody403Error getAddressesAddressTotalResponseBody403Message getAddressesAddressTotalResponseBody403StatusCode = GetAddressesAddressTotalResponseBody403{getAddressesAddressTotalResponseBody403Error = getAddressesAddressTotalResponseBody403Error,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody403Message = getAddressesAddressTotalResponseBody403Message,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody403StatusCode = getAddressesAddressTotalResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTotalResponseBody404 = GetAddressesAddressTotalResponseBody404 {
  -- | error
  getAddressesAddressTotalResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTotalResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTotalResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTotalResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTotalResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTotalResponseBody404" (\obj -> ((GHC.Base.pure GetAddressesAddressTotalResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTotalResponseBody404' with all required fields.
mkGetAddressesAddressTotalResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTotalResponseBody404StatusCode'
  -> GetAddressesAddressTotalResponseBody404
mkGetAddressesAddressTotalResponseBody404 getAddressesAddressTotalResponseBody404Error getAddressesAddressTotalResponseBody404Message getAddressesAddressTotalResponseBody404StatusCode = GetAddressesAddressTotalResponseBody404{getAddressesAddressTotalResponseBody404Error = getAddressesAddressTotalResponseBody404Error,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody404Message = getAddressesAddressTotalResponseBody404Message,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody404StatusCode = getAddressesAddressTotalResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTotalResponseBody418 = GetAddressesAddressTotalResponseBody418 {
  -- | error
  getAddressesAddressTotalResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTotalResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTotalResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTotalResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTotalResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTotalResponseBody418" (\obj -> ((GHC.Base.pure GetAddressesAddressTotalResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTotalResponseBody418' with all required fields.
mkGetAddressesAddressTotalResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTotalResponseBody418StatusCode'
  -> GetAddressesAddressTotalResponseBody418
mkGetAddressesAddressTotalResponseBody418 getAddressesAddressTotalResponseBody418Error getAddressesAddressTotalResponseBody418Message getAddressesAddressTotalResponseBody418StatusCode = GetAddressesAddressTotalResponseBody418{getAddressesAddressTotalResponseBody418Error = getAddressesAddressTotalResponseBody418Error,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody418Message = getAddressesAddressTotalResponseBody418Message,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody418StatusCode = getAddressesAddressTotalResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTotalResponseBody429 = GetAddressesAddressTotalResponseBody429 {
  -- | error
  getAddressesAddressTotalResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTotalResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTotalResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTotalResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTotalResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTotalResponseBody429" (\obj -> ((GHC.Base.pure GetAddressesAddressTotalResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTotalResponseBody429' with all required fields.
mkGetAddressesAddressTotalResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTotalResponseBody429StatusCode'
  -> GetAddressesAddressTotalResponseBody429
mkGetAddressesAddressTotalResponseBody429 getAddressesAddressTotalResponseBody429Error getAddressesAddressTotalResponseBody429Message getAddressesAddressTotalResponseBody429StatusCode = GetAddressesAddressTotalResponseBody429{getAddressesAddressTotalResponseBody429Error = getAddressesAddressTotalResponseBody429Error,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody429Message = getAddressesAddressTotalResponseBody429Message,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody429StatusCode = getAddressesAddressTotalResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTotalResponseBody500 = GetAddressesAddressTotalResponseBody500 {
  -- | error
  getAddressesAddressTotalResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTotalResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTotalResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTotalResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTotalResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTotalResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTotalResponseBody500" (\obj -> ((GHC.Base.pure GetAddressesAddressTotalResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTotalResponseBody500' with all required fields.
mkGetAddressesAddressTotalResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTotalResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTotalResponseBody500StatusCode'
  -> GetAddressesAddressTotalResponseBody500
mkGetAddressesAddressTotalResponseBody500 getAddressesAddressTotalResponseBody500Error getAddressesAddressTotalResponseBody500Message getAddressesAddressTotalResponseBody500StatusCode = GetAddressesAddressTotalResponseBody500{getAddressesAddressTotalResponseBody500Error = getAddressesAddressTotalResponseBody500Error,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody500Message = getAddressesAddressTotalResponseBody500Message,
                                                                                                                                                                                                                                  getAddressesAddressTotalResponseBody500StatusCode = getAddressesAddressTotalResponseBody500StatusCode}
-- | > GET /addresses/{address}/total
-- 
-- The same as 'getAddresses_Address_Total' but accepts an explicit configuration.
getAddresses_Address_TotalWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ address: Bech32 address.
  -> m (Network.HTTP.Client.Types.Response GetAddressesAddressTotalResponse) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_TotalWithConfiguration config
                                            address = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAddressesAddressTotalResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AddressContentTotal)
                                                                                                                                                                                                         | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressTotalResponseBody400)
                                                                                                                                                                                                         | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressTotalResponseBody403)
                                                                                                                                                                                                         | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressTotalResponseBody404)
                                                                                                                                                                                                         | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressTotalResponseBody418)
                                                                                                                                                                                                         | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressTotalResponseBody429)
                                                                                                                                                                                                         | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTotalResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressTotalResponseBody500)
                                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel address)) GHC.Base.++ "/total"))) GHC.Base.mempty)
-- | > GET /addresses/{address}/total
-- 
-- The same as 'getAddresses_Address_Total' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAddresses_Address_TotalRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ address: Bech32 address.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_TotalRaw address = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel address)) GHC.Base.++ "/total"))) GHC.Base.mempty)
-- | > GET /addresses/{address}/total
-- 
-- The same as 'getAddresses_Address_Total' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAddresses_Address_TotalWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ address: Bech32 address.
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_TotalWithConfigurationRaw config
                                               address = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel address)) GHC.Base.++ "/total"))) GHC.Base.mempty)
