-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAssets_Asset_
module BlockfrostAPI.Operations.GetAssetsAsset_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /assets/{asset}
-- 
-- Information about a specific asset
getAssets_Asset_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ asset: Concatenation of the policy_id and hex-encoded asset_name
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAssetsAssetResponse) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_ asset = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAssetsAssetResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                Asset)
                                                                                                                                                                  | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetResponseBody400)
                                                                                                                                                                  | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetResponseBody403)
                                                                                                                                                                  | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetResponseBody404)
                                                                                                                                                                  | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetResponseBody418)
                                                                                                                                                                  | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetResponseBody429)
                                                                                                                                                                  | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetResponseBody500)
                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel asset)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getAssets_Asset_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAssetsAssetResponseError' is used.
data GetAssetsAssetResponse =
   GetAssetsAssetResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAssetsAssetResponse200 Asset -- ^ Return the information about a specific asset
  | GetAssetsAssetResponse400 GetAssetsAssetResponseBody400 -- ^ Bad request
  | GetAssetsAssetResponse403 GetAssetsAssetResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAssetsAssetResponse404 GetAssetsAssetResponseBody404 -- ^ Component not found
  | GetAssetsAssetResponse418 GetAssetsAssetResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAssetsAssetResponse429 GetAssetsAssetResponseBody429 -- ^ Usage limit reached
  | GetAssetsAssetResponse500 GetAssetsAssetResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetResponseBody400 = GetAssetsAssetResponseBody400 {
  -- | error
  getAssetsAssetResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetResponseBody400" (\obj -> ((GHC.Base.pure GetAssetsAssetResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetResponseBody400' with all required fields.
mkGetAssetsAssetResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetResponseBody400StatusCode'
  -> GetAssetsAssetResponseBody400
mkGetAssetsAssetResponseBody400 getAssetsAssetResponseBody400Error getAssetsAssetResponseBody400Message getAssetsAssetResponseBody400StatusCode = GetAssetsAssetResponseBody400{getAssetsAssetResponseBody400Error = getAssetsAssetResponseBody400Error,
                                                                                                                                                                                getAssetsAssetResponseBody400Message = getAssetsAssetResponseBody400Message,
                                                                                                                                                                                getAssetsAssetResponseBody400StatusCode = getAssetsAssetResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetResponseBody403 = GetAssetsAssetResponseBody403 {
  -- | error
  getAssetsAssetResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetResponseBody403" (\obj -> ((GHC.Base.pure GetAssetsAssetResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetResponseBody403' with all required fields.
mkGetAssetsAssetResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetResponseBody403StatusCode'
  -> GetAssetsAssetResponseBody403
mkGetAssetsAssetResponseBody403 getAssetsAssetResponseBody403Error getAssetsAssetResponseBody403Message getAssetsAssetResponseBody403StatusCode = GetAssetsAssetResponseBody403{getAssetsAssetResponseBody403Error = getAssetsAssetResponseBody403Error,
                                                                                                                                                                                getAssetsAssetResponseBody403Message = getAssetsAssetResponseBody403Message,
                                                                                                                                                                                getAssetsAssetResponseBody403StatusCode = getAssetsAssetResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetResponseBody404 = GetAssetsAssetResponseBody404 {
  -- | error
  getAssetsAssetResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetResponseBody404" (\obj -> ((GHC.Base.pure GetAssetsAssetResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetResponseBody404' with all required fields.
mkGetAssetsAssetResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetResponseBody404StatusCode'
  -> GetAssetsAssetResponseBody404
mkGetAssetsAssetResponseBody404 getAssetsAssetResponseBody404Error getAssetsAssetResponseBody404Message getAssetsAssetResponseBody404StatusCode = GetAssetsAssetResponseBody404{getAssetsAssetResponseBody404Error = getAssetsAssetResponseBody404Error,
                                                                                                                                                                                getAssetsAssetResponseBody404Message = getAssetsAssetResponseBody404Message,
                                                                                                                                                                                getAssetsAssetResponseBody404StatusCode = getAssetsAssetResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetResponseBody418 = GetAssetsAssetResponseBody418 {
  -- | error
  getAssetsAssetResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetResponseBody418" (\obj -> ((GHC.Base.pure GetAssetsAssetResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetResponseBody418' with all required fields.
mkGetAssetsAssetResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetResponseBody418StatusCode'
  -> GetAssetsAssetResponseBody418
mkGetAssetsAssetResponseBody418 getAssetsAssetResponseBody418Error getAssetsAssetResponseBody418Message getAssetsAssetResponseBody418StatusCode = GetAssetsAssetResponseBody418{getAssetsAssetResponseBody418Error = getAssetsAssetResponseBody418Error,
                                                                                                                                                                                getAssetsAssetResponseBody418Message = getAssetsAssetResponseBody418Message,
                                                                                                                                                                                getAssetsAssetResponseBody418StatusCode = getAssetsAssetResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetResponseBody429 = GetAssetsAssetResponseBody429 {
  -- | error
  getAssetsAssetResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetResponseBody429" (\obj -> ((GHC.Base.pure GetAssetsAssetResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetResponseBody429' with all required fields.
mkGetAssetsAssetResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetResponseBody429StatusCode'
  -> GetAssetsAssetResponseBody429
mkGetAssetsAssetResponseBody429 getAssetsAssetResponseBody429Error getAssetsAssetResponseBody429Message getAssetsAssetResponseBody429StatusCode = GetAssetsAssetResponseBody429{getAssetsAssetResponseBody429Error = getAssetsAssetResponseBody429Error,
                                                                                                                                                                                getAssetsAssetResponseBody429Message = getAssetsAssetResponseBody429Message,
                                                                                                                                                                                getAssetsAssetResponseBody429StatusCode = getAssetsAssetResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetResponseBody500 = GetAssetsAssetResponseBody500 {
  -- | error
  getAssetsAssetResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetResponseBody500" (\obj -> ((GHC.Base.pure GetAssetsAssetResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetResponseBody500' with all required fields.
mkGetAssetsAssetResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetResponseBody500StatusCode'
  -> GetAssetsAssetResponseBody500
mkGetAssetsAssetResponseBody500 getAssetsAssetResponseBody500Error getAssetsAssetResponseBody500Message getAssetsAssetResponseBody500StatusCode = GetAssetsAssetResponseBody500{getAssetsAssetResponseBody500Error = getAssetsAssetResponseBody500Error,
                                                                                                                                                                                getAssetsAssetResponseBody500Message = getAssetsAssetResponseBody500Message,
                                                                                                                                                                                getAssetsAssetResponseBody500StatusCode = getAssetsAssetResponseBody500StatusCode}
-- | > GET /assets/{asset}
-- 
-- The same as 'getAssets_Asset_' but accepts an explicit configuration.
getAssets_Asset_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ asset: Concatenation of the policy_id and hex-encoded asset_name
  -> m (Network.HTTP.Client.Types.Response GetAssetsAssetResponse) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_WithConfiguration config
                                  asset = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAssetsAssetResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 Asset)
                                                                                                                                                                                   | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetResponseBody400)
                                                                                                                                                                                   | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetResponseBody403)
                                                                                                                                                                                   | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetResponseBody404)
                                                                                                                                                                                   | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetResponseBody418)
                                                                                                                                                                                   | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetResponseBody429)
                                                                                                                                                                                   | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetResponseBody500)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel asset)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /assets/{asset}
-- 
-- The same as 'getAssets_Asset_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAssets_Asset_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ asset: Concatenation of the policy_id and hex-encoded asset_name
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_Raw asset = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel asset)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /assets/{asset}
-- 
-- The same as 'getAssets_Asset_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAssets_Asset_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ asset: Concatenation of the policy_id and hex-encoded asset_name
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_WithConfigurationRaw config
                                     asset = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel asset)) GHC.Base.++ ""))) GHC.Base.mempty)
