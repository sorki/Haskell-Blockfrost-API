-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getEpochs_Number_Parameters
module BlockfrostAPI.Operations.GetEpochsNumberParameters where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /epochs/{number}/parameters
-- 
-- Return the protocol parameters for the epoch specified.
getEpochs_Number_Parameters :: forall m . BlockfrostAPI.Common.MonadHTTP m => GHC.Integer.Type.Integer -- ^ number: Number of the epoch
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetEpochsNumberParametersResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Parameters number = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberParametersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  EpochParamContent)
                                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetEpochsNumberParametersResponseBody400)
                                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetEpochsNumberParametersResponseBody403)
                                                                                                                                                                                         | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetEpochsNumberParametersResponseBody404)
                                                                                                                                                                                         | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetEpochsNumberParametersResponseBody418)
                                                                                                                                                                                         | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetEpochsNumberParametersResponseBody429)
                                                                                                                                                                                         | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetEpochsNumberParametersResponseBody500)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel number)) GHC.Base.++ "/parameters"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getEpochs_Number_Parameters'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetEpochsNumberParametersResponseError' is used.
data GetEpochsNumberParametersResponse =
   GetEpochsNumberParametersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetEpochsNumberParametersResponse200 EpochParamContent -- ^ Return the data about the epoch
  | GetEpochsNumberParametersResponse400 GetEpochsNumberParametersResponseBody400 -- ^ Bad request
  | GetEpochsNumberParametersResponse403 GetEpochsNumberParametersResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetEpochsNumberParametersResponse404 GetEpochsNumberParametersResponseBody404 -- ^ Component not found
  | GetEpochsNumberParametersResponse418 GetEpochsNumberParametersResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetEpochsNumberParametersResponse429 GetEpochsNumberParametersResponseBody429 -- ^ Usage limit reached
  | GetEpochsNumberParametersResponse500 GetEpochsNumberParametersResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberParametersResponseBody400 = GetEpochsNumberParametersResponseBody400 {
  -- | error
  getEpochsNumberParametersResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberParametersResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberParametersResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberParametersResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberParametersResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberParametersResponseBody400" (\obj -> ((GHC.Base.pure GetEpochsNumberParametersResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberParametersResponseBody400' with all required fields.
mkGetEpochsNumberParametersResponseBody400 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberParametersResponseBody400StatusCode'
  -> GetEpochsNumberParametersResponseBody400
mkGetEpochsNumberParametersResponseBody400 getEpochsNumberParametersResponseBody400Error getEpochsNumberParametersResponseBody400Message getEpochsNumberParametersResponseBody400StatusCode = GetEpochsNumberParametersResponseBody400{getEpochsNumberParametersResponseBody400Error = getEpochsNumberParametersResponseBody400Error,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody400Message = getEpochsNumberParametersResponseBody400Message,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody400StatusCode = getEpochsNumberParametersResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberParametersResponseBody403 = GetEpochsNumberParametersResponseBody403 {
  -- | error
  getEpochsNumberParametersResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberParametersResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberParametersResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberParametersResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberParametersResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberParametersResponseBody403" (\obj -> ((GHC.Base.pure GetEpochsNumberParametersResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberParametersResponseBody403' with all required fields.
mkGetEpochsNumberParametersResponseBody403 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberParametersResponseBody403StatusCode'
  -> GetEpochsNumberParametersResponseBody403
mkGetEpochsNumberParametersResponseBody403 getEpochsNumberParametersResponseBody403Error getEpochsNumberParametersResponseBody403Message getEpochsNumberParametersResponseBody403StatusCode = GetEpochsNumberParametersResponseBody403{getEpochsNumberParametersResponseBody403Error = getEpochsNumberParametersResponseBody403Error,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody403Message = getEpochsNumberParametersResponseBody403Message,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody403StatusCode = getEpochsNumberParametersResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberParametersResponseBody404 = GetEpochsNumberParametersResponseBody404 {
  -- | error
  getEpochsNumberParametersResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberParametersResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberParametersResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberParametersResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberParametersResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberParametersResponseBody404" (\obj -> ((GHC.Base.pure GetEpochsNumberParametersResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberParametersResponseBody404' with all required fields.
mkGetEpochsNumberParametersResponseBody404 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberParametersResponseBody404StatusCode'
  -> GetEpochsNumberParametersResponseBody404
mkGetEpochsNumberParametersResponseBody404 getEpochsNumberParametersResponseBody404Error getEpochsNumberParametersResponseBody404Message getEpochsNumberParametersResponseBody404StatusCode = GetEpochsNumberParametersResponseBody404{getEpochsNumberParametersResponseBody404Error = getEpochsNumberParametersResponseBody404Error,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody404Message = getEpochsNumberParametersResponseBody404Message,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody404StatusCode = getEpochsNumberParametersResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberParametersResponseBody418 = GetEpochsNumberParametersResponseBody418 {
  -- | error
  getEpochsNumberParametersResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberParametersResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberParametersResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberParametersResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberParametersResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberParametersResponseBody418" (\obj -> ((GHC.Base.pure GetEpochsNumberParametersResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberParametersResponseBody418' with all required fields.
mkGetEpochsNumberParametersResponseBody418 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberParametersResponseBody418StatusCode'
  -> GetEpochsNumberParametersResponseBody418
mkGetEpochsNumberParametersResponseBody418 getEpochsNumberParametersResponseBody418Error getEpochsNumberParametersResponseBody418Message getEpochsNumberParametersResponseBody418StatusCode = GetEpochsNumberParametersResponseBody418{getEpochsNumberParametersResponseBody418Error = getEpochsNumberParametersResponseBody418Error,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody418Message = getEpochsNumberParametersResponseBody418Message,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody418StatusCode = getEpochsNumberParametersResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberParametersResponseBody429 = GetEpochsNumberParametersResponseBody429 {
  -- | error
  getEpochsNumberParametersResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberParametersResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberParametersResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberParametersResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberParametersResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberParametersResponseBody429" (\obj -> ((GHC.Base.pure GetEpochsNumberParametersResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberParametersResponseBody429' with all required fields.
mkGetEpochsNumberParametersResponseBody429 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberParametersResponseBody429StatusCode'
  -> GetEpochsNumberParametersResponseBody429
mkGetEpochsNumberParametersResponseBody429 getEpochsNumberParametersResponseBody429Error getEpochsNumberParametersResponseBody429Message getEpochsNumberParametersResponseBody429StatusCode = GetEpochsNumberParametersResponseBody429{getEpochsNumberParametersResponseBody429Error = getEpochsNumberParametersResponseBody429Error,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody429Message = getEpochsNumberParametersResponseBody429Message,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody429StatusCode = getEpochsNumberParametersResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberParametersResponseBody500 = GetEpochsNumberParametersResponseBody500 {
  -- | error
  getEpochsNumberParametersResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberParametersResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberParametersResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberParametersResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberParametersResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberParametersResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberParametersResponseBody500" (\obj -> ((GHC.Base.pure GetEpochsNumberParametersResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberParametersResponseBody500' with all required fields.
mkGetEpochsNumberParametersResponseBody500 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberParametersResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberParametersResponseBody500StatusCode'
  -> GetEpochsNumberParametersResponseBody500
mkGetEpochsNumberParametersResponseBody500 getEpochsNumberParametersResponseBody500Error getEpochsNumberParametersResponseBody500Message getEpochsNumberParametersResponseBody500StatusCode = GetEpochsNumberParametersResponseBody500{getEpochsNumberParametersResponseBody500Error = getEpochsNumberParametersResponseBody500Error,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody500Message = getEpochsNumberParametersResponseBody500Message,
                                                                                                                                                                                                                                       getEpochsNumberParametersResponseBody500StatusCode = getEpochsNumberParametersResponseBody500StatusCode}
-- | > GET /epochs/{number}/parameters
-- 
-- The same as 'getEpochs_Number_Parameters' but accepts an explicit configuration.
getEpochs_Number_ParametersWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer -- ^ number: Number of the epoch
  -> m (Network.HTTP.Client.Types.Response GetEpochsNumberParametersResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_ParametersWithConfiguration config
                                             number = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberParametersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   EpochParamContent)
                                                                                                                                                                                                          | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsNumberParametersResponseBody400)
                                                                                                                                                                                                          | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsNumberParametersResponseBody403)
                                                                                                                                                                                                          | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsNumberParametersResponseBody404)
                                                                                                                                                                                                          | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsNumberParametersResponseBody418)
                                                                                                                                                                                                          | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsNumberParametersResponseBody429)
                                                                                                                                                                                                          | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberParametersResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsNumberParametersResponseBody500)
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel number)) GHC.Base.++ "/parameters"))) GHC.Base.mempty)
-- | > GET /epochs/{number}/parameters
-- 
-- The same as 'getEpochs_Number_Parameters' but returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_ParametersRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GHC.Integer.Type.Integer -- ^ number: Number of the epoch
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_ParametersRaw number = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel number)) GHC.Base.++ "/parameters"))) GHC.Base.mempty)
-- | > GET /epochs/{number}/parameters
-- 
-- The same as 'getEpochs_Number_Parameters' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_ParametersWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer -- ^ number: Number of the epoch
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_ParametersWithConfigurationRaw config
                                                number = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel number)) GHC.Base.++ "/parameters"))) GHC.Base.mempty)
