-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAssets
module BlockfrostAPI.Operations.GetAssets where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /assets
-- 
-- List of assets.
getAssets :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAssetsResponse) -- ^ Monadic computation which returns the result of the operation
getAssets parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAssetsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    Assets)
                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    GetAssetsResponseBody400)
                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    GetAssetsResponseBody403)
                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    GetAssetsResponseBody404)
                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    GetAssetsResponseBody418)
                                                                                                                                                           | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    GetAssetsResponseBody429)
                                                                                                                                                           | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    GetAssetsResponseBody500)
                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/assets") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/assets.GET.parameters@ in the specification.
-- 
-- 
data GetAssetsParameters = GetAssetsParameters {
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  getAssetsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAssetsParametersQueryOrder :: (GHC.Maybe.Maybe GetAssetsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAssetsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryCount" Data.Aeson.Types.ToJSON..= getAssetsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAssetsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAssetsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryCount" Data.Aeson.Types.ToJSON..= getAssetsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAssetsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAssetsParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsParameters" (\obj -> ((GHC.Base.pure GetAssetsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAssetsParameters' with all required fields.
mkGetAssetsParameters :: GetAssetsParameters
mkGetAssetsParameters = GetAssetsParameters{getAssetsParametersQueryCount = GHC.Maybe.Nothing,
                                            getAssetsParametersQueryOrder = GHC.Maybe.Nothing,
                                            getAssetsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/assets.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAssetsParametersQueryOrder' =
   GetAssetsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAssetsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAssetsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAssetsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsParametersQueryOrder'
    where toJSON (GetAssetsParametersQueryOrder'Other val) = val
          toJSON (GetAssetsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAssetsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAssetsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAssetsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAssetsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAssetsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAssets'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAssetsResponseError' is used.
data GetAssetsResponse =
   GetAssetsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAssetsResponse200 Assets -- ^ Return list of assets
  | GetAssetsResponse400 GetAssetsResponseBody400 -- ^ Bad request
  | GetAssetsResponse403 GetAssetsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAssetsResponse404 GetAssetsResponseBody404 -- ^ Component not found
  | GetAssetsResponse418 GetAssetsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAssetsResponse429 GetAssetsResponseBody429 -- ^ Usage limit reached
  | GetAssetsResponse500 GetAssetsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsResponseBody400 = GetAssetsResponseBody400 {
  -- | error
  getAssetsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsResponseBody400" (\obj -> ((GHC.Base.pure GetAssetsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsResponseBody400' with all required fields.
mkGetAssetsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAssetsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsResponseBody400StatusCode'
  -> GetAssetsResponseBody400
mkGetAssetsResponseBody400 getAssetsResponseBody400Error getAssetsResponseBody400Message getAssetsResponseBody400StatusCode = GetAssetsResponseBody400{getAssetsResponseBody400Error = getAssetsResponseBody400Error,
                                                                                                                                                       getAssetsResponseBody400Message = getAssetsResponseBody400Message,
                                                                                                                                                       getAssetsResponseBody400StatusCode = getAssetsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsResponseBody403 = GetAssetsResponseBody403 {
  -- | error
  getAssetsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsResponseBody403" (\obj -> ((GHC.Base.pure GetAssetsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsResponseBody403' with all required fields.
mkGetAssetsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAssetsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsResponseBody403StatusCode'
  -> GetAssetsResponseBody403
mkGetAssetsResponseBody403 getAssetsResponseBody403Error getAssetsResponseBody403Message getAssetsResponseBody403StatusCode = GetAssetsResponseBody403{getAssetsResponseBody403Error = getAssetsResponseBody403Error,
                                                                                                                                                       getAssetsResponseBody403Message = getAssetsResponseBody403Message,
                                                                                                                                                       getAssetsResponseBody403StatusCode = getAssetsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsResponseBody404 = GetAssetsResponseBody404 {
  -- | error
  getAssetsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsResponseBody404" (\obj -> ((GHC.Base.pure GetAssetsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsResponseBody404' with all required fields.
mkGetAssetsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAssetsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsResponseBody404StatusCode'
  -> GetAssetsResponseBody404
mkGetAssetsResponseBody404 getAssetsResponseBody404Error getAssetsResponseBody404Message getAssetsResponseBody404StatusCode = GetAssetsResponseBody404{getAssetsResponseBody404Error = getAssetsResponseBody404Error,
                                                                                                                                                       getAssetsResponseBody404Message = getAssetsResponseBody404Message,
                                                                                                                                                       getAssetsResponseBody404StatusCode = getAssetsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsResponseBody418 = GetAssetsResponseBody418 {
  -- | error
  getAssetsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsResponseBody418" (\obj -> ((GHC.Base.pure GetAssetsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsResponseBody418' with all required fields.
mkGetAssetsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAssetsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsResponseBody418StatusCode'
  -> GetAssetsResponseBody418
mkGetAssetsResponseBody418 getAssetsResponseBody418Error getAssetsResponseBody418Message getAssetsResponseBody418StatusCode = GetAssetsResponseBody418{getAssetsResponseBody418Error = getAssetsResponseBody418Error,
                                                                                                                                                       getAssetsResponseBody418Message = getAssetsResponseBody418Message,
                                                                                                                                                       getAssetsResponseBody418StatusCode = getAssetsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsResponseBody429 = GetAssetsResponseBody429 {
  -- | error
  getAssetsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsResponseBody429" (\obj -> ((GHC.Base.pure GetAssetsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsResponseBody429' with all required fields.
mkGetAssetsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAssetsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsResponseBody429StatusCode'
  -> GetAssetsResponseBody429
mkGetAssetsResponseBody429 getAssetsResponseBody429Error getAssetsResponseBody429Message getAssetsResponseBody429StatusCode = GetAssetsResponseBody429{getAssetsResponseBody429Error = getAssetsResponseBody429Error,
                                                                                                                                                       getAssetsResponseBody429Message = getAssetsResponseBody429Message,
                                                                                                                                                       getAssetsResponseBody429StatusCode = getAssetsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsResponseBody500 = GetAssetsResponseBody500 {
  -- | error
  getAssetsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsResponseBody500" (\obj -> ((GHC.Base.pure GetAssetsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsResponseBody500' with all required fields.
mkGetAssetsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAssetsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsResponseBody500StatusCode'
  -> GetAssetsResponseBody500
mkGetAssetsResponseBody500 getAssetsResponseBody500Error getAssetsResponseBody500Message getAssetsResponseBody500StatusCode = GetAssetsResponseBody500{getAssetsResponseBody500Error = getAssetsResponseBody500Error,
                                                                                                                                                       getAssetsResponseBody500Message = getAssetsResponseBody500Message,
                                                                                                                                                       getAssetsResponseBody500StatusCode = getAssetsResponseBody500StatusCode}
-- | > GET /assets
-- 
-- The same as 'getAssets' but accepts an explicit configuration.
getAssetsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAssetsResponse) -- ^ Monadic computation which returns the result of the operation
getAssetsWithConfiguration config
                           parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAssetsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     Assets)
                                                                                                                                                                            | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetAssetsResponseBody400)
                                                                                                                                                                            | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetAssetsResponseBody403)
                                                                                                                                                                            | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetAssetsResponseBody404)
                                                                                                                                                                            | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetAssetsResponseBody418)
                                                                                                                                                                            | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetAssetsResponseBody429)
                                                                                                                                                                            | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetAssetsResponseBody500)
                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/assets") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                             BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                             BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets
-- 
-- The same as 'getAssets' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAssetsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssetsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/assets") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets
-- 
-- The same as 'getAssets' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAssetsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssetsWithConfigurationRaw config
                              parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/assets") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
