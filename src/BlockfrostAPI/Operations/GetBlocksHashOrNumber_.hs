-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBlocks_HashOrNumber_
module BlockfrostAPI.Operations.GetBlocksHashOrNumber_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /blocks/{hash_or_number}
-- 
-- Return the content of a requested block.
getBlocks_HashOrNumber_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash_or_number: Hash of the requested block.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetBlocksHashOrNumberResponse) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_ hashOrNumber = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBlocksHashOrNumberResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            BlockContent)
                                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetBlocksHashOrNumberResponseBody400)
                                                                                                                                                                                       | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetBlocksHashOrNumberResponseBody403)
                                                                                                                                                                                       | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetBlocksHashOrNumberResponseBody404)
                                                                                                                                                                                       | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetBlocksHashOrNumberResponseBody418)
                                                                                                                                                                                       | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetBlocksHashOrNumberResponseBody429)
                                                                                                                                                                                       | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetBlocksHashOrNumberResponseBody500)
                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hashOrNumber)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getBlocks_HashOrNumber_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBlocksHashOrNumberResponseError' is used.
data GetBlocksHashOrNumberResponse =
   GetBlocksHashOrNumberResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBlocksHashOrNumberResponse200 BlockContent -- ^ Return the contents of the block
  | GetBlocksHashOrNumberResponse400 GetBlocksHashOrNumberResponseBody400 -- ^ Bad request
  | GetBlocksHashOrNumberResponse403 GetBlocksHashOrNumberResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetBlocksHashOrNumberResponse404 GetBlocksHashOrNumberResponseBody404 -- ^ Component not found
  | GetBlocksHashOrNumberResponse418 GetBlocksHashOrNumberResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetBlocksHashOrNumberResponse429 GetBlocksHashOrNumberResponseBody429 -- ^ Usage limit reached
  | GetBlocksHashOrNumberResponse500 GetBlocksHashOrNumberResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberResponseBody400 = GetBlocksHashOrNumberResponseBody400 {
  -- | error
  getBlocksHashOrNumberResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberResponseBody400" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberResponseBody400' with all required fields.
mkGetBlocksHashOrNumberResponseBody400 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberResponseBody400StatusCode'
  -> GetBlocksHashOrNumberResponseBody400
mkGetBlocksHashOrNumberResponseBody400 getBlocksHashOrNumberResponseBody400Error getBlocksHashOrNumberResponseBody400Message getBlocksHashOrNumberResponseBody400StatusCode = GetBlocksHashOrNumberResponseBody400{getBlocksHashOrNumberResponseBody400Error = getBlocksHashOrNumberResponseBody400Error,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody400Message = getBlocksHashOrNumberResponseBody400Message,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody400StatusCode = getBlocksHashOrNumberResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberResponseBody403 = GetBlocksHashOrNumberResponseBody403 {
  -- | error
  getBlocksHashOrNumberResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberResponseBody403" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberResponseBody403' with all required fields.
mkGetBlocksHashOrNumberResponseBody403 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberResponseBody403StatusCode'
  -> GetBlocksHashOrNumberResponseBody403
mkGetBlocksHashOrNumberResponseBody403 getBlocksHashOrNumberResponseBody403Error getBlocksHashOrNumberResponseBody403Message getBlocksHashOrNumberResponseBody403StatusCode = GetBlocksHashOrNumberResponseBody403{getBlocksHashOrNumberResponseBody403Error = getBlocksHashOrNumberResponseBody403Error,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody403Message = getBlocksHashOrNumberResponseBody403Message,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody403StatusCode = getBlocksHashOrNumberResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberResponseBody404 = GetBlocksHashOrNumberResponseBody404 {
  -- | error
  getBlocksHashOrNumberResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberResponseBody404" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberResponseBody404' with all required fields.
mkGetBlocksHashOrNumberResponseBody404 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberResponseBody404StatusCode'
  -> GetBlocksHashOrNumberResponseBody404
mkGetBlocksHashOrNumberResponseBody404 getBlocksHashOrNumberResponseBody404Error getBlocksHashOrNumberResponseBody404Message getBlocksHashOrNumberResponseBody404StatusCode = GetBlocksHashOrNumberResponseBody404{getBlocksHashOrNumberResponseBody404Error = getBlocksHashOrNumberResponseBody404Error,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody404Message = getBlocksHashOrNumberResponseBody404Message,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody404StatusCode = getBlocksHashOrNumberResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberResponseBody418 = GetBlocksHashOrNumberResponseBody418 {
  -- | error
  getBlocksHashOrNumberResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberResponseBody418" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberResponseBody418' with all required fields.
mkGetBlocksHashOrNumberResponseBody418 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberResponseBody418StatusCode'
  -> GetBlocksHashOrNumberResponseBody418
mkGetBlocksHashOrNumberResponseBody418 getBlocksHashOrNumberResponseBody418Error getBlocksHashOrNumberResponseBody418Message getBlocksHashOrNumberResponseBody418StatusCode = GetBlocksHashOrNumberResponseBody418{getBlocksHashOrNumberResponseBody418Error = getBlocksHashOrNumberResponseBody418Error,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody418Message = getBlocksHashOrNumberResponseBody418Message,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody418StatusCode = getBlocksHashOrNumberResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberResponseBody429 = GetBlocksHashOrNumberResponseBody429 {
  -- | error
  getBlocksHashOrNumberResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberResponseBody429" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberResponseBody429' with all required fields.
mkGetBlocksHashOrNumberResponseBody429 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberResponseBody429StatusCode'
  -> GetBlocksHashOrNumberResponseBody429
mkGetBlocksHashOrNumberResponseBody429 getBlocksHashOrNumberResponseBody429Error getBlocksHashOrNumberResponseBody429Message getBlocksHashOrNumberResponseBody429StatusCode = GetBlocksHashOrNumberResponseBody429{getBlocksHashOrNumberResponseBody429Error = getBlocksHashOrNumberResponseBody429Error,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody429Message = getBlocksHashOrNumberResponseBody429Message,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody429StatusCode = getBlocksHashOrNumberResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberResponseBody500 = GetBlocksHashOrNumberResponseBody500 {
  -- | error
  getBlocksHashOrNumberResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberResponseBody500" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberResponseBody500' with all required fields.
mkGetBlocksHashOrNumberResponseBody500 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberResponseBody500StatusCode'
  -> GetBlocksHashOrNumberResponseBody500
mkGetBlocksHashOrNumberResponseBody500 getBlocksHashOrNumberResponseBody500Error getBlocksHashOrNumberResponseBody500Message getBlocksHashOrNumberResponseBody500StatusCode = GetBlocksHashOrNumberResponseBody500{getBlocksHashOrNumberResponseBody500Error = getBlocksHashOrNumberResponseBody500Error,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody500Message = getBlocksHashOrNumberResponseBody500Message,
                                                                                                                                                                                                                   getBlocksHashOrNumberResponseBody500StatusCode = getBlocksHashOrNumberResponseBody500StatusCode}
-- | > GET /blocks/{hash_or_number}
-- 
-- The same as 'getBlocks_HashOrNumber_' but accepts an explicit configuration.
getBlocks_HashOrNumber_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash_or_number: Hash of the requested block.
  -> m (Network.HTTP.Client.Types.Response GetBlocksHashOrNumberResponse) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_WithConfiguration config
                                         hashOrNumber = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetBlocksHashOrNumberResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             BlockContent)
                                                                                                                                                                                                        | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksHashOrNumberResponseBody400)
                                                                                                                                                                                                        | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksHashOrNumberResponseBody403)
                                                                                                                                                                                                        | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksHashOrNumberResponseBody404)
                                                                                                                                                                                                        | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksHashOrNumberResponseBody418)
                                                                                                                                                                                                        | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksHashOrNumberResponseBody429)
                                                                                                                                                                                                        | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetBlocksHashOrNumberResponseBody500)
                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hashOrNumber)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /blocks/{hash_or_number}
-- 
-- The same as 'getBlocks_HashOrNumber_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocks_HashOrNumber_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash_or_number: Hash of the requested block.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_Raw hashOrNumber = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hashOrNumber)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /blocks/{hash_or_number}
-- 
-- The same as 'getBlocks_HashOrNumber_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocks_HashOrNumber_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash_or_number: Hash of the requested block.
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_WithConfigurationRaw config
                                            hashOrNumber = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hashOrNumber)) GHC.Base.++ ""))) GHC.Base.mempty)
