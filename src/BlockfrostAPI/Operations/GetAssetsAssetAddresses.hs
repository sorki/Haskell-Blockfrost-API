-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAssets_Asset_Addresses
module BlockfrostAPI.Operations.GetAssetsAssetAddresses where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /assets/{asset}/addresses
-- 
-- List of a addresses containing a specific asset
getAssets_Asset_Addresses :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsAssetAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAssetsAssetAddressesResponse) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_Addresses parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAssetsAssetAddressesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                AssetAddresses)
                                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetAddressesResponseBody400)
                                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetAddressesResponseBody403)
                                                                                                                                                                                         | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetAddressesResponseBody404)
                                                                                                                                                                                         | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetAddressesResponseBody418)
                                                                                                                                                                                         | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetAddressesResponseBody429)
                                                                                                                                                                                         | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAssetsAssetAddressesResponseBody500)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetAddressesParametersPathAsset parameters))) GHC.Base.++ "/addresses"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/assets\/{asset}\/addresses.GET.parameters@ in the specification.
-- 
-- 
data GetAssetsAssetAddressesParameters = GetAssetsAssetAddressesParameters {
  -- | pathAsset: Represents the parameter named \'asset\'
  -- 
  -- Concatenation of the policy_id and hex-encoded asset_name
  getAssetsAssetAddressesParametersPathAsset :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAssetsAssetAddressesParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAssetsAssetAddressesParametersQueryOrder :: (GHC.Maybe.Maybe GetAssetsAssetAddressesParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAssetsAssetAddressesParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetAddressesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAsset" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesParametersPathAsset obj : "queryCount" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAsset" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesParametersPathAsset obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetAddressesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetAddressesParameters" (\obj -> (((GHC.Base.pure GetAssetsAssetAddressesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAssetsAssetAddressesParameters' with all required fields.
mkGetAssetsAssetAddressesParameters :: Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesParametersPathAsset'
  -> GetAssetsAssetAddressesParameters
mkGetAssetsAssetAddressesParameters getAssetsAssetAddressesParametersPathAsset = GetAssetsAssetAddressesParameters{getAssetsAssetAddressesParametersPathAsset = getAssetsAssetAddressesParametersPathAsset,
                                                                                                                   getAssetsAssetAddressesParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                   getAssetsAssetAddressesParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                   getAssetsAssetAddressesParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/assets\/{asset}\/addresses.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAssetsAssetAddressesParametersQueryOrder' =
   GetAssetsAssetAddressesParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAssetsAssetAddressesParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAssetsAssetAddressesParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAssetsAssetAddressesParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetAddressesParametersQueryOrder'
    where toJSON (GetAssetsAssetAddressesParametersQueryOrder'Other val) = val
          toJSON (GetAssetsAssetAddressesParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAssetsAssetAddressesParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAssetsAssetAddressesParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetAddressesParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAssetsAssetAddressesParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAssetsAssetAddressesParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAssetsAssetAddressesParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAssets_Asset_Addresses'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAssetsAssetAddressesResponseError' is used.
data GetAssetsAssetAddressesResponse =
   GetAssetsAssetAddressesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAssetsAssetAddressesResponse200 AssetAddresses -- ^ Return the information about the history of a specific asset
  | GetAssetsAssetAddressesResponse400 GetAssetsAssetAddressesResponseBody400 -- ^ Bad request
  | GetAssetsAssetAddressesResponse403 GetAssetsAssetAddressesResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAssetsAssetAddressesResponse404 GetAssetsAssetAddressesResponseBody404 -- ^ Component not found
  | GetAssetsAssetAddressesResponse418 GetAssetsAssetAddressesResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAssetsAssetAddressesResponse429 GetAssetsAssetAddressesResponseBody429 -- ^ Usage limit reached
  | GetAssetsAssetAddressesResponse500 GetAssetsAssetAddressesResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetAddressesResponseBody400 = GetAssetsAssetAddressesResponseBody400 {
  -- | error
  getAssetsAssetAddressesResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetAddressesResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetAddressesResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetAddressesResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetAddressesResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetAddressesResponseBody400" (\obj -> ((GHC.Base.pure GetAssetsAssetAddressesResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetAddressesResponseBody400' with all required fields.
mkGetAssetsAssetAddressesResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetAddressesResponseBody400StatusCode'
  -> GetAssetsAssetAddressesResponseBody400
mkGetAssetsAssetAddressesResponseBody400 getAssetsAssetAddressesResponseBody400Error getAssetsAssetAddressesResponseBody400Message getAssetsAssetAddressesResponseBody400StatusCode = GetAssetsAssetAddressesResponseBody400{getAssetsAssetAddressesResponseBody400Error = getAssetsAssetAddressesResponseBody400Error,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody400Message = getAssetsAssetAddressesResponseBody400Message,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody400StatusCode = getAssetsAssetAddressesResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetAddressesResponseBody403 = GetAssetsAssetAddressesResponseBody403 {
  -- | error
  getAssetsAssetAddressesResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetAddressesResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetAddressesResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetAddressesResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetAddressesResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetAddressesResponseBody403" (\obj -> ((GHC.Base.pure GetAssetsAssetAddressesResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetAddressesResponseBody403' with all required fields.
mkGetAssetsAssetAddressesResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetAddressesResponseBody403StatusCode'
  -> GetAssetsAssetAddressesResponseBody403
mkGetAssetsAssetAddressesResponseBody403 getAssetsAssetAddressesResponseBody403Error getAssetsAssetAddressesResponseBody403Message getAssetsAssetAddressesResponseBody403StatusCode = GetAssetsAssetAddressesResponseBody403{getAssetsAssetAddressesResponseBody403Error = getAssetsAssetAddressesResponseBody403Error,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody403Message = getAssetsAssetAddressesResponseBody403Message,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody403StatusCode = getAssetsAssetAddressesResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetAddressesResponseBody404 = GetAssetsAssetAddressesResponseBody404 {
  -- | error
  getAssetsAssetAddressesResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetAddressesResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetAddressesResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetAddressesResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetAddressesResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetAddressesResponseBody404" (\obj -> ((GHC.Base.pure GetAssetsAssetAddressesResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetAddressesResponseBody404' with all required fields.
mkGetAssetsAssetAddressesResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetAddressesResponseBody404StatusCode'
  -> GetAssetsAssetAddressesResponseBody404
mkGetAssetsAssetAddressesResponseBody404 getAssetsAssetAddressesResponseBody404Error getAssetsAssetAddressesResponseBody404Message getAssetsAssetAddressesResponseBody404StatusCode = GetAssetsAssetAddressesResponseBody404{getAssetsAssetAddressesResponseBody404Error = getAssetsAssetAddressesResponseBody404Error,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody404Message = getAssetsAssetAddressesResponseBody404Message,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody404StatusCode = getAssetsAssetAddressesResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetAddressesResponseBody418 = GetAssetsAssetAddressesResponseBody418 {
  -- | error
  getAssetsAssetAddressesResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetAddressesResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetAddressesResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetAddressesResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetAddressesResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetAddressesResponseBody418" (\obj -> ((GHC.Base.pure GetAssetsAssetAddressesResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetAddressesResponseBody418' with all required fields.
mkGetAssetsAssetAddressesResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetAddressesResponseBody418StatusCode'
  -> GetAssetsAssetAddressesResponseBody418
mkGetAssetsAssetAddressesResponseBody418 getAssetsAssetAddressesResponseBody418Error getAssetsAssetAddressesResponseBody418Message getAssetsAssetAddressesResponseBody418StatusCode = GetAssetsAssetAddressesResponseBody418{getAssetsAssetAddressesResponseBody418Error = getAssetsAssetAddressesResponseBody418Error,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody418Message = getAssetsAssetAddressesResponseBody418Message,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody418StatusCode = getAssetsAssetAddressesResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetAddressesResponseBody429 = GetAssetsAssetAddressesResponseBody429 {
  -- | error
  getAssetsAssetAddressesResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetAddressesResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetAddressesResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetAddressesResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetAddressesResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetAddressesResponseBody429" (\obj -> ((GHC.Base.pure GetAssetsAssetAddressesResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetAddressesResponseBody429' with all required fields.
mkGetAssetsAssetAddressesResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetAddressesResponseBody429StatusCode'
  -> GetAssetsAssetAddressesResponseBody429
mkGetAssetsAssetAddressesResponseBody429 getAssetsAssetAddressesResponseBody429Error getAssetsAssetAddressesResponseBody429Message getAssetsAssetAddressesResponseBody429StatusCode = GetAssetsAssetAddressesResponseBody429{getAssetsAssetAddressesResponseBody429Error = getAssetsAssetAddressesResponseBody429Error,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody429Message = getAssetsAssetAddressesResponseBody429Message,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody429StatusCode = getAssetsAssetAddressesResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetAddressesResponseBody500 = GetAssetsAssetAddressesResponseBody500 {
  -- | error
  getAssetsAssetAddressesResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetAddressesResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetAddressesResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetAddressesResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetAddressesResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetAddressesResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetAddressesResponseBody500" (\obj -> ((GHC.Base.pure GetAssetsAssetAddressesResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetAddressesResponseBody500' with all required fields.
mkGetAssetsAssetAddressesResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetAddressesResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetAddressesResponseBody500StatusCode'
  -> GetAssetsAssetAddressesResponseBody500
mkGetAssetsAssetAddressesResponseBody500 getAssetsAssetAddressesResponseBody500Error getAssetsAssetAddressesResponseBody500Message getAssetsAssetAddressesResponseBody500StatusCode = GetAssetsAssetAddressesResponseBody500{getAssetsAssetAddressesResponseBody500Error = getAssetsAssetAddressesResponseBody500Error,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody500Message = getAssetsAssetAddressesResponseBody500Message,
                                                                                                                                                                                                                             getAssetsAssetAddressesResponseBody500StatusCode = getAssetsAssetAddressesResponseBody500StatusCode}
-- | > GET /assets/{asset}/addresses
-- 
-- The same as 'getAssets_Asset_Addresses' but accepts an explicit configuration.
getAssets_Asset_AddressesWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsAssetAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAssetsAssetAddressesResponse) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_AddressesWithConfiguration config
                                           parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAssetsAssetAddressesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AssetAddresses)
                                                                                                                                                                                                          | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetAddressesResponseBody400)
                                                                                                                                                                                                          | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetAddressesResponseBody403)
                                                                                                                                                                                                          | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetAddressesResponseBody404)
                                                                                                                                                                                                          | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetAddressesResponseBody418)
                                                                                                                                                                                                          | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetAddressesResponseBody429)
                                                                                                                                                                                                          | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetAddressesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAssetsAssetAddressesResponseBody500)
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetAddressesParametersPathAsset parameters))) GHC.Base.++ "/addresses"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets/{asset}/addresses
-- 
-- The same as 'getAssets_Asset_Addresses' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAssets_Asset_AddressesRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsAssetAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_AddressesRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetAddressesParametersPathAsset parameters))) GHC.Base.++ "/addresses"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets/{asset}/addresses
-- 
-- The same as 'getAssets_Asset_Addresses' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAssets_Asset_AddressesWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsAssetAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_AddressesWithConfigurationRaw config
                                              parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetAddressesParametersPathAsset parameters))) GHC.Base.++ "/addresses"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetAddressesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
