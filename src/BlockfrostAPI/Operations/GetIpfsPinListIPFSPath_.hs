-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getIpfsPinList_IPFSPath_
module BlockfrostAPI.Operations.GetIpfsPinListIPFSPath_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /ipfs/pin/list/{IPFS_path}
-- 
-- List objects pinned to local storage
getIpfsPinList_IPFSPath_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ IPFS_path
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetIpfsPinListIPFSPathResponse) -- ^ Monadic computation which returns the result of the operation
getIpfsPinList_IPFSPath_ iPFSPath = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetIpfsPinListIPFSPathResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsPinListIPFSPathResponseBody200)
                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsPinListIPFSPathResponseBody400)
                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsPinListIPFSPathResponseBody403)
                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsPinListIPFSPathResponseBody404)
                                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsPinListIPFSPathResponseBody418)
                                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsPinListIPFSPathResponseBody429)
                                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsPinListIPFSPathResponseBody500)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/ipfs/pin/list/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getIpfsPinList_IPFSPath_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetIpfsPinListIPFSPathResponseError' is used.
data GetIpfsPinListIPFSPathResponse =
   GetIpfsPinListIPFSPathResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetIpfsPinListIPFSPathResponse200 GetIpfsPinListIPFSPathResponseBody200 -- ^ Returns the pins pinned
  | GetIpfsPinListIPFSPathResponse400 GetIpfsPinListIPFSPathResponseBody400 -- ^ Bad request
  | GetIpfsPinListIPFSPathResponse403 GetIpfsPinListIPFSPathResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetIpfsPinListIPFSPathResponse404 GetIpfsPinListIPFSPathResponseBody404 -- ^ Component not found
  | GetIpfsPinListIPFSPathResponse418 GetIpfsPinListIPFSPathResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetIpfsPinListIPFSPathResponse429 GetIpfsPinListIPFSPathResponseBody429 -- ^ Usage limit reached
  | GetIpfsPinListIPFSPathResponse500 GetIpfsPinListIPFSPathResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/ipfs\/pin\/list\/{IPFS_path}.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListIPFSPathResponseBody200 = GetIpfsPinListIPFSPathResponseBody200 {
  -- | ipfs_hash: IPFS hash of the pinned object
  getIpfsPinListIPFSPathResponseBody200IpfsHash :: Data.Text.Internal.Text
  -- | size: Size of the object in Bytes
  , getIpfsPinListIPFSPathResponseBody200Size :: Data.Text.Internal.Text
  -- | time_created: Time of the creation of the IPFS object on our backends
  , getIpfsPinListIPFSPathResponseBody200TimeCreated :: GHC.Integer.Type.Integer
  -- | time_pinned: Time of the pin of the IPFS object on our backends
  , getIpfsPinListIPFSPathResponseBody200TimePinned :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListIPFSPathResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ipfs_hash" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody200IpfsHash obj : "size" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody200Size obj : "time_created" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody200TimeCreated obj : "time_pinned" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody200TimePinned obj : "state" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "queued|pinned|unpinned|failed|gc" : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ipfs_hash" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody200IpfsHash obj) GHC.Base.<> (("size" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody200Size obj) GHC.Base.<> (("time_created" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody200TimeCreated obj) GHC.Base.<> (("time_pinned" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody200TimePinned obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "queued|pinned|unpinned|failed|gc")))))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListIPFSPathResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListIPFSPathResponseBody200" (\obj -> (((GHC.Base.pure GetIpfsPinListIPFSPathResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipfs_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time_created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time_pinned"))
-- | Create a new 'GetIpfsPinListIPFSPathResponseBody200' with all required fields.
mkGetIpfsPinListIPFSPathResponseBody200 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody200IpfsHash'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody200Size'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListIPFSPathResponseBody200TimeCreated'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListIPFSPathResponseBody200TimePinned'
  -> GetIpfsPinListIPFSPathResponseBody200
mkGetIpfsPinListIPFSPathResponseBody200 getIpfsPinListIPFSPathResponseBody200IpfsHash getIpfsPinListIPFSPathResponseBody200Size getIpfsPinListIPFSPathResponseBody200TimeCreated getIpfsPinListIPFSPathResponseBody200TimePinned = GetIpfsPinListIPFSPathResponseBody200{getIpfsPinListIPFSPathResponseBody200IpfsHash = getIpfsPinListIPFSPathResponseBody200IpfsHash,
                                                                                                                                                                                                                                                                         getIpfsPinListIPFSPathResponseBody200Size = getIpfsPinListIPFSPathResponseBody200Size,
                                                                                                                                                                                                                                                                         getIpfsPinListIPFSPathResponseBody200TimeCreated = getIpfsPinListIPFSPathResponseBody200TimeCreated,
                                                                                                                                                                                                                                                                         getIpfsPinListIPFSPathResponseBody200TimePinned = getIpfsPinListIPFSPathResponseBody200TimePinned}
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListIPFSPathResponseBody400 = GetIpfsPinListIPFSPathResponseBody400 {
  -- | error
  getIpfsPinListIPFSPathResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListIPFSPathResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListIPFSPathResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListIPFSPathResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListIPFSPathResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListIPFSPathResponseBody400" (\obj -> ((GHC.Base.pure GetIpfsPinListIPFSPathResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListIPFSPathResponseBody400' with all required fields.
mkGetIpfsPinListIPFSPathResponseBody400 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListIPFSPathResponseBody400StatusCode'
  -> GetIpfsPinListIPFSPathResponseBody400
mkGetIpfsPinListIPFSPathResponseBody400 getIpfsPinListIPFSPathResponseBody400Error getIpfsPinListIPFSPathResponseBody400Message getIpfsPinListIPFSPathResponseBody400StatusCode = GetIpfsPinListIPFSPathResponseBody400{getIpfsPinListIPFSPathResponseBody400Error = getIpfsPinListIPFSPathResponseBody400Error,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody400Message = getIpfsPinListIPFSPathResponseBody400Message,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody400StatusCode = getIpfsPinListIPFSPathResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListIPFSPathResponseBody403 = GetIpfsPinListIPFSPathResponseBody403 {
  -- | error
  getIpfsPinListIPFSPathResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListIPFSPathResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListIPFSPathResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListIPFSPathResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListIPFSPathResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListIPFSPathResponseBody403" (\obj -> ((GHC.Base.pure GetIpfsPinListIPFSPathResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListIPFSPathResponseBody403' with all required fields.
mkGetIpfsPinListIPFSPathResponseBody403 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListIPFSPathResponseBody403StatusCode'
  -> GetIpfsPinListIPFSPathResponseBody403
mkGetIpfsPinListIPFSPathResponseBody403 getIpfsPinListIPFSPathResponseBody403Error getIpfsPinListIPFSPathResponseBody403Message getIpfsPinListIPFSPathResponseBody403StatusCode = GetIpfsPinListIPFSPathResponseBody403{getIpfsPinListIPFSPathResponseBody403Error = getIpfsPinListIPFSPathResponseBody403Error,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody403Message = getIpfsPinListIPFSPathResponseBody403Message,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody403StatusCode = getIpfsPinListIPFSPathResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListIPFSPathResponseBody404 = GetIpfsPinListIPFSPathResponseBody404 {
  -- | error
  getIpfsPinListIPFSPathResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListIPFSPathResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListIPFSPathResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListIPFSPathResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListIPFSPathResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListIPFSPathResponseBody404" (\obj -> ((GHC.Base.pure GetIpfsPinListIPFSPathResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListIPFSPathResponseBody404' with all required fields.
mkGetIpfsPinListIPFSPathResponseBody404 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListIPFSPathResponseBody404StatusCode'
  -> GetIpfsPinListIPFSPathResponseBody404
mkGetIpfsPinListIPFSPathResponseBody404 getIpfsPinListIPFSPathResponseBody404Error getIpfsPinListIPFSPathResponseBody404Message getIpfsPinListIPFSPathResponseBody404StatusCode = GetIpfsPinListIPFSPathResponseBody404{getIpfsPinListIPFSPathResponseBody404Error = getIpfsPinListIPFSPathResponseBody404Error,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody404Message = getIpfsPinListIPFSPathResponseBody404Message,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody404StatusCode = getIpfsPinListIPFSPathResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListIPFSPathResponseBody418 = GetIpfsPinListIPFSPathResponseBody418 {
  -- | error
  getIpfsPinListIPFSPathResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListIPFSPathResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListIPFSPathResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListIPFSPathResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListIPFSPathResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListIPFSPathResponseBody418" (\obj -> ((GHC.Base.pure GetIpfsPinListIPFSPathResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListIPFSPathResponseBody418' with all required fields.
mkGetIpfsPinListIPFSPathResponseBody418 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListIPFSPathResponseBody418StatusCode'
  -> GetIpfsPinListIPFSPathResponseBody418
mkGetIpfsPinListIPFSPathResponseBody418 getIpfsPinListIPFSPathResponseBody418Error getIpfsPinListIPFSPathResponseBody418Message getIpfsPinListIPFSPathResponseBody418StatusCode = GetIpfsPinListIPFSPathResponseBody418{getIpfsPinListIPFSPathResponseBody418Error = getIpfsPinListIPFSPathResponseBody418Error,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody418Message = getIpfsPinListIPFSPathResponseBody418Message,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody418StatusCode = getIpfsPinListIPFSPathResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListIPFSPathResponseBody429 = GetIpfsPinListIPFSPathResponseBody429 {
  -- | error
  getIpfsPinListIPFSPathResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListIPFSPathResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListIPFSPathResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListIPFSPathResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListIPFSPathResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListIPFSPathResponseBody429" (\obj -> ((GHC.Base.pure GetIpfsPinListIPFSPathResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListIPFSPathResponseBody429' with all required fields.
mkGetIpfsPinListIPFSPathResponseBody429 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListIPFSPathResponseBody429StatusCode'
  -> GetIpfsPinListIPFSPathResponseBody429
mkGetIpfsPinListIPFSPathResponseBody429 getIpfsPinListIPFSPathResponseBody429Error getIpfsPinListIPFSPathResponseBody429Message getIpfsPinListIPFSPathResponseBody429StatusCode = GetIpfsPinListIPFSPathResponseBody429{getIpfsPinListIPFSPathResponseBody429Error = getIpfsPinListIPFSPathResponseBody429Error,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody429Message = getIpfsPinListIPFSPathResponseBody429Message,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody429StatusCode = getIpfsPinListIPFSPathResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsPinListIPFSPathResponseBody500 = GetIpfsPinListIPFSPathResponseBody500 {
  -- | error
  getIpfsPinListIPFSPathResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsPinListIPFSPathResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsPinListIPFSPathResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsPinListIPFSPathResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsPinListIPFSPathResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsPinListIPFSPathResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsPinListIPFSPathResponseBody500" (\obj -> ((GHC.Base.pure GetIpfsPinListIPFSPathResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsPinListIPFSPathResponseBody500' with all required fields.
mkGetIpfsPinListIPFSPathResponseBody500 :: Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsPinListIPFSPathResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsPinListIPFSPathResponseBody500StatusCode'
  -> GetIpfsPinListIPFSPathResponseBody500
mkGetIpfsPinListIPFSPathResponseBody500 getIpfsPinListIPFSPathResponseBody500Error getIpfsPinListIPFSPathResponseBody500Message getIpfsPinListIPFSPathResponseBody500StatusCode = GetIpfsPinListIPFSPathResponseBody500{getIpfsPinListIPFSPathResponseBody500Error = getIpfsPinListIPFSPathResponseBody500Error,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody500Message = getIpfsPinListIPFSPathResponseBody500Message,
                                                                                                                                                                                                                        getIpfsPinListIPFSPathResponseBody500StatusCode = getIpfsPinListIPFSPathResponseBody500StatusCode}
-- | > GET /ipfs/pin/list/{IPFS_path}
-- 
-- The same as 'getIpfsPinList_IPFSPath_' but accepts an explicit configuration.
getIpfsPinList_IPFSPath_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ IPFS_path
  -> m (Network.HTTP.Client.Types.Response GetIpfsPinListIPFSPathResponse) -- ^ Monadic computation which returns the result of the operation
getIpfsPinList_IPFSPath_WithConfiguration config
                                          iPFSPath = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetIpfsPinListIPFSPathResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetIpfsPinListIPFSPathResponseBody200)
                                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsPinListIPFSPathResponseBody400)
                                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsPinListIPFSPathResponseBody403)
                                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsPinListIPFSPathResponseBody404)
                                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsPinListIPFSPathResponseBody418)
                                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsPinListIPFSPathResponseBody429)
                                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsPinListIPFSPathResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsPinListIPFSPathResponseBody500)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/ipfs/pin/list/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /ipfs/pin/list/{IPFS_path}
-- 
-- The same as 'getIpfsPinList_IPFSPath_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getIpfsPinList_IPFSPath_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ IPFS_path
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getIpfsPinList_IPFSPath_Raw iPFSPath = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/ipfs/pin/list/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /ipfs/pin/list/{IPFS_path}
-- 
-- The same as 'getIpfsPinList_IPFSPath_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getIpfsPinList_IPFSPath_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ IPFS_path
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getIpfsPinList_IPFSPath_WithConfigurationRaw config
                                             iPFSPath = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/ipfs/pin/list/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
