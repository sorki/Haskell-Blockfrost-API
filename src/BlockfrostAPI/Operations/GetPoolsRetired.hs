-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPoolsRetired
module BlockfrostAPI.Operations.GetPoolsRetired where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /pools/retired
-- 
-- List of already retired pools.
getPoolsRetired :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsRetiredParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetPoolsRetiredResponse) -- ^ Monadic computation which returns the result of the operation
getPoolsRetired parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPoolsRetiredResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      PoolListRetire)
                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsRetiredResponseBody400)
                                                                                                                                                                       | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsRetiredResponseBody403)
                                                                                                                                                                       | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsRetiredResponseBody404)
                                                                                                                                                                       | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsRetiredResponseBody418)
                                                                                                                                                                       | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsRetiredResponseBody429)
                                                                                                                                                                       | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsRetiredResponseBody500)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/retired") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/pools\/retired.GET.parameters@ in the specification.
-- 
-- 
data GetPoolsRetiredParameters = GetPoolsRetiredParameters {
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The numbers of pools per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  getPoolsRetiredParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getPoolsRetiredParametersQueryOrder :: (GHC.Maybe.Maybe GetPoolsRetiredParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getPoolsRetiredParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiredParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryCount" Data.Aeson.Types.ToJSON..= getPoolsRetiredParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getPoolsRetiredParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getPoolsRetiredParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryCount" Data.Aeson.Types.ToJSON..= getPoolsRetiredParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getPoolsRetiredParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getPoolsRetiredParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiredParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiredParameters" (\obj -> ((GHC.Base.pure GetPoolsRetiredParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetPoolsRetiredParameters' with all required fields.
mkGetPoolsRetiredParameters :: GetPoolsRetiredParameters
mkGetPoolsRetiredParameters = GetPoolsRetiredParameters{getPoolsRetiredParametersQueryCount = GHC.Maybe.Nothing,
                                                        getPoolsRetiredParametersQueryOrder = GHC.Maybe.Nothing,
                                                        getPoolsRetiredParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/pools\/retired.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetPoolsRetiredParametersQueryOrder' =
   GetPoolsRetiredParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetPoolsRetiredParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetPoolsRetiredParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetPoolsRetiredParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiredParametersQueryOrder'
    where toJSON (GetPoolsRetiredParametersQueryOrder'Other val) = val
          toJSON (GetPoolsRetiredParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetPoolsRetiredParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetPoolsRetiredParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiredParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetPoolsRetiredParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetPoolsRetiredParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetPoolsRetiredParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getPoolsRetired'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPoolsRetiredResponseError' is used.
data GetPoolsRetiredResponse =
   GetPoolsRetiredResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPoolsRetiredResponse200 PoolListRetire -- ^ Return the pool information content
  | GetPoolsRetiredResponse400 GetPoolsRetiredResponseBody400 -- ^ Bad request
  | GetPoolsRetiredResponse403 GetPoolsRetiredResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetPoolsRetiredResponse404 GetPoolsRetiredResponseBody404 -- ^ Component not found
  | GetPoolsRetiredResponse418 GetPoolsRetiredResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetPoolsRetiredResponse429 GetPoolsRetiredResponseBody429 -- ^ Usage limit reached
  | GetPoolsRetiredResponse500 GetPoolsRetiredResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiredResponseBody400 = GetPoolsRetiredResponseBody400 {
  -- | error
  getPoolsRetiredResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiredResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiredResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiredResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiredResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiredResponseBody400" (\obj -> ((GHC.Base.pure GetPoolsRetiredResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiredResponseBody400' with all required fields.
mkGetPoolsRetiredResponseBody400 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiredResponseBody400StatusCode'
  -> GetPoolsRetiredResponseBody400
mkGetPoolsRetiredResponseBody400 getPoolsRetiredResponseBody400Error getPoolsRetiredResponseBody400Message getPoolsRetiredResponseBody400StatusCode = GetPoolsRetiredResponseBody400{getPoolsRetiredResponseBody400Error = getPoolsRetiredResponseBody400Error,
                                                                                                                                                                                     getPoolsRetiredResponseBody400Message = getPoolsRetiredResponseBody400Message,
                                                                                                                                                                                     getPoolsRetiredResponseBody400StatusCode = getPoolsRetiredResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiredResponseBody403 = GetPoolsRetiredResponseBody403 {
  -- | error
  getPoolsRetiredResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiredResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiredResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiredResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiredResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiredResponseBody403" (\obj -> ((GHC.Base.pure GetPoolsRetiredResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiredResponseBody403' with all required fields.
mkGetPoolsRetiredResponseBody403 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiredResponseBody403StatusCode'
  -> GetPoolsRetiredResponseBody403
mkGetPoolsRetiredResponseBody403 getPoolsRetiredResponseBody403Error getPoolsRetiredResponseBody403Message getPoolsRetiredResponseBody403StatusCode = GetPoolsRetiredResponseBody403{getPoolsRetiredResponseBody403Error = getPoolsRetiredResponseBody403Error,
                                                                                                                                                                                     getPoolsRetiredResponseBody403Message = getPoolsRetiredResponseBody403Message,
                                                                                                                                                                                     getPoolsRetiredResponseBody403StatusCode = getPoolsRetiredResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiredResponseBody404 = GetPoolsRetiredResponseBody404 {
  -- | error
  getPoolsRetiredResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiredResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiredResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiredResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiredResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiredResponseBody404" (\obj -> ((GHC.Base.pure GetPoolsRetiredResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiredResponseBody404' with all required fields.
mkGetPoolsRetiredResponseBody404 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiredResponseBody404StatusCode'
  -> GetPoolsRetiredResponseBody404
mkGetPoolsRetiredResponseBody404 getPoolsRetiredResponseBody404Error getPoolsRetiredResponseBody404Message getPoolsRetiredResponseBody404StatusCode = GetPoolsRetiredResponseBody404{getPoolsRetiredResponseBody404Error = getPoolsRetiredResponseBody404Error,
                                                                                                                                                                                     getPoolsRetiredResponseBody404Message = getPoolsRetiredResponseBody404Message,
                                                                                                                                                                                     getPoolsRetiredResponseBody404StatusCode = getPoolsRetiredResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiredResponseBody418 = GetPoolsRetiredResponseBody418 {
  -- | error
  getPoolsRetiredResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiredResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiredResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiredResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiredResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiredResponseBody418" (\obj -> ((GHC.Base.pure GetPoolsRetiredResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiredResponseBody418' with all required fields.
mkGetPoolsRetiredResponseBody418 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiredResponseBody418StatusCode'
  -> GetPoolsRetiredResponseBody418
mkGetPoolsRetiredResponseBody418 getPoolsRetiredResponseBody418Error getPoolsRetiredResponseBody418Message getPoolsRetiredResponseBody418StatusCode = GetPoolsRetiredResponseBody418{getPoolsRetiredResponseBody418Error = getPoolsRetiredResponseBody418Error,
                                                                                                                                                                                     getPoolsRetiredResponseBody418Message = getPoolsRetiredResponseBody418Message,
                                                                                                                                                                                     getPoolsRetiredResponseBody418StatusCode = getPoolsRetiredResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiredResponseBody429 = GetPoolsRetiredResponseBody429 {
  -- | error
  getPoolsRetiredResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiredResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiredResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiredResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiredResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiredResponseBody429" (\obj -> ((GHC.Base.pure GetPoolsRetiredResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiredResponseBody429' with all required fields.
mkGetPoolsRetiredResponseBody429 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiredResponseBody429StatusCode'
  -> GetPoolsRetiredResponseBody429
mkGetPoolsRetiredResponseBody429 getPoolsRetiredResponseBody429Error getPoolsRetiredResponseBody429Message getPoolsRetiredResponseBody429StatusCode = GetPoolsRetiredResponseBody429{getPoolsRetiredResponseBody429Error = getPoolsRetiredResponseBody429Error,
                                                                                                                                                                                     getPoolsRetiredResponseBody429Message = getPoolsRetiredResponseBody429Message,
                                                                                                                                                                                     getPoolsRetiredResponseBody429StatusCode = getPoolsRetiredResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiredResponseBody500 = GetPoolsRetiredResponseBody500 {
  -- | error
  getPoolsRetiredResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiredResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiredResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiredResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiredResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiredResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiredResponseBody500" (\obj -> ((GHC.Base.pure GetPoolsRetiredResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiredResponseBody500' with all required fields.
mkGetPoolsRetiredResponseBody500 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiredResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiredResponseBody500StatusCode'
  -> GetPoolsRetiredResponseBody500
mkGetPoolsRetiredResponseBody500 getPoolsRetiredResponseBody500Error getPoolsRetiredResponseBody500Message getPoolsRetiredResponseBody500StatusCode = GetPoolsRetiredResponseBody500{getPoolsRetiredResponseBody500Error = getPoolsRetiredResponseBody500Error,
                                                                                                                                                                                     getPoolsRetiredResponseBody500Message = getPoolsRetiredResponseBody500Message,
                                                                                                                                                                                     getPoolsRetiredResponseBody500StatusCode = getPoolsRetiredResponseBody500StatusCode}
-- | > GET /pools/retired
-- 
-- The same as 'getPoolsRetired' but accepts an explicit configuration.
getPoolsRetiredWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsRetiredParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetPoolsRetiredResponse) -- ^ Monadic computation which returns the result of the operation
getPoolsRetiredWithConfiguration config
                                 parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetPoolsRetiredResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       PoolListRetire)
                                                                                                                                                                                        | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiredResponseBody400)
                                                                                                                                                                                        | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiredResponseBody403)
                                                                                                                                                                                        | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiredResponseBody404)
                                                                                                                                                                                        | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiredResponseBody418)
                                                                                                                                                                                        | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiredResponseBody429)
                                                                                                                                                                                        | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiredResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiredResponseBody500)
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/retired") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/retired
-- 
-- The same as 'getPoolsRetired' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPoolsRetiredRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsRetiredParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPoolsRetiredRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/retired") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/retired
-- 
-- The same as 'getPoolsRetired' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPoolsRetiredWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsRetiredParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPoolsRetiredWithConfigurationRaw config
                                    parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/retired") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiredParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
