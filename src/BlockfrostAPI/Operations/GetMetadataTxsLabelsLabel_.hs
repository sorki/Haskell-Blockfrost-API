-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getMetadataTxsLabels_Label_
module BlockfrostAPI.Operations.GetMetadataTxsLabelsLabel_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /metadata/txs/labels/{label}
-- 
-- Transaction metadata per label.
getMetadataTxsLabels_Label_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetMetadataTxsLabelsLabelParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetMetadataTxsLabelsLabelResponse) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabels_Label_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetMetadataTxsLabelsLabelResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      TxMetadataLabelJson)
                                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetMetadataTxsLabelsLabelResponseBody400)
                                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetMetadataTxsLabelsLabelResponseBody403)
                                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetMetadataTxsLabelsLabelResponseBody404)
                                                                                                                                                                                             | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetMetadataTxsLabelsLabelResponseBody418)
                                                                                                                                                                                             | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetMetadataTxsLabelsLabelResponseBody429)
                                                                                                                                                                                             | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetMetadataTxsLabelsLabelResponseBody500)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/metadata/txs/labels/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getMetadataTxsLabelsLabelParametersPathLabel parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/metadata\/txs\/labels\/{label}.GET.parameters@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelParameters = GetMetadataTxsLabelsLabelParameters {
  -- | pathLabel: Represents the parameter named \'label\'
  -- 
  -- Metadata label
  getMetadataTxsLabelsLabelParametersPathLabel :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getMetadataTxsLabelsLabelParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getMetadataTxsLabelsLabelParametersQueryOrder :: (GHC.Maybe.Maybe GetMetadataTxsLabelsLabelParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getMetadataTxsLabelsLabelParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathLabel" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelParametersPathLabel obj : "queryCount" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathLabel" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelParametersPathLabel obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelParameters" (\obj -> (((GHC.Base.pure GetMetadataTxsLabelsLabelParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathLabel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetMetadataTxsLabelsLabelParameters' with all required fields.
mkGetMetadataTxsLabelsLabelParameters :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelParametersPathLabel'
  -> GetMetadataTxsLabelsLabelParameters
mkGetMetadataTxsLabelsLabelParameters getMetadataTxsLabelsLabelParametersPathLabel = GetMetadataTxsLabelsLabelParameters{getMetadataTxsLabelsLabelParametersPathLabel = getMetadataTxsLabelsLabelParametersPathLabel,
                                                                                                                         getMetadataTxsLabelsLabelParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                         getMetadataTxsLabelsLabelParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                         getMetadataTxsLabelsLabelParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/metadata\/txs\/labels\/{label}.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetMetadataTxsLabelsLabelParametersQueryOrder' =
   GetMetadataTxsLabelsLabelParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetMetadataTxsLabelsLabelParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetMetadataTxsLabelsLabelParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetMetadataTxsLabelsLabelParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelParametersQueryOrder'
    where toJSON (GetMetadataTxsLabelsLabelParametersQueryOrder'Other val) = val
          toJSON (GetMetadataTxsLabelsLabelParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetMetadataTxsLabelsLabelParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetMetadataTxsLabelsLabelParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetMetadataTxsLabelsLabelParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetMetadataTxsLabelsLabelParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetMetadataTxsLabelsLabelParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getMetadataTxsLabels_Label_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetMetadataTxsLabelsLabelResponseError' is used.
data GetMetadataTxsLabelsLabelResponse =
   GetMetadataTxsLabelsLabelResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetMetadataTxsLabelsLabelResponse200 TxMetadataLabelJson -- ^ Return the account delegations content
  | GetMetadataTxsLabelsLabelResponse400 GetMetadataTxsLabelsLabelResponseBody400 -- ^ Bad request
  | GetMetadataTxsLabelsLabelResponse403 GetMetadataTxsLabelsLabelResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetMetadataTxsLabelsLabelResponse404 GetMetadataTxsLabelsLabelResponseBody404 -- ^ Component not found
  | GetMetadataTxsLabelsLabelResponse418 GetMetadataTxsLabelsLabelResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetMetadataTxsLabelsLabelResponse429 GetMetadataTxsLabelsLabelResponseBody429 -- ^ Usage limit reached
  | GetMetadataTxsLabelsLabelResponse500 GetMetadataTxsLabelsLabelResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelResponseBody400 = GetMetadataTxsLabelsLabelResponseBody400 {
  -- | error
  getMetadataTxsLabelsLabelResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelResponseBody400" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelResponseBody400' with all required fields.
mkGetMetadataTxsLabelsLabelResponseBody400 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelResponseBody400StatusCode'
  -> GetMetadataTxsLabelsLabelResponseBody400
mkGetMetadataTxsLabelsLabelResponseBody400 getMetadataTxsLabelsLabelResponseBody400Error getMetadataTxsLabelsLabelResponseBody400Message getMetadataTxsLabelsLabelResponseBody400StatusCode = GetMetadataTxsLabelsLabelResponseBody400{getMetadataTxsLabelsLabelResponseBody400Error = getMetadataTxsLabelsLabelResponseBody400Error,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody400Message = getMetadataTxsLabelsLabelResponseBody400Message,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody400StatusCode = getMetadataTxsLabelsLabelResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelResponseBody403 = GetMetadataTxsLabelsLabelResponseBody403 {
  -- | error
  getMetadataTxsLabelsLabelResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelResponseBody403" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelResponseBody403' with all required fields.
mkGetMetadataTxsLabelsLabelResponseBody403 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelResponseBody403StatusCode'
  -> GetMetadataTxsLabelsLabelResponseBody403
mkGetMetadataTxsLabelsLabelResponseBody403 getMetadataTxsLabelsLabelResponseBody403Error getMetadataTxsLabelsLabelResponseBody403Message getMetadataTxsLabelsLabelResponseBody403StatusCode = GetMetadataTxsLabelsLabelResponseBody403{getMetadataTxsLabelsLabelResponseBody403Error = getMetadataTxsLabelsLabelResponseBody403Error,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody403Message = getMetadataTxsLabelsLabelResponseBody403Message,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody403StatusCode = getMetadataTxsLabelsLabelResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelResponseBody404 = GetMetadataTxsLabelsLabelResponseBody404 {
  -- | error
  getMetadataTxsLabelsLabelResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelResponseBody404" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelResponseBody404' with all required fields.
mkGetMetadataTxsLabelsLabelResponseBody404 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelResponseBody404StatusCode'
  -> GetMetadataTxsLabelsLabelResponseBody404
mkGetMetadataTxsLabelsLabelResponseBody404 getMetadataTxsLabelsLabelResponseBody404Error getMetadataTxsLabelsLabelResponseBody404Message getMetadataTxsLabelsLabelResponseBody404StatusCode = GetMetadataTxsLabelsLabelResponseBody404{getMetadataTxsLabelsLabelResponseBody404Error = getMetadataTxsLabelsLabelResponseBody404Error,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody404Message = getMetadataTxsLabelsLabelResponseBody404Message,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody404StatusCode = getMetadataTxsLabelsLabelResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelResponseBody418 = GetMetadataTxsLabelsLabelResponseBody418 {
  -- | error
  getMetadataTxsLabelsLabelResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelResponseBody418" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelResponseBody418' with all required fields.
mkGetMetadataTxsLabelsLabelResponseBody418 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelResponseBody418StatusCode'
  -> GetMetadataTxsLabelsLabelResponseBody418
mkGetMetadataTxsLabelsLabelResponseBody418 getMetadataTxsLabelsLabelResponseBody418Error getMetadataTxsLabelsLabelResponseBody418Message getMetadataTxsLabelsLabelResponseBody418StatusCode = GetMetadataTxsLabelsLabelResponseBody418{getMetadataTxsLabelsLabelResponseBody418Error = getMetadataTxsLabelsLabelResponseBody418Error,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody418Message = getMetadataTxsLabelsLabelResponseBody418Message,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody418StatusCode = getMetadataTxsLabelsLabelResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelResponseBody429 = GetMetadataTxsLabelsLabelResponseBody429 {
  -- | error
  getMetadataTxsLabelsLabelResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelResponseBody429" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelResponseBody429' with all required fields.
mkGetMetadataTxsLabelsLabelResponseBody429 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelResponseBody429StatusCode'
  -> GetMetadataTxsLabelsLabelResponseBody429
mkGetMetadataTxsLabelsLabelResponseBody429 getMetadataTxsLabelsLabelResponseBody429Error getMetadataTxsLabelsLabelResponseBody429Message getMetadataTxsLabelsLabelResponseBody429StatusCode = GetMetadataTxsLabelsLabelResponseBody429{getMetadataTxsLabelsLabelResponseBody429Error = getMetadataTxsLabelsLabelResponseBody429Error,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody429Message = getMetadataTxsLabelsLabelResponseBody429Message,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody429StatusCode = getMetadataTxsLabelsLabelResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelResponseBody500 = GetMetadataTxsLabelsLabelResponseBody500 {
  -- | error
  getMetadataTxsLabelsLabelResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelResponseBody500" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelResponseBody500' with all required fields.
mkGetMetadataTxsLabelsLabelResponseBody500 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelResponseBody500StatusCode'
  -> GetMetadataTxsLabelsLabelResponseBody500
mkGetMetadataTxsLabelsLabelResponseBody500 getMetadataTxsLabelsLabelResponseBody500Error getMetadataTxsLabelsLabelResponseBody500Message getMetadataTxsLabelsLabelResponseBody500StatusCode = GetMetadataTxsLabelsLabelResponseBody500{getMetadataTxsLabelsLabelResponseBody500Error = getMetadataTxsLabelsLabelResponseBody500Error,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody500Message = getMetadataTxsLabelsLabelResponseBody500Message,
                                                                                                                                                                                                                                       getMetadataTxsLabelsLabelResponseBody500StatusCode = getMetadataTxsLabelsLabelResponseBody500StatusCode}
-- | > GET /metadata/txs/labels/{label}
-- 
-- The same as 'getMetadataTxsLabels_Label_' but accepts an explicit configuration.
getMetadataTxsLabels_Label_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetMetadataTxsLabelsLabelParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetMetadataTxsLabelsLabelResponse) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabels_Label_WithConfiguration config
                                             parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetMetadataTxsLabelsLabelResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       TxMetadataLabelJson)
                                                                                                                                                                                                              | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetMetadataTxsLabelsLabelResponseBody400)
                                                                                                                                                                                                              | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetMetadataTxsLabelsLabelResponseBody403)
                                                                                                                                                                                                              | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetMetadataTxsLabelsLabelResponseBody404)
                                                                                                                                                                                                              | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetMetadataTxsLabelsLabelResponseBody418)
                                                                                                                                                                                                              | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetMetadataTxsLabelsLabelResponseBody429)
                                                                                                                                                                                                              | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetMetadataTxsLabelsLabelResponseBody500)
                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/metadata/txs/labels/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getMetadataTxsLabelsLabelParametersPathLabel parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /metadata/txs/labels/{label}
-- 
-- The same as 'getMetadataTxsLabels_Label_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getMetadataTxsLabels_Label_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetMetadataTxsLabelsLabelParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabels_Label_Raw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/metadata/txs/labels/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getMetadataTxsLabelsLabelParametersPathLabel parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /metadata/txs/labels/{label}
-- 
-- The same as 'getMetadataTxsLabels_Label_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getMetadataTxsLabels_Label_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetMetadataTxsLabelsLabelParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabels_Label_WithConfigurationRaw config
                                                parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/metadata/txs/labels/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getMetadataTxsLabelsLabelParametersPathLabel parameters))) GHC.Base.++ ""))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
