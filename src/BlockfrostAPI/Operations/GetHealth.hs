-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getHealth
module BlockfrostAPI.Operations.GetHealth where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /health
-- 
-- Return backend status as a boolean. Your application
--     should handle situations when backend for the given chain is unavailable.
getHealth :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetHealthResponse) -- ^ Monadic computation which returns the result of the operation
getHealth = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetHealthResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                         GetHealthResponseBody200)
                                                                                                                                                | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                         GetHealthResponseBody400)
                                                                                                                                                | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                         GetHealthResponseBody403)
                                                                                                                                                | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                         GetHealthResponseBody418)
                                                                                                                                                | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                         GetHealthResponseBody429)
                                                                                                                                                | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                         GetHealthResponseBody500)
                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/health") GHC.Base.mempty)
-- | Represents a response of the operation 'getHealth'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetHealthResponseError' is used.
data GetHealthResponse =
   GetHealthResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetHealthResponse200 GetHealthResponseBody200 -- ^ Return the boolean indicating the health of the backend.
  | GetHealthResponse400 GetHealthResponseBody400 -- ^ Bad request
  | GetHealthResponse403 GetHealthResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetHealthResponse418 GetHealthResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetHealthResponse429 GetHealthResponseBody429 -- ^ Usage limit reached
  | GetHealthResponse500 GetHealthResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/health.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetHealthResponseBody200 = GetHealthResponseBody200 {
  -- | is_healthy
  getHealthResponseBody200IsHealthy :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetHealthResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("is_healthy" Data.Aeson.Types.ToJSON..= getHealthResponseBody200IsHealthy obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("is_healthy" Data.Aeson.Types.ToJSON..= getHealthResponseBody200IsHealthy obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetHealthResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetHealthResponseBody200" (\obj -> GHC.Base.pure GetHealthResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_healthy"))
-- | Create a new 'GetHealthResponseBody200' with all required fields.
mkGetHealthResponseBody200 :: GHC.Types.Bool -- ^ 'getHealthResponseBody200IsHealthy'
  -> GetHealthResponseBody200
mkGetHealthResponseBody200 getHealthResponseBody200IsHealthy = GetHealthResponseBody200{getHealthResponseBody200IsHealthy = getHealthResponseBody200IsHealthy}
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetHealthResponseBody400 = GetHealthResponseBody400 {
  -- | error
  getHealthResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getHealthResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getHealthResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetHealthResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getHealthResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getHealthResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getHealthResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getHealthResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getHealthResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getHealthResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetHealthResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetHealthResponseBody400" (\obj -> ((GHC.Base.pure GetHealthResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetHealthResponseBody400' with all required fields.
mkGetHealthResponseBody400 :: Data.Text.Internal.Text -- ^ 'getHealthResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getHealthResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getHealthResponseBody400StatusCode'
  -> GetHealthResponseBody400
mkGetHealthResponseBody400 getHealthResponseBody400Error getHealthResponseBody400Message getHealthResponseBody400StatusCode = GetHealthResponseBody400{getHealthResponseBody400Error = getHealthResponseBody400Error,
                                                                                                                                                       getHealthResponseBody400Message = getHealthResponseBody400Message,
                                                                                                                                                       getHealthResponseBody400StatusCode = getHealthResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetHealthResponseBody403 = GetHealthResponseBody403 {
  -- | error
  getHealthResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getHealthResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getHealthResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetHealthResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getHealthResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getHealthResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getHealthResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getHealthResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getHealthResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getHealthResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetHealthResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetHealthResponseBody403" (\obj -> ((GHC.Base.pure GetHealthResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetHealthResponseBody403' with all required fields.
mkGetHealthResponseBody403 :: Data.Text.Internal.Text -- ^ 'getHealthResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getHealthResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getHealthResponseBody403StatusCode'
  -> GetHealthResponseBody403
mkGetHealthResponseBody403 getHealthResponseBody403Error getHealthResponseBody403Message getHealthResponseBody403StatusCode = GetHealthResponseBody403{getHealthResponseBody403Error = getHealthResponseBody403Error,
                                                                                                                                                       getHealthResponseBody403Message = getHealthResponseBody403Message,
                                                                                                                                                       getHealthResponseBody403StatusCode = getHealthResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetHealthResponseBody418 = GetHealthResponseBody418 {
  -- | error
  getHealthResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getHealthResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getHealthResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetHealthResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getHealthResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getHealthResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getHealthResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getHealthResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getHealthResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getHealthResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetHealthResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetHealthResponseBody418" (\obj -> ((GHC.Base.pure GetHealthResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetHealthResponseBody418' with all required fields.
mkGetHealthResponseBody418 :: Data.Text.Internal.Text -- ^ 'getHealthResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getHealthResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getHealthResponseBody418StatusCode'
  -> GetHealthResponseBody418
mkGetHealthResponseBody418 getHealthResponseBody418Error getHealthResponseBody418Message getHealthResponseBody418StatusCode = GetHealthResponseBody418{getHealthResponseBody418Error = getHealthResponseBody418Error,
                                                                                                                                                       getHealthResponseBody418Message = getHealthResponseBody418Message,
                                                                                                                                                       getHealthResponseBody418StatusCode = getHealthResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetHealthResponseBody429 = GetHealthResponseBody429 {
  -- | error
  getHealthResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getHealthResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getHealthResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetHealthResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getHealthResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getHealthResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getHealthResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getHealthResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getHealthResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getHealthResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetHealthResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetHealthResponseBody429" (\obj -> ((GHC.Base.pure GetHealthResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetHealthResponseBody429' with all required fields.
mkGetHealthResponseBody429 :: Data.Text.Internal.Text -- ^ 'getHealthResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getHealthResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getHealthResponseBody429StatusCode'
  -> GetHealthResponseBody429
mkGetHealthResponseBody429 getHealthResponseBody429Error getHealthResponseBody429Message getHealthResponseBody429StatusCode = GetHealthResponseBody429{getHealthResponseBody429Error = getHealthResponseBody429Error,
                                                                                                                                                       getHealthResponseBody429Message = getHealthResponseBody429Message,
                                                                                                                                                       getHealthResponseBody429StatusCode = getHealthResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetHealthResponseBody500 = GetHealthResponseBody500 {
  -- | error
  getHealthResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getHealthResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getHealthResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetHealthResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getHealthResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getHealthResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getHealthResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getHealthResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getHealthResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getHealthResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetHealthResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetHealthResponseBody500" (\obj -> ((GHC.Base.pure GetHealthResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetHealthResponseBody500' with all required fields.
mkGetHealthResponseBody500 :: Data.Text.Internal.Text -- ^ 'getHealthResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getHealthResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getHealthResponseBody500StatusCode'
  -> GetHealthResponseBody500
mkGetHealthResponseBody500 getHealthResponseBody500Error getHealthResponseBody500Message getHealthResponseBody500StatusCode = GetHealthResponseBody500{getHealthResponseBody500Error = getHealthResponseBody500Error,
                                                                                                                                                       getHealthResponseBody500Message = getHealthResponseBody500Message,
                                                                                                                                                       getHealthResponseBody500StatusCode = getHealthResponseBody500StatusCode}
-- | > GET /health
-- 
-- The same as 'getHealth' but accepts an explicit configuration.
getHealthWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response GetHealthResponse) -- ^ Monadic computation which returns the result of the operation
getHealthWithConfiguration config = GHC.Base.fmap (\response_7 -> GHC.Base.fmap (Data.Either.either GetHealthResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 GetHealthResponseBody200)
                                                                                                                                                                        | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 GetHealthResponseBody400)
                                                                                                                                                                        | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   GetHealthResponseBody403)
                                                                                                                                                                        | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   GetHealthResponseBody418)
                                                                                                                                                                        | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   GetHealthResponseBody429)
                                                                                                                                                                        | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetHealthResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   GetHealthResponseBody500)
                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_7) response_7) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/health") GHC.Base.mempty)
-- | > GET /health
-- 
-- The same as 'getHealth' but returns the raw 'Data.ByteString.Char8.ByteString'.
getHealthRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getHealthRaw = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/health") GHC.Base.mempty)
-- | > GET /health
-- 
-- The same as 'getHealth' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getHealthWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getHealthWithConfigurationRaw config = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/health") GHC.Base.mempty)
