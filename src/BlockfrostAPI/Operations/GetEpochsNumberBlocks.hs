-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getEpochs_Number_Blocks
module BlockfrostAPI.Operations.GetEpochsNumberBlocks where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /epochs/{number}/blocks
-- 
-- Return the blocks minted for the epoch specified.
getEpochs_Number_Blocks :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberBlocksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetEpochsNumberBlocksResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Blocks parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberBlocksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          EpochBlockContent)
                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberBlocksResponseBody400)
                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberBlocksResponseBody403)
                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberBlocksResponseBody404)
                                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberBlocksResponseBody418)
                                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberBlocksResponseBody429)
                                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetEpochsNumberBlocksResponseBody500)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksParametersPathNumber parameters))) GHC.Base.++ "/blocks"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/epochs\/{number}\/blocks.GET.parameters@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksParameters = GetEpochsNumberBlocksParameters {
  -- | pathNumber: Represents the parameter named \'number\'
  -- 
  -- Number of the epoch
  getEpochsNumberBlocksParametersPathNumber :: GHC.Integer.Type.Integer
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getEpochsNumberBlocksParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getEpochsNumberBlocksParametersQueryOrder :: (GHC.Maybe.Maybe GetEpochsNumberBlocksParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getEpochsNumberBlocksParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksParametersPathNumber obj : "queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksParametersPathNumber obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksParameters" (\obj -> (((GHC.Base.pure GetEpochsNumberBlocksParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNumber")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetEpochsNumberBlocksParameters' with all required fields.
mkGetEpochsNumberBlocksParameters :: GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksParametersPathNumber'
  -> GetEpochsNumberBlocksParameters
mkGetEpochsNumberBlocksParameters getEpochsNumberBlocksParametersPathNumber = GetEpochsNumberBlocksParameters{getEpochsNumberBlocksParametersPathNumber = getEpochsNumberBlocksParametersPathNumber,
                                                                                                              getEpochsNumberBlocksParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                              getEpochsNumberBlocksParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                              getEpochsNumberBlocksParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/epochs\/{number}\/blocks.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetEpochsNumberBlocksParametersQueryOrder' =
   GetEpochsNumberBlocksParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetEpochsNumberBlocksParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetEpochsNumberBlocksParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetEpochsNumberBlocksParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksParametersQueryOrder'
    where toJSON (GetEpochsNumberBlocksParametersQueryOrder'Other val) = val
          toJSON (GetEpochsNumberBlocksParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetEpochsNumberBlocksParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetEpochsNumberBlocksParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetEpochsNumberBlocksParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetEpochsNumberBlocksParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetEpochsNumberBlocksParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getEpochs_Number_Blocks'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetEpochsNumberBlocksResponseError' is used.
data GetEpochsNumberBlocksResponse =
   GetEpochsNumberBlocksResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetEpochsNumberBlocksResponse200 EpochBlockContent -- ^ Return the data about the epoch
  | GetEpochsNumberBlocksResponse400 GetEpochsNumberBlocksResponseBody400 -- ^ Bad request
  | GetEpochsNumberBlocksResponse403 GetEpochsNumberBlocksResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetEpochsNumberBlocksResponse404 GetEpochsNumberBlocksResponseBody404 -- ^ Component not found
  | GetEpochsNumberBlocksResponse418 GetEpochsNumberBlocksResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetEpochsNumberBlocksResponse429 GetEpochsNumberBlocksResponseBody429 -- ^ Usage limit reached
  | GetEpochsNumberBlocksResponse500 GetEpochsNumberBlocksResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksResponseBody400 = GetEpochsNumberBlocksResponseBody400 {
  -- | error
  getEpochsNumberBlocksResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksResponseBody400" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksResponseBody400' with all required fields.
mkGetEpochsNumberBlocksResponseBody400 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksResponseBody400StatusCode'
  -> GetEpochsNumberBlocksResponseBody400
mkGetEpochsNumberBlocksResponseBody400 getEpochsNumberBlocksResponseBody400Error getEpochsNumberBlocksResponseBody400Message getEpochsNumberBlocksResponseBody400StatusCode = GetEpochsNumberBlocksResponseBody400{getEpochsNumberBlocksResponseBody400Error = getEpochsNumberBlocksResponseBody400Error,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody400Message = getEpochsNumberBlocksResponseBody400Message,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody400StatusCode = getEpochsNumberBlocksResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksResponseBody403 = GetEpochsNumberBlocksResponseBody403 {
  -- | error
  getEpochsNumberBlocksResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksResponseBody403" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksResponseBody403' with all required fields.
mkGetEpochsNumberBlocksResponseBody403 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksResponseBody403StatusCode'
  -> GetEpochsNumberBlocksResponseBody403
mkGetEpochsNumberBlocksResponseBody403 getEpochsNumberBlocksResponseBody403Error getEpochsNumberBlocksResponseBody403Message getEpochsNumberBlocksResponseBody403StatusCode = GetEpochsNumberBlocksResponseBody403{getEpochsNumberBlocksResponseBody403Error = getEpochsNumberBlocksResponseBody403Error,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody403Message = getEpochsNumberBlocksResponseBody403Message,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody403StatusCode = getEpochsNumberBlocksResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksResponseBody404 = GetEpochsNumberBlocksResponseBody404 {
  -- | error
  getEpochsNumberBlocksResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksResponseBody404" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksResponseBody404' with all required fields.
mkGetEpochsNumberBlocksResponseBody404 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksResponseBody404StatusCode'
  -> GetEpochsNumberBlocksResponseBody404
mkGetEpochsNumberBlocksResponseBody404 getEpochsNumberBlocksResponseBody404Error getEpochsNumberBlocksResponseBody404Message getEpochsNumberBlocksResponseBody404StatusCode = GetEpochsNumberBlocksResponseBody404{getEpochsNumberBlocksResponseBody404Error = getEpochsNumberBlocksResponseBody404Error,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody404Message = getEpochsNumberBlocksResponseBody404Message,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody404StatusCode = getEpochsNumberBlocksResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksResponseBody418 = GetEpochsNumberBlocksResponseBody418 {
  -- | error
  getEpochsNumberBlocksResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksResponseBody418" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksResponseBody418' with all required fields.
mkGetEpochsNumberBlocksResponseBody418 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksResponseBody418StatusCode'
  -> GetEpochsNumberBlocksResponseBody418
mkGetEpochsNumberBlocksResponseBody418 getEpochsNumberBlocksResponseBody418Error getEpochsNumberBlocksResponseBody418Message getEpochsNumberBlocksResponseBody418StatusCode = GetEpochsNumberBlocksResponseBody418{getEpochsNumberBlocksResponseBody418Error = getEpochsNumberBlocksResponseBody418Error,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody418Message = getEpochsNumberBlocksResponseBody418Message,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody418StatusCode = getEpochsNumberBlocksResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksResponseBody429 = GetEpochsNumberBlocksResponseBody429 {
  -- | error
  getEpochsNumberBlocksResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksResponseBody429" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksResponseBody429' with all required fields.
mkGetEpochsNumberBlocksResponseBody429 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksResponseBody429StatusCode'
  -> GetEpochsNumberBlocksResponseBody429
mkGetEpochsNumberBlocksResponseBody429 getEpochsNumberBlocksResponseBody429Error getEpochsNumberBlocksResponseBody429Message getEpochsNumberBlocksResponseBody429StatusCode = GetEpochsNumberBlocksResponseBody429{getEpochsNumberBlocksResponseBody429Error = getEpochsNumberBlocksResponseBody429Error,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody429Message = getEpochsNumberBlocksResponseBody429Message,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody429StatusCode = getEpochsNumberBlocksResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberBlocksResponseBody500 = GetEpochsNumberBlocksResponseBody500 {
  -- | error
  getEpochsNumberBlocksResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberBlocksResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberBlocksResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberBlocksResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberBlocksResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberBlocksResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberBlocksResponseBody500" (\obj -> ((GHC.Base.pure GetEpochsNumberBlocksResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberBlocksResponseBody500' with all required fields.
mkGetEpochsNumberBlocksResponseBody500 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberBlocksResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberBlocksResponseBody500StatusCode'
  -> GetEpochsNumberBlocksResponseBody500
mkGetEpochsNumberBlocksResponseBody500 getEpochsNumberBlocksResponseBody500Error getEpochsNumberBlocksResponseBody500Message getEpochsNumberBlocksResponseBody500StatusCode = GetEpochsNumberBlocksResponseBody500{getEpochsNumberBlocksResponseBody500Error = getEpochsNumberBlocksResponseBody500Error,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody500Message = getEpochsNumberBlocksResponseBody500Message,
                                                                                                                                                                                                                   getEpochsNumberBlocksResponseBody500StatusCode = getEpochsNumberBlocksResponseBody500StatusCode}
-- | > GET /epochs/{number}/blocks
-- 
-- The same as 'getEpochs_Number_Blocks' but accepts an explicit configuration.
getEpochs_Number_BlocksWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberBlocksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetEpochsNumberBlocksResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_BlocksWithConfiguration config
                                         parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberBlocksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           EpochBlockContent)
                                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberBlocksResponseBody400)
                                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberBlocksResponseBody403)
                                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberBlocksResponseBody404)
                                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberBlocksResponseBody418)
                                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberBlocksResponseBody429)
                                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberBlocksResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetEpochsNumberBlocksResponseBody500)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksParametersPathNumber parameters))) GHC.Base.++ "/blocks"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/blocks
-- 
-- The same as 'getEpochs_Number_Blocks' but returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_BlocksRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberBlocksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_BlocksRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksParametersPathNumber parameters))) GHC.Base.++ "/blocks"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/blocks
-- 
-- The same as 'getEpochs_Number_Blocks' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_BlocksWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberBlocksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_BlocksWithConfigurationRaw config
                                            parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberBlocksParametersPathNumber parameters))) GHC.Base.++ "/blocks"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberBlocksParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
