-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPools_PoolId_Metadata
module BlockfrostAPI.Operations.GetPoolsPoolIdMetadata where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /pools/{pool_id}/metadata
-- 
-- Stake pool registration metadata.
getPools_PoolId_Metadata :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetPoolsPoolIdMetadataResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_Metadata poolId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdMetadataResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsPoolIdMetadataResponseBody200)
                                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsPoolIdMetadataResponseBody400)
                                                                                                                                                                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsPoolIdMetadataResponseBody403)
                                                                                                                                                                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsPoolIdMetadataResponseBody404)
                                                                                                                                                                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsPoolIdMetadataResponseBody418)
                                                                                                                                                                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsPoolIdMetadataResponseBody429)
                                                                                                                                                                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsPoolIdMetadataResponseBody500)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ "/metadata"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getPools_PoolId_Metadata'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPoolsPoolIdMetadataResponseError' is used.
data GetPoolsPoolIdMetadataResponse =
   GetPoolsPoolIdMetadataResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPoolsPoolIdMetadataResponse200 GetPoolsPoolIdMetadataResponseBody200 -- ^ Return the pool metadata content.
  | GetPoolsPoolIdMetadataResponse400 GetPoolsPoolIdMetadataResponseBody400 -- ^ Bad request
  | GetPoolsPoolIdMetadataResponse403 GetPoolsPoolIdMetadataResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetPoolsPoolIdMetadataResponse404 GetPoolsPoolIdMetadataResponseBody404 -- ^ Component not found
  | GetPoolsPoolIdMetadataResponse418 GetPoolsPoolIdMetadataResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetPoolsPoolIdMetadataResponse429 GetPoolsPoolIdMetadataResponseBody429 -- ^ Usage limit reached
  | GetPoolsPoolIdMetadataResponse500 GetPoolsPoolIdMetadataResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/pools\/{pool_id}\/metadata.GET.responses.200.content.application\/json.schema.anyOf@ in the specification.
-- 
-- 
data GetPoolsPoolIdMetadataResponseBody200 = GetPoolsPoolIdMetadataResponseBody200 {
  -- | description: Description of the stake pool
  getPoolsPoolIdMetadataResponseBody200Description :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | hash: Hash of the metadata file
  , getPoolsPoolIdMetadataResponseBody200Hash :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | hex: Hexadecimal pool ID
  , getPoolsPoolIdMetadataResponseBody200Hex :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | homepage: Home page of the stake pool
  , getPoolsPoolIdMetadataResponseBody200Homepage :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | name: Name of the stake pool
  , getPoolsPoolIdMetadataResponseBody200Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | pool_id: Bech32 pool ID
  , getPoolsPoolIdMetadataResponseBody200PoolId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ticker: Ticker of the stake pool
  , getPoolsPoolIdMetadataResponseBody200Ticker :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | url: URL to the stake pool metadata
  , getPoolsPoolIdMetadataResponseBody200Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdMetadataResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("description" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Description obj : "hash" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Hash obj : "hex" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Hex obj : "homepage" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Homepage obj : "name" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Name obj : "pool_id" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200PoolId obj : "ticker" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Ticker obj : "url" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Url obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("description" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Description obj) GHC.Base.<> (("hash" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Hash obj) GHC.Base.<> (("hex" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Hex obj) GHC.Base.<> (("homepage" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Homepage obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Name obj) GHC.Base.<> (("pool_id" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200PoolId obj) GHC.Base.<> (("ticker" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Ticker obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody200Url obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdMetadataResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdMetadataResponseBody200" (\obj -> (((((((GHC.Base.pure GetPoolsPoolIdMetadataResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "homepage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ticker")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Create a new 'GetPoolsPoolIdMetadataResponseBody200' with all required fields.
mkGetPoolsPoolIdMetadataResponseBody200 :: GetPoolsPoolIdMetadataResponseBody200
mkGetPoolsPoolIdMetadataResponseBody200 = GetPoolsPoolIdMetadataResponseBody200{getPoolsPoolIdMetadataResponseBody200Description = GHC.Maybe.Nothing,
                                                                                getPoolsPoolIdMetadataResponseBody200Hash = GHC.Maybe.Nothing,
                                                                                getPoolsPoolIdMetadataResponseBody200Hex = GHC.Maybe.Nothing,
                                                                                getPoolsPoolIdMetadataResponseBody200Homepage = GHC.Maybe.Nothing,
                                                                                getPoolsPoolIdMetadataResponseBody200Name = GHC.Maybe.Nothing,
                                                                                getPoolsPoolIdMetadataResponseBody200PoolId = GHC.Maybe.Nothing,
                                                                                getPoolsPoolIdMetadataResponseBody200Ticker = GHC.Maybe.Nothing,
                                                                                getPoolsPoolIdMetadataResponseBody200Url = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdMetadataResponseBody400 = GetPoolsPoolIdMetadataResponseBody400 {
  -- | error
  getPoolsPoolIdMetadataResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdMetadataResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdMetadataResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdMetadataResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdMetadataResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdMetadataResponseBody400" (\obj -> ((GHC.Base.pure GetPoolsPoolIdMetadataResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdMetadataResponseBody400' with all required fields.
mkGetPoolsPoolIdMetadataResponseBody400 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdMetadataResponseBody400StatusCode'
  -> GetPoolsPoolIdMetadataResponseBody400
mkGetPoolsPoolIdMetadataResponseBody400 getPoolsPoolIdMetadataResponseBody400Error getPoolsPoolIdMetadataResponseBody400Message getPoolsPoolIdMetadataResponseBody400StatusCode = GetPoolsPoolIdMetadataResponseBody400{getPoolsPoolIdMetadataResponseBody400Error = getPoolsPoolIdMetadataResponseBody400Error,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody400Message = getPoolsPoolIdMetadataResponseBody400Message,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody400StatusCode = getPoolsPoolIdMetadataResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdMetadataResponseBody403 = GetPoolsPoolIdMetadataResponseBody403 {
  -- | error
  getPoolsPoolIdMetadataResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdMetadataResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdMetadataResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdMetadataResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdMetadataResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdMetadataResponseBody403" (\obj -> ((GHC.Base.pure GetPoolsPoolIdMetadataResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdMetadataResponseBody403' with all required fields.
mkGetPoolsPoolIdMetadataResponseBody403 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdMetadataResponseBody403StatusCode'
  -> GetPoolsPoolIdMetadataResponseBody403
mkGetPoolsPoolIdMetadataResponseBody403 getPoolsPoolIdMetadataResponseBody403Error getPoolsPoolIdMetadataResponseBody403Message getPoolsPoolIdMetadataResponseBody403StatusCode = GetPoolsPoolIdMetadataResponseBody403{getPoolsPoolIdMetadataResponseBody403Error = getPoolsPoolIdMetadataResponseBody403Error,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody403Message = getPoolsPoolIdMetadataResponseBody403Message,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody403StatusCode = getPoolsPoolIdMetadataResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdMetadataResponseBody404 = GetPoolsPoolIdMetadataResponseBody404 {
  -- | error
  getPoolsPoolIdMetadataResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdMetadataResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdMetadataResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdMetadataResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdMetadataResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdMetadataResponseBody404" (\obj -> ((GHC.Base.pure GetPoolsPoolIdMetadataResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdMetadataResponseBody404' with all required fields.
mkGetPoolsPoolIdMetadataResponseBody404 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdMetadataResponseBody404StatusCode'
  -> GetPoolsPoolIdMetadataResponseBody404
mkGetPoolsPoolIdMetadataResponseBody404 getPoolsPoolIdMetadataResponseBody404Error getPoolsPoolIdMetadataResponseBody404Message getPoolsPoolIdMetadataResponseBody404StatusCode = GetPoolsPoolIdMetadataResponseBody404{getPoolsPoolIdMetadataResponseBody404Error = getPoolsPoolIdMetadataResponseBody404Error,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody404Message = getPoolsPoolIdMetadataResponseBody404Message,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody404StatusCode = getPoolsPoolIdMetadataResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdMetadataResponseBody418 = GetPoolsPoolIdMetadataResponseBody418 {
  -- | error
  getPoolsPoolIdMetadataResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdMetadataResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdMetadataResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdMetadataResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdMetadataResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdMetadataResponseBody418" (\obj -> ((GHC.Base.pure GetPoolsPoolIdMetadataResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdMetadataResponseBody418' with all required fields.
mkGetPoolsPoolIdMetadataResponseBody418 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdMetadataResponseBody418StatusCode'
  -> GetPoolsPoolIdMetadataResponseBody418
mkGetPoolsPoolIdMetadataResponseBody418 getPoolsPoolIdMetadataResponseBody418Error getPoolsPoolIdMetadataResponseBody418Message getPoolsPoolIdMetadataResponseBody418StatusCode = GetPoolsPoolIdMetadataResponseBody418{getPoolsPoolIdMetadataResponseBody418Error = getPoolsPoolIdMetadataResponseBody418Error,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody418Message = getPoolsPoolIdMetadataResponseBody418Message,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody418StatusCode = getPoolsPoolIdMetadataResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdMetadataResponseBody429 = GetPoolsPoolIdMetadataResponseBody429 {
  -- | error
  getPoolsPoolIdMetadataResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdMetadataResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdMetadataResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdMetadataResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdMetadataResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdMetadataResponseBody429" (\obj -> ((GHC.Base.pure GetPoolsPoolIdMetadataResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdMetadataResponseBody429' with all required fields.
mkGetPoolsPoolIdMetadataResponseBody429 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdMetadataResponseBody429StatusCode'
  -> GetPoolsPoolIdMetadataResponseBody429
mkGetPoolsPoolIdMetadataResponseBody429 getPoolsPoolIdMetadataResponseBody429Error getPoolsPoolIdMetadataResponseBody429Message getPoolsPoolIdMetadataResponseBody429StatusCode = GetPoolsPoolIdMetadataResponseBody429{getPoolsPoolIdMetadataResponseBody429Error = getPoolsPoolIdMetadataResponseBody429Error,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody429Message = getPoolsPoolIdMetadataResponseBody429Message,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody429StatusCode = getPoolsPoolIdMetadataResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdMetadataResponseBody500 = GetPoolsPoolIdMetadataResponseBody500 {
  -- | error
  getPoolsPoolIdMetadataResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdMetadataResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdMetadataResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdMetadataResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdMetadataResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdMetadataResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdMetadataResponseBody500" (\obj -> ((GHC.Base.pure GetPoolsPoolIdMetadataResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdMetadataResponseBody500' with all required fields.
mkGetPoolsPoolIdMetadataResponseBody500 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdMetadataResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdMetadataResponseBody500StatusCode'
  -> GetPoolsPoolIdMetadataResponseBody500
mkGetPoolsPoolIdMetadataResponseBody500 getPoolsPoolIdMetadataResponseBody500Error getPoolsPoolIdMetadataResponseBody500Message getPoolsPoolIdMetadataResponseBody500StatusCode = GetPoolsPoolIdMetadataResponseBody500{getPoolsPoolIdMetadataResponseBody500Error = getPoolsPoolIdMetadataResponseBody500Error,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody500Message = getPoolsPoolIdMetadataResponseBody500Message,
                                                                                                                                                                                                                        getPoolsPoolIdMetadataResponseBody500StatusCode = getPoolsPoolIdMetadataResponseBody500StatusCode}
-- | > GET /pools/{pool_id}/metadata
-- 
-- The same as 'getPools_PoolId_Metadata' but accepts an explicit configuration.
getPools_PoolId_MetadataWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> m (Network.HTTP.Client.Types.Response GetPoolsPoolIdMetadataResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_MetadataWithConfiguration config
                                          poolId = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdMetadataResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdMetadataResponseBody200)
                                                                                                                                                                                                    | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsPoolIdMetadataResponseBody400)
                                                                                                                                                                                                    | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsPoolIdMetadataResponseBody403)
                                                                                                                                                                                                    | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsPoolIdMetadataResponseBody404)
                                                                                                                                                                                                    | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsPoolIdMetadataResponseBody418)
                                                                                                                                                                                                    | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsPoolIdMetadataResponseBody429)
                                                                                                                                                                                                    | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdMetadataResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsPoolIdMetadataResponseBody500)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ "/metadata"))) GHC.Base.mempty)
-- | > GET /pools/{pool_id}/metadata
-- 
-- The same as 'getPools_PoolId_Metadata' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_MetadataRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_MetadataRaw poolId = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ "/metadata"))) GHC.Base.mempty)
-- | > GET /pools/{pool_id}/metadata
-- 
-- The same as 'getPools_PoolId_Metadata' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_MetadataWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_MetadataWithConfigurationRaw config
                                             poolId = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ "/metadata"))) GHC.Base.mempty)
