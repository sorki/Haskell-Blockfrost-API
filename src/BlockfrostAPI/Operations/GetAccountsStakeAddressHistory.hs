-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccounts_StakeAddress_History
module BlockfrostAPI.Operations.GetAccountsStakeAddressHistory where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /accounts/{stake_address}/history
-- 
-- Obtain information about the history of a specific account.
getAccounts_StakeAddress_History :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressHistoryResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_History parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressHistoryResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     AccountHistoryContents)
                                                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressHistoryResponseBody400)
                                                                                                                                                                                                       | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressHistoryResponseBody403)
                                                                                                                                                                                                       | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressHistoryResponseBody404)
                                                                                                                                                                                                       | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressHistoryResponseBody418)
                                                                                                                                                                                                       | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressHistoryResponseBody429)
                                                                                                                                                                                                       | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressHistoryResponseBody500)
                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressHistoryParametersPathStakeAddress parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/accounts\/{stake_address}\/history.GET.parameters@ in the specification.
-- 
-- 
data GetAccountsStakeAddressHistoryParameters = GetAccountsStakeAddressHistoryParameters {
  -- | pathStake_address: Represents the parameter named \'stake_address\'
  -- 
  -- Bech32 stake address.
  getAccountsStakeAddressHistoryParametersPathStakeAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAccountsStakeAddressHistoryParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAccountsStakeAddressHistoryParametersQueryOrder :: (GHC.Maybe.Maybe GetAccountsStakeAddressHistoryParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAccountsStakeAddressHistoryParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressHistoryParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryParametersPathStakeAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryParametersPathStakeAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressHistoryParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressHistoryParameters" (\obj -> (((GHC.Base.pure GetAccountsStakeAddressHistoryParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathStake_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAccountsStakeAddressHistoryParameters' with all required fields.
mkGetAccountsStakeAddressHistoryParameters :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryParametersPathStakeAddress'
  -> GetAccountsStakeAddressHistoryParameters
mkGetAccountsStakeAddressHistoryParameters getAccountsStakeAddressHistoryParametersPathStakeAddress = GetAccountsStakeAddressHistoryParameters{getAccountsStakeAddressHistoryParametersPathStakeAddress = getAccountsStakeAddressHistoryParametersPathStakeAddress,
                                                                                                                                               getAccountsStakeAddressHistoryParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                               getAccountsStakeAddressHistoryParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                               getAccountsStakeAddressHistoryParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/accounts\/{stake_address}\/history.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAccountsStakeAddressHistoryParametersQueryOrder' =
   GetAccountsStakeAddressHistoryParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAccountsStakeAddressHistoryParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAccountsStakeAddressHistoryParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAccountsStakeAddressHistoryParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressHistoryParametersQueryOrder'
    where toJSON (GetAccountsStakeAddressHistoryParametersQueryOrder'Other val) = val
          toJSON (GetAccountsStakeAddressHistoryParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAccountsStakeAddressHistoryParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAccountsStakeAddressHistoryParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressHistoryParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAccountsStakeAddressHistoryParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAccountsStakeAddressHistoryParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAccountsStakeAddressHistoryParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAccounts_StakeAddress_History'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountsStakeAddressHistoryResponseError' is used.
data GetAccountsStakeAddressHistoryResponse =
   GetAccountsStakeAddressHistoryResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountsStakeAddressHistoryResponse200 AccountHistoryContents -- ^ Return the account content.
  | GetAccountsStakeAddressHistoryResponse400 GetAccountsStakeAddressHistoryResponseBody400 -- ^ Bad request
  | GetAccountsStakeAddressHistoryResponse403 GetAccountsStakeAddressHistoryResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAccountsStakeAddressHistoryResponse404 GetAccountsStakeAddressHistoryResponseBody404 -- ^ Component not found
  | GetAccountsStakeAddressHistoryResponse418 GetAccountsStakeAddressHistoryResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAccountsStakeAddressHistoryResponse429 GetAccountsStakeAddressHistoryResponseBody429 -- ^ Usage limit reached
  | GetAccountsStakeAddressHistoryResponse500 GetAccountsStakeAddressHistoryResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressHistoryResponseBody400 = GetAccountsStakeAddressHistoryResponseBody400 {
  -- | error
  getAccountsStakeAddressHistoryResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressHistoryResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressHistoryResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressHistoryResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressHistoryResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressHistoryResponseBody400" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressHistoryResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressHistoryResponseBody400' with all required fields.
mkGetAccountsStakeAddressHistoryResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressHistoryResponseBody400StatusCode'
  -> GetAccountsStakeAddressHistoryResponseBody400
mkGetAccountsStakeAddressHistoryResponseBody400 getAccountsStakeAddressHistoryResponseBody400Error getAccountsStakeAddressHistoryResponseBody400Message getAccountsStakeAddressHistoryResponseBody400StatusCode = GetAccountsStakeAddressHistoryResponseBody400{getAccountsStakeAddressHistoryResponseBody400Error = getAccountsStakeAddressHistoryResponseBody400Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody400Message = getAccountsStakeAddressHistoryResponseBody400Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody400StatusCode = getAccountsStakeAddressHistoryResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressHistoryResponseBody403 = GetAccountsStakeAddressHistoryResponseBody403 {
  -- | error
  getAccountsStakeAddressHistoryResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressHistoryResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressHistoryResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressHistoryResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressHistoryResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressHistoryResponseBody403" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressHistoryResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressHistoryResponseBody403' with all required fields.
mkGetAccountsStakeAddressHistoryResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressHistoryResponseBody403StatusCode'
  -> GetAccountsStakeAddressHistoryResponseBody403
mkGetAccountsStakeAddressHistoryResponseBody403 getAccountsStakeAddressHistoryResponseBody403Error getAccountsStakeAddressHistoryResponseBody403Message getAccountsStakeAddressHistoryResponseBody403StatusCode = GetAccountsStakeAddressHistoryResponseBody403{getAccountsStakeAddressHistoryResponseBody403Error = getAccountsStakeAddressHistoryResponseBody403Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody403Message = getAccountsStakeAddressHistoryResponseBody403Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody403StatusCode = getAccountsStakeAddressHistoryResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressHistoryResponseBody404 = GetAccountsStakeAddressHistoryResponseBody404 {
  -- | error
  getAccountsStakeAddressHistoryResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressHistoryResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressHistoryResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressHistoryResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressHistoryResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressHistoryResponseBody404" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressHistoryResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressHistoryResponseBody404' with all required fields.
mkGetAccountsStakeAddressHistoryResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressHistoryResponseBody404StatusCode'
  -> GetAccountsStakeAddressHistoryResponseBody404
mkGetAccountsStakeAddressHistoryResponseBody404 getAccountsStakeAddressHistoryResponseBody404Error getAccountsStakeAddressHistoryResponseBody404Message getAccountsStakeAddressHistoryResponseBody404StatusCode = GetAccountsStakeAddressHistoryResponseBody404{getAccountsStakeAddressHistoryResponseBody404Error = getAccountsStakeAddressHistoryResponseBody404Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody404Message = getAccountsStakeAddressHistoryResponseBody404Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody404StatusCode = getAccountsStakeAddressHistoryResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressHistoryResponseBody418 = GetAccountsStakeAddressHistoryResponseBody418 {
  -- | error
  getAccountsStakeAddressHistoryResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressHistoryResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressHistoryResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressHistoryResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressHistoryResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressHistoryResponseBody418" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressHistoryResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressHistoryResponseBody418' with all required fields.
mkGetAccountsStakeAddressHistoryResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressHistoryResponseBody418StatusCode'
  -> GetAccountsStakeAddressHistoryResponseBody418
mkGetAccountsStakeAddressHistoryResponseBody418 getAccountsStakeAddressHistoryResponseBody418Error getAccountsStakeAddressHistoryResponseBody418Message getAccountsStakeAddressHistoryResponseBody418StatusCode = GetAccountsStakeAddressHistoryResponseBody418{getAccountsStakeAddressHistoryResponseBody418Error = getAccountsStakeAddressHistoryResponseBody418Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody418Message = getAccountsStakeAddressHistoryResponseBody418Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody418StatusCode = getAccountsStakeAddressHistoryResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressHistoryResponseBody429 = GetAccountsStakeAddressHistoryResponseBody429 {
  -- | error
  getAccountsStakeAddressHistoryResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressHistoryResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressHistoryResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressHistoryResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressHistoryResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressHistoryResponseBody429" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressHistoryResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressHistoryResponseBody429' with all required fields.
mkGetAccountsStakeAddressHistoryResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressHistoryResponseBody429StatusCode'
  -> GetAccountsStakeAddressHistoryResponseBody429
mkGetAccountsStakeAddressHistoryResponseBody429 getAccountsStakeAddressHistoryResponseBody429Error getAccountsStakeAddressHistoryResponseBody429Message getAccountsStakeAddressHistoryResponseBody429StatusCode = GetAccountsStakeAddressHistoryResponseBody429{getAccountsStakeAddressHistoryResponseBody429Error = getAccountsStakeAddressHistoryResponseBody429Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody429Message = getAccountsStakeAddressHistoryResponseBody429Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody429StatusCode = getAccountsStakeAddressHistoryResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressHistoryResponseBody500 = GetAccountsStakeAddressHistoryResponseBody500 {
  -- | error
  getAccountsStakeAddressHistoryResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressHistoryResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressHistoryResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressHistoryResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressHistoryResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressHistoryResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressHistoryResponseBody500" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressHistoryResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressHistoryResponseBody500' with all required fields.
mkGetAccountsStakeAddressHistoryResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressHistoryResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressHistoryResponseBody500StatusCode'
  -> GetAccountsStakeAddressHistoryResponseBody500
mkGetAccountsStakeAddressHistoryResponseBody500 getAccountsStakeAddressHistoryResponseBody500Error getAccountsStakeAddressHistoryResponseBody500Message getAccountsStakeAddressHistoryResponseBody500StatusCode = GetAccountsStakeAddressHistoryResponseBody500{getAccountsStakeAddressHistoryResponseBody500Error = getAccountsStakeAddressHistoryResponseBody500Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody500Message = getAccountsStakeAddressHistoryResponseBody500Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressHistoryResponseBody500StatusCode = getAccountsStakeAddressHistoryResponseBody500StatusCode}
-- | > GET /accounts/{stake_address}/history
-- 
-- The same as 'getAccounts_StakeAddress_History' but accepts an explicit configuration.
getAccounts_StakeAddress_HistoryWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressHistoryResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_HistoryWithConfiguration config
                                                  parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressHistoryResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      AccountHistoryContents)
                                                                                                                                                                                                                        | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressHistoryResponseBody400)
                                                                                                                                                                                                                        | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressHistoryResponseBody403)
                                                                                                                                                                                                                        | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressHistoryResponseBody404)
                                                                                                                                                                                                                        | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressHistoryResponseBody418)
                                                                                                                                                                                                                        | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressHistoryResponseBody429)
                                                                                                                                                                                                                        | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressHistoryResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressHistoryResponseBody500)
                                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressHistoryParametersPathStakeAddress parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/history
-- 
-- The same as 'getAccounts_StakeAddress_History' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_HistoryRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_HistoryRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressHistoryParametersPathStakeAddress parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/history
-- 
-- The same as 'getAccounts_StakeAddress_History' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_HistoryWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_HistoryWithConfigurationRaw config
                                                     parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressHistoryParametersPathStakeAddress parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
