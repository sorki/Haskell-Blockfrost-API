-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAddresses_Address_Transactions
module BlockfrostAPI.Operations.GetAddressesAddressTransactions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /addresses/{address}/transactions
-- 
-- Transactions on the address.
getAddresses_Address_Transactions :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAddressesAddressTransactionsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAddressesAddressTransactionsResponse) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_Transactions parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAddressesAddressTransactionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AddressTransactionsContent)
                                                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAddressesAddressTransactionsResponseBody400)
                                                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAddressesAddressTransactionsResponseBody403)
                                                                                                                                                                                                         | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAddressesAddressTransactionsResponseBody404)
                                                                                                                                                                                                         | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAddressesAddressTransactionsResponseBody418)
                                                                                                                                                                                                         | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAddressesAddressTransactionsResponseBody429)
                                                                                                                                                                                                         | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAddressesAddressTransactionsResponseBody500)
                                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressTransactionsParametersPathAddress parameters))) GHC.Base.++ "/transactions"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "from") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryFrom parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "to") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryTo parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/addresses\/{address}\/transactions.GET.parameters@ in the specification.
-- 
-- 
data GetAddressesAddressTransactionsParameters = GetAddressesAddressTransactionsParameters {
  -- | pathAddress: Represents the parameter named \'address\'
  -- 
  -- Bech32 address.
  getAddressesAddressTransactionsParametersPathAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The numbers of pools per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAddressesAddressTransactionsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryFrom: Represents the parameter named \'from\'
  -- 
  -- The block number and optionally also index from which (inclusive) to start search for results, concatenated using colon.
  -- Has to be lower than or equal to \`to\` parameter.
  , getAddressesAddressTransactionsParametersQueryFrom :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAddressesAddressTransactionsParametersQueryOrder :: (GHC.Maybe.Maybe GetAddressesAddressTransactionsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAddressesAddressTransactionsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryTo: Represents the parameter named \'to\'
  -- 
  -- The block number and optionally also index where (inclusive) to end the search for results, concatenated using colon.
  -- Has to be higher than or equal to \`from\` parameter.
  , getAddressesAddressTransactionsParametersQueryTo :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTransactionsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAddress" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersPathAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersQueryCount obj : "queryFrom" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersQueryFrom obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersQueryPage obj : "queryTo" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersQueryTo obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAddress" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersPathAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersQueryCount obj) GHC.Base.<> (("queryFrom" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersQueryFrom obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersQueryOrder obj) GHC.Base.<> (("queryPage" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersQueryPage obj) GHC.Base.<> ("queryTo" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsParametersQueryTo obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTransactionsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTransactionsParameters" (\obj -> (((((GHC.Base.pure GetAddressesAddressTransactionsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryFrom")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryTo"))
-- | Create a new 'GetAddressesAddressTransactionsParameters' with all required fields.
mkGetAddressesAddressTransactionsParameters :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsParametersPathAddress'
  -> GetAddressesAddressTransactionsParameters
mkGetAddressesAddressTransactionsParameters getAddressesAddressTransactionsParametersPathAddress = GetAddressesAddressTransactionsParameters{getAddressesAddressTransactionsParametersPathAddress = getAddressesAddressTransactionsParametersPathAddress,
                                                                                                                                             getAddressesAddressTransactionsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                             getAddressesAddressTransactionsParametersQueryFrom = GHC.Maybe.Nothing,
                                                                                                                                             getAddressesAddressTransactionsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                             getAddressesAddressTransactionsParametersQueryPage = GHC.Maybe.Nothing,
                                                                                                                                             getAddressesAddressTransactionsParametersQueryTo = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/addresses\/{address}\/transactions.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAddressesAddressTransactionsParametersQueryOrder' =
   GetAddressesAddressTransactionsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAddressesAddressTransactionsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAddressesAddressTransactionsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAddressesAddressTransactionsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTransactionsParametersQueryOrder'
    where toJSON (GetAddressesAddressTransactionsParametersQueryOrder'Other val) = val
          toJSON (GetAddressesAddressTransactionsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAddressesAddressTransactionsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAddressesAddressTransactionsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTransactionsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAddressesAddressTransactionsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAddressesAddressTransactionsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAddressesAddressTransactionsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAddresses_Address_Transactions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAddressesAddressTransactionsResponseError' is used.
data GetAddressesAddressTransactionsResponse =
   GetAddressesAddressTransactionsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAddressesAddressTransactionsResponse200 AddressTransactionsContent -- ^ Return the address content
  | GetAddressesAddressTransactionsResponse400 GetAddressesAddressTransactionsResponseBody400 -- ^ Bad request
  | GetAddressesAddressTransactionsResponse403 GetAddressesAddressTransactionsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAddressesAddressTransactionsResponse404 GetAddressesAddressTransactionsResponseBody404 -- ^ Component not found
  | GetAddressesAddressTransactionsResponse418 GetAddressesAddressTransactionsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAddressesAddressTransactionsResponse429 GetAddressesAddressTransactionsResponseBody429 -- ^ Usage limit reached
  | GetAddressesAddressTransactionsResponse500 GetAddressesAddressTransactionsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTransactionsResponseBody400 = GetAddressesAddressTransactionsResponseBody400 {
  -- | error
  getAddressesAddressTransactionsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTransactionsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTransactionsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTransactionsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTransactionsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTransactionsResponseBody400" (\obj -> ((GHC.Base.pure GetAddressesAddressTransactionsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTransactionsResponseBody400' with all required fields.
mkGetAddressesAddressTransactionsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTransactionsResponseBody400StatusCode'
  -> GetAddressesAddressTransactionsResponseBody400
mkGetAddressesAddressTransactionsResponseBody400 getAddressesAddressTransactionsResponseBody400Error getAddressesAddressTransactionsResponseBody400Message getAddressesAddressTransactionsResponseBody400StatusCode = GetAddressesAddressTransactionsResponseBody400{getAddressesAddressTransactionsResponseBody400Error = getAddressesAddressTransactionsResponseBody400Error,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody400Message = getAddressesAddressTransactionsResponseBody400Message,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody400StatusCode = getAddressesAddressTransactionsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTransactionsResponseBody403 = GetAddressesAddressTransactionsResponseBody403 {
  -- | error
  getAddressesAddressTransactionsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTransactionsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTransactionsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTransactionsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTransactionsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTransactionsResponseBody403" (\obj -> ((GHC.Base.pure GetAddressesAddressTransactionsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTransactionsResponseBody403' with all required fields.
mkGetAddressesAddressTransactionsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTransactionsResponseBody403StatusCode'
  -> GetAddressesAddressTransactionsResponseBody403
mkGetAddressesAddressTransactionsResponseBody403 getAddressesAddressTransactionsResponseBody403Error getAddressesAddressTransactionsResponseBody403Message getAddressesAddressTransactionsResponseBody403StatusCode = GetAddressesAddressTransactionsResponseBody403{getAddressesAddressTransactionsResponseBody403Error = getAddressesAddressTransactionsResponseBody403Error,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody403Message = getAddressesAddressTransactionsResponseBody403Message,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody403StatusCode = getAddressesAddressTransactionsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTransactionsResponseBody404 = GetAddressesAddressTransactionsResponseBody404 {
  -- | error
  getAddressesAddressTransactionsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTransactionsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTransactionsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTransactionsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTransactionsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTransactionsResponseBody404" (\obj -> ((GHC.Base.pure GetAddressesAddressTransactionsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTransactionsResponseBody404' with all required fields.
mkGetAddressesAddressTransactionsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTransactionsResponseBody404StatusCode'
  -> GetAddressesAddressTransactionsResponseBody404
mkGetAddressesAddressTransactionsResponseBody404 getAddressesAddressTransactionsResponseBody404Error getAddressesAddressTransactionsResponseBody404Message getAddressesAddressTransactionsResponseBody404StatusCode = GetAddressesAddressTransactionsResponseBody404{getAddressesAddressTransactionsResponseBody404Error = getAddressesAddressTransactionsResponseBody404Error,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody404Message = getAddressesAddressTransactionsResponseBody404Message,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody404StatusCode = getAddressesAddressTransactionsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTransactionsResponseBody418 = GetAddressesAddressTransactionsResponseBody418 {
  -- | error
  getAddressesAddressTransactionsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTransactionsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTransactionsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTransactionsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTransactionsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTransactionsResponseBody418" (\obj -> ((GHC.Base.pure GetAddressesAddressTransactionsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTransactionsResponseBody418' with all required fields.
mkGetAddressesAddressTransactionsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTransactionsResponseBody418StatusCode'
  -> GetAddressesAddressTransactionsResponseBody418
mkGetAddressesAddressTransactionsResponseBody418 getAddressesAddressTransactionsResponseBody418Error getAddressesAddressTransactionsResponseBody418Message getAddressesAddressTransactionsResponseBody418StatusCode = GetAddressesAddressTransactionsResponseBody418{getAddressesAddressTransactionsResponseBody418Error = getAddressesAddressTransactionsResponseBody418Error,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody418Message = getAddressesAddressTransactionsResponseBody418Message,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody418StatusCode = getAddressesAddressTransactionsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTransactionsResponseBody429 = GetAddressesAddressTransactionsResponseBody429 {
  -- | error
  getAddressesAddressTransactionsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTransactionsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTransactionsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTransactionsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTransactionsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTransactionsResponseBody429" (\obj -> ((GHC.Base.pure GetAddressesAddressTransactionsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTransactionsResponseBody429' with all required fields.
mkGetAddressesAddressTransactionsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTransactionsResponseBody429StatusCode'
  -> GetAddressesAddressTransactionsResponseBody429
mkGetAddressesAddressTransactionsResponseBody429 getAddressesAddressTransactionsResponseBody429Error getAddressesAddressTransactionsResponseBody429Message getAddressesAddressTransactionsResponseBody429StatusCode = GetAddressesAddressTransactionsResponseBody429{getAddressesAddressTransactionsResponseBody429Error = getAddressesAddressTransactionsResponseBody429Error,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody429Message = getAddressesAddressTransactionsResponseBody429Message,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody429StatusCode = getAddressesAddressTransactionsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTransactionsResponseBody500 = GetAddressesAddressTransactionsResponseBody500 {
  -- | error
  getAddressesAddressTransactionsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTransactionsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTransactionsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTransactionsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTransactionsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTransactionsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTransactionsResponseBody500" (\obj -> ((GHC.Base.pure GetAddressesAddressTransactionsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTransactionsResponseBody500' with all required fields.
mkGetAddressesAddressTransactionsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTransactionsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTransactionsResponseBody500StatusCode'
  -> GetAddressesAddressTransactionsResponseBody500
mkGetAddressesAddressTransactionsResponseBody500 getAddressesAddressTransactionsResponseBody500Error getAddressesAddressTransactionsResponseBody500Message getAddressesAddressTransactionsResponseBody500StatusCode = GetAddressesAddressTransactionsResponseBody500{getAddressesAddressTransactionsResponseBody500Error = getAddressesAddressTransactionsResponseBody500Error,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody500Message = getAddressesAddressTransactionsResponseBody500Message,
                                                                                                                                                                                                                                                                     getAddressesAddressTransactionsResponseBody500StatusCode = getAddressesAddressTransactionsResponseBody500StatusCode}
-- | > GET /addresses/{address}/transactions
-- 
-- The same as 'getAddresses_Address_Transactions' but accepts an explicit configuration.
getAddresses_Address_TransactionsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAddressesAddressTransactionsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAddressesAddressTransactionsResponse) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_TransactionsWithConfiguration config
                                                   parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAddressesAddressTransactionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         AddressTransactionsContent)
                                                                                                                                                                                                                          | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAddressesAddressTransactionsResponseBody400)
                                                                                                                                                                                                                          | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAddressesAddressTransactionsResponseBody403)
                                                                                                                                                                                                                          | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAddressesAddressTransactionsResponseBody404)
                                                                                                                                                                                                                          | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAddressesAddressTransactionsResponseBody418)
                                                                                                                                                                                                                          | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAddressesAddressTransactionsResponseBody429)
                                                                                                                                                                                                                          | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTransactionsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetAddressesAddressTransactionsResponseBody500)
                                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressTransactionsParametersPathAddress parameters))) GHC.Base.++ "/transactions"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "from") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryFrom parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "to") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryTo parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /addresses/{address}/transactions
-- 
-- The same as 'getAddresses_Address_Transactions' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAddresses_Address_TransactionsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAddressesAddressTransactionsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_TransactionsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressTransactionsParametersPathAddress parameters))) GHC.Base.++ "/transactions"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "from") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryFrom parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "to") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryTo parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /addresses/{address}/transactions
-- 
-- The same as 'getAddresses_Address_Transactions' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAddresses_Address_TransactionsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAddressesAddressTransactionsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_TransactionsWithConfigurationRaw config
                                                      parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressTransactionsParametersPathAddress parameters))) GHC.Base.++ "/transactions"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                BlockfrostAPI.Common.QueryParameter (Data.Text.pack "from") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryFrom parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                BlockfrostAPI.Common.QueryParameter (Data.Text.pack "to") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTransactionsParametersQueryTo parameters) (Data.Text.pack "form") GHC.Types.False])
