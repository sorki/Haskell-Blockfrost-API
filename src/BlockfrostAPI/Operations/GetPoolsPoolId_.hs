-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPools_PoolId_
module BlockfrostAPI.Operations.GetPoolsPoolId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /pools/{pool_id}
-- 
-- Pool information.
getPools_PoolId_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetPoolsPoolIdResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_ poolId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 Pool)
                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 GetPoolsPoolIdResponseBody400)
                                                                                                                                                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 GetPoolsPoolIdResponseBody403)
                                                                                                                                                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 GetPoolsPoolIdResponseBody404)
                                                                                                                                                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 GetPoolsPoolIdResponseBody418)
                                                                                                                                                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 GetPoolsPoolIdResponseBody429)
                                                                                                                                                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 GetPoolsPoolIdResponseBody500)
                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getPools_PoolId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPoolsPoolIdResponseError' is used.
data GetPoolsPoolIdResponse =
   GetPoolsPoolIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPoolsPoolIdResponse200 Pool -- ^ Return the pool information content
  | GetPoolsPoolIdResponse400 GetPoolsPoolIdResponseBody400 -- ^ Bad request
  | GetPoolsPoolIdResponse403 GetPoolsPoolIdResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetPoolsPoolIdResponse404 GetPoolsPoolIdResponseBody404 -- ^ Component not found
  | GetPoolsPoolIdResponse418 GetPoolsPoolIdResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetPoolsPoolIdResponse429 GetPoolsPoolIdResponseBody429 -- ^ Usage limit reached
  | GetPoolsPoolIdResponse500 GetPoolsPoolIdResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdResponseBody400 = GetPoolsPoolIdResponseBody400 {
  -- | error
  getPoolsPoolIdResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdResponseBody400" (\obj -> ((GHC.Base.pure GetPoolsPoolIdResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdResponseBody400' with all required fields.
mkGetPoolsPoolIdResponseBody400 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdResponseBody400StatusCode'
  -> GetPoolsPoolIdResponseBody400
mkGetPoolsPoolIdResponseBody400 getPoolsPoolIdResponseBody400Error getPoolsPoolIdResponseBody400Message getPoolsPoolIdResponseBody400StatusCode = GetPoolsPoolIdResponseBody400{getPoolsPoolIdResponseBody400Error = getPoolsPoolIdResponseBody400Error,
                                                                                                                                                                                getPoolsPoolIdResponseBody400Message = getPoolsPoolIdResponseBody400Message,
                                                                                                                                                                                getPoolsPoolIdResponseBody400StatusCode = getPoolsPoolIdResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdResponseBody403 = GetPoolsPoolIdResponseBody403 {
  -- | error
  getPoolsPoolIdResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdResponseBody403" (\obj -> ((GHC.Base.pure GetPoolsPoolIdResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdResponseBody403' with all required fields.
mkGetPoolsPoolIdResponseBody403 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdResponseBody403StatusCode'
  -> GetPoolsPoolIdResponseBody403
mkGetPoolsPoolIdResponseBody403 getPoolsPoolIdResponseBody403Error getPoolsPoolIdResponseBody403Message getPoolsPoolIdResponseBody403StatusCode = GetPoolsPoolIdResponseBody403{getPoolsPoolIdResponseBody403Error = getPoolsPoolIdResponseBody403Error,
                                                                                                                                                                                getPoolsPoolIdResponseBody403Message = getPoolsPoolIdResponseBody403Message,
                                                                                                                                                                                getPoolsPoolIdResponseBody403StatusCode = getPoolsPoolIdResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdResponseBody404 = GetPoolsPoolIdResponseBody404 {
  -- | error
  getPoolsPoolIdResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdResponseBody404" (\obj -> ((GHC.Base.pure GetPoolsPoolIdResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdResponseBody404' with all required fields.
mkGetPoolsPoolIdResponseBody404 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdResponseBody404StatusCode'
  -> GetPoolsPoolIdResponseBody404
mkGetPoolsPoolIdResponseBody404 getPoolsPoolIdResponseBody404Error getPoolsPoolIdResponseBody404Message getPoolsPoolIdResponseBody404StatusCode = GetPoolsPoolIdResponseBody404{getPoolsPoolIdResponseBody404Error = getPoolsPoolIdResponseBody404Error,
                                                                                                                                                                                getPoolsPoolIdResponseBody404Message = getPoolsPoolIdResponseBody404Message,
                                                                                                                                                                                getPoolsPoolIdResponseBody404StatusCode = getPoolsPoolIdResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdResponseBody418 = GetPoolsPoolIdResponseBody418 {
  -- | error
  getPoolsPoolIdResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdResponseBody418" (\obj -> ((GHC.Base.pure GetPoolsPoolIdResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdResponseBody418' with all required fields.
mkGetPoolsPoolIdResponseBody418 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdResponseBody418StatusCode'
  -> GetPoolsPoolIdResponseBody418
mkGetPoolsPoolIdResponseBody418 getPoolsPoolIdResponseBody418Error getPoolsPoolIdResponseBody418Message getPoolsPoolIdResponseBody418StatusCode = GetPoolsPoolIdResponseBody418{getPoolsPoolIdResponseBody418Error = getPoolsPoolIdResponseBody418Error,
                                                                                                                                                                                getPoolsPoolIdResponseBody418Message = getPoolsPoolIdResponseBody418Message,
                                                                                                                                                                                getPoolsPoolIdResponseBody418StatusCode = getPoolsPoolIdResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdResponseBody429 = GetPoolsPoolIdResponseBody429 {
  -- | error
  getPoolsPoolIdResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdResponseBody429" (\obj -> ((GHC.Base.pure GetPoolsPoolIdResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdResponseBody429' with all required fields.
mkGetPoolsPoolIdResponseBody429 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdResponseBody429StatusCode'
  -> GetPoolsPoolIdResponseBody429
mkGetPoolsPoolIdResponseBody429 getPoolsPoolIdResponseBody429Error getPoolsPoolIdResponseBody429Message getPoolsPoolIdResponseBody429StatusCode = GetPoolsPoolIdResponseBody429{getPoolsPoolIdResponseBody429Error = getPoolsPoolIdResponseBody429Error,
                                                                                                                                                                                getPoolsPoolIdResponseBody429Message = getPoolsPoolIdResponseBody429Message,
                                                                                                                                                                                getPoolsPoolIdResponseBody429StatusCode = getPoolsPoolIdResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdResponseBody500 = GetPoolsPoolIdResponseBody500 {
  -- | error
  getPoolsPoolIdResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdResponseBody500" (\obj -> ((GHC.Base.pure GetPoolsPoolIdResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdResponseBody500' with all required fields.
mkGetPoolsPoolIdResponseBody500 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdResponseBody500StatusCode'
  -> GetPoolsPoolIdResponseBody500
mkGetPoolsPoolIdResponseBody500 getPoolsPoolIdResponseBody500Error getPoolsPoolIdResponseBody500Message getPoolsPoolIdResponseBody500StatusCode = GetPoolsPoolIdResponseBody500{getPoolsPoolIdResponseBody500Error = getPoolsPoolIdResponseBody500Error,
                                                                                                                                                                                getPoolsPoolIdResponseBody500Message = getPoolsPoolIdResponseBody500Message,
                                                                                                                                                                                getPoolsPoolIdResponseBody500StatusCode = getPoolsPoolIdResponseBody500StatusCode}
-- | > GET /pools/{pool_id}
-- 
-- The same as 'getPools_PoolId_' but accepts an explicit configuration.
getPools_PoolId_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> m (Network.HTTP.Client.Types.Response GetPoolsPoolIdResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_WithConfiguration config
                                  poolId = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  Pool)
                                                                                                                                                                                    | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetPoolsPoolIdResponseBody400)
                                                                                                                                                                                    | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetPoolsPoolIdResponseBody403)
                                                                                                                                                                                    | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetPoolsPoolIdResponseBody404)
                                                                                                                                                                                    | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetPoolsPoolIdResponseBody418)
                                                                                                                                                                                    | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetPoolsPoolIdResponseBody429)
                                                                                                                                                                                    | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetPoolsPoolIdResponseBody500)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /pools/{pool_id}
-- 
-- The same as 'getPools_PoolId_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_Raw poolId = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /pools/{pool_id}
-- 
-- The same as 'getPools_PoolId_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_WithConfigurationRaw config
                                     poolId = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ ""))) GHC.Base.mempty)
