-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAddresses_Address_Txs
module BlockfrostAPI.Operations.GetAddressesAddressTxs where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /addresses/{address}/txs
-- 
-- Transactions on the address.
getAddresses_Address_Txs :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAddressesAddressTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAddressesAddressTxsResponse) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_Txs parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAddressesAddressTxsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             AddressTxsContent)
                                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAddressesAddressTxsResponseBody400)
                                                                                                                                                                                       | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAddressesAddressTxsResponseBody403)
                                                                                                                                                                                       | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAddressesAddressTxsResponseBody404)
                                                                                                                                                                                       | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAddressesAddressTxsResponseBody418)
                                                                                                                                                                                       | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAddressesAddressTxsResponseBody429)
                                                                                                                                                                                       | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAddressesAddressTxsResponseBody500)
                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressTxsParametersPathAddress parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/addresses\/{address}\/txs.GET.parameters@ in the specification.
-- 
-- 
data GetAddressesAddressTxsParameters = GetAddressesAddressTxsParameters {
  -- | pathAddress: Represents the parameter named \'address\'
  -- 
  -- Bech32 address.
  getAddressesAddressTxsParametersPathAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The numbers of pools per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAddressesAddressTxsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAddressesAddressTxsParametersQueryOrder :: (GHC.Maybe.Maybe GetAddressesAddressTxsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAddressesAddressTxsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTxsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAddress" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsParametersPathAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAddress" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsParametersPathAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTxsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTxsParameters" (\obj -> (((GHC.Base.pure GetAddressesAddressTxsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAddressesAddressTxsParameters' with all required fields.
mkGetAddressesAddressTxsParameters :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsParametersPathAddress'
  -> GetAddressesAddressTxsParameters
mkGetAddressesAddressTxsParameters getAddressesAddressTxsParametersPathAddress = GetAddressesAddressTxsParameters{getAddressesAddressTxsParametersPathAddress = getAddressesAddressTxsParametersPathAddress,
                                                                                                                  getAddressesAddressTxsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                  getAddressesAddressTxsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                  getAddressesAddressTxsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/addresses\/{address}\/txs.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAddressesAddressTxsParametersQueryOrder' =
   GetAddressesAddressTxsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAddressesAddressTxsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAddressesAddressTxsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAddressesAddressTxsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTxsParametersQueryOrder'
    where toJSON (GetAddressesAddressTxsParametersQueryOrder'Other val) = val
          toJSON (GetAddressesAddressTxsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAddressesAddressTxsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAddressesAddressTxsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTxsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAddressesAddressTxsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAddressesAddressTxsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAddressesAddressTxsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAddresses_Address_Txs'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAddressesAddressTxsResponseError' is used.
data GetAddressesAddressTxsResponse =
   GetAddressesAddressTxsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAddressesAddressTxsResponse200 AddressTxsContent -- ^ Return the address content
  | GetAddressesAddressTxsResponse400 GetAddressesAddressTxsResponseBody400 -- ^ Bad request
  | GetAddressesAddressTxsResponse403 GetAddressesAddressTxsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAddressesAddressTxsResponse404 GetAddressesAddressTxsResponseBody404 -- ^ Component not found
  | GetAddressesAddressTxsResponse418 GetAddressesAddressTxsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAddressesAddressTxsResponse429 GetAddressesAddressTxsResponseBody429 -- ^ Usage limit reached
  | GetAddressesAddressTxsResponse500 GetAddressesAddressTxsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTxsResponseBody400 = GetAddressesAddressTxsResponseBody400 {
  -- | error
  getAddressesAddressTxsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTxsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTxsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTxsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTxsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTxsResponseBody400" (\obj -> ((GHC.Base.pure GetAddressesAddressTxsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTxsResponseBody400' with all required fields.
mkGetAddressesAddressTxsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTxsResponseBody400StatusCode'
  -> GetAddressesAddressTxsResponseBody400
mkGetAddressesAddressTxsResponseBody400 getAddressesAddressTxsResponseBody400Error getAddressesAddressTxsResponseBody400Message getAddressesAddressTxsResponseBody400StatusCode = GetAddressesAddressTxsResponseBody400{getAddressesAddressTxsResponseBody400Error = getAddressesAddressTxsResponseBody400Error,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody400Message = getAddressesAddressTxsResponseBody400Message,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody400StatusCode = getAddressesAddressTxsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTxsResponseBody403 = GetAddressesAddressTxsResponseBody403 {
  -- | error
  getAddressesAddressTxsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTxsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTxsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTxsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTxsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTxsResponseBody403" (\obj -> ((GHC.Base.pure GetAddressesAddressTxsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTxsResponseBody403' with all required fields.
mkGetAddressesAddressTxsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTxsResponseBody403StatusCode'
  -> GetAddressesAddressTxsResponseBody403
mkGetAddressesAddressTxsResponseBody403 getAddressesAddressTxsResponseBody403Error getAddressesAddressTxsResponseBody403Message getAddressesAddressTxsResponseBody403StatusCode = GetAddressesAddressTxsResponseBody403{getAddressesAddressTxsResponseBody403Error = getAddressesAddressTxsResponseBody403Error,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody403Message = getAddressesAddressTxsResponseBody403Message,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody403StatusCode = getAddressesAddressTxsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTxsResponseBody404 = GetAddressesAddressTxsResponseBody404 {
  -- | error
  getAddressesAddressTxsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTxsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTxsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTxsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTxsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTxsResponseBody404" (\obj -> ((GHC.Base.pure GetAddressesAddressTxsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTxsResponseBody404' with all required fields.
mkGetAddressesAddressTxsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTxsResponseBody404StatusCode'
  -> GetAddressesAddressTxsResponseBody404
mkGetAddressesAddressTxsResponseBody404 getAddressesAddressTxsResponseBody404Error getAddressesAddressTxsResponseBody404Message getAddressesAddressTxsResponseBody404StatusCode = GetAddressesAddressTxsResponseBody404{getAddressesAddressTxsResponseBody404Error = getAddressesAddressTxsResponseBody404Error,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody404Message = getAddressesAddressTxsResponseBody404Message,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody404StatusCode = getAddressesAddressTxsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTxsResponseBody418 = GetAddressesAddressTxsResponseBody418 {
  -- | error
  getAddressesAddressTxsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTxsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTxsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTxsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTxsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTxsResponseBody418" (\obj -> ((GHC.Base.pure GetAddressesAddressTxsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTxsResponseBody418' with all required fields.
mkGetAddressesAddressTxsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTxsResponseBody418StatusCode'
  -> GetAddressesAddressTxsResponseBody418
mkGetAddressesAddressTxsResponseBody418 getAddressesAddressTxsResponseBody418Error getAddressesAddressTxsResponseBody418Message getAddressesAddressTxsResponseBody418StatusCode = GetAddressesAddressTxsResponseBody418{getAddressesAddressTxsResponseBody418Error = getAddressesAddressTxsResponseBody418Error,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody418Message = getAddressesAddressTxsResponseBody418Message,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody418StatusCode = getAddressesAddressTxsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTxsResponseBody429 = GetAddressesAddressTxsResponseBody429 {
  -- | error
  getAddressesAddressTxsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTxsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTxsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTxsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTxsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTxsResponseBody429" (\obj -> ((GHC.Base.pure GetAddressesAddressTxsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTxsResponseBody429' with all required fields.
mkGetAddressesAddressTxsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTxsResponseBody429StatusCode'
  -> GetAddressesAddressTxsResponseBody429
mkGetAddressesAddressTxsResponseBody429 getAddressesAddressTxsResponseBody429Error getAddressesAddressTxsResponseBody429Message getAddressesAddressTxsResponseBody429StatusCode = GetAddressesAddressTxsResponseBody429{getAddressesAddressTxsResponseBody429Error = getAddressesAddressTxsResponseBody429Error,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody429Message = getAddressesAddressTxsResponseBody429Message,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody429StatusCode = getAddressesAddressTxsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressTxsResponseBody500 = GetAddressesAddressTxsResponseBody500 {
  -- | error
  getAddressesAddressTxsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressTxsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressTxsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressTxsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressTxsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressTxsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressTxsResponseBody500" (\obj -> ((GHC.Base.pure GetAddressesAddressTxsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressTxsResponseBody500' with all required fields.
mkGetAddressesAddressTxsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressTxsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressTxsResponseBody500StatusCode'
  -> GetAddressesAddressTxsResponseBody500
mkGetAddressesAddressTxsResponseBody500 getAddressesAddressTxsResponseBody500Error getAddressesAddressTxsResponseBody500Message getAddressesAddressTxsResponseBody500StatusCode = GetAddressesAddressTxsResponseBody500{getAddressesAddressTxsResponseBody500Error = getAddressesAddressTxsResponseBody500Error,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody500Message = getAddressesAddressTxsResponseBody500Message,
                                                                                                                                                                                                                        getAddressesAddressTxsResponseBody500StatusCode = getAddressesAddressTxsResponseBody500StatusCode}
-- | > GET /addresses/{address}/txs
-- 
-- The same as 'getAddresses_Address_Txs' but accepts an explicit configuration.
getAddresses_Address_TxsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAddressesAddressTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAddressesAddressTxsResponse) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_TxsWithConfiguration config
                                          parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAddressesAddressTxsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              AddressTxsContent)
                                                                                                                                                                                                        | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTxsResponseBody400)
                                                                                                                                                                                                        | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTxsResponseBody403)
                                                                                                                                                                                                        | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTxsResponseBody404)
                                                                                                                                                                                                        | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTxsResponseBody418)
                                                                                                                                                                                                        | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTxsResponseBody429)
                                                                                                                                                                                                        | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressTxsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAddressesAddressTxsResponseBody500)
                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressTxsParametersPathAddress parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /addresses/{address}/txs
-- 
-- The same as 'getAddresses_Address_Txs' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAddresses_Address_TxsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAddressesAddressTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_TxsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressTxsParametersPathAddress parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                              BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                              BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /addresses/{address}/txs
-- 
-- The same as 'getAddresses_Address_Txs' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAddresses_Address_TxsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAddressesAddressTxsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_TxsWithConfigurationRaw config
                                             parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressTxsParametersPathAddress parameters))) GHC.Base.++ "/txs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressTxsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
