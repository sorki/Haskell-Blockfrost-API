-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccounts_StakeAddress_Rewards
module BlockfrostAPI.Operations.GetAccountsStakeAddressRewards where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /accounts/{stake_address}/rewards
-- 
-- Obtain information about the history of a specific account.
getAccounts_StakeAddress_Rewards :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressRewardsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressRewardsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_Rewards parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressRewardsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     AccountRewardContent)
                                                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressRewardsResponseBody400)
                                                                                                                                                                                                       | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressRewardsResponseBody403)
                                                                                                                                                                                                       | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressRewardsResponseBody404)
                                                                                                                                                                                                       | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressRewardsResponseBody418)
                                                                                                                                                                                                       | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressRewardsResponseBody429)
                                                                                                                                                                                                       | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetAccountsStakeAddressRewardsResponseBody500)
                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressRewardsParametersPathStakeAddress parameters))) GHC.Base.++ "/rewards"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/accounts\/{stake_address}\/rewards.GET.parameters@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRewardsParameters = GetAccountsStakeAddressRewardsParameters {
  -- | pathStake_address: Represents the parameter named \'stake_address\'
  -- 
  -- Bech32 stake address.
  getAccountsStakeAddressRewardsParametersPathStakeAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAccountsStakeAddressRewardsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAccountsStakeAddressRewardsParametersQueryOrder :: (GHC.Maybe.Maybe GetAccountsStakeAddressRewardsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAccountsStakeAddressRewardsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRewardsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsParametersPathStakeAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsParametersPathStakeAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRewardsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRewardsParameters" (\obj -> (((GHC.Base.pure GetAccountsStakeAddressRewardsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathStake_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAccountsStakeAddressRewardsParameters' with all required fields.
mkGetAccountsStakeAddressRewardsParameters :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsParametersPathStakeAddress'
  -> GetAccountsStakeAddressRewardsParameters
mkGetAccountsStakeAddressRewardsParameters getAccountsStakeAddressRewardsParametersPathStakeAddress = GetAccountsStakeAddressRewardsParameters{getAccountsStakeAddressRewardsParametersPathStakeAddress = getAccountsStakeAddressRewardsParametersPathStakeAddress,
                                                                                                                                               getAccountsStakeAddressRewardsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                               getAccountsStakeAddressRewardsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                               getAccountsStakeAddressRewardsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/accounts\/{stake_address}\/rewards.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAccountsStakeAddressRewardsParametersQueryOrder' =
   GetAccountsStakeAddressRewardsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAccountsStakeAddressRewardsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAccountsStakeAddressRewardsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAccountsStakeAddressRewardsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRewardsParametersQueryOrder'
    where toJSON (GetAccountsStakeAddressRewardsParametersQueryOrder'Other val) = val
          toJSON (GetAccountsStakeAddressRewardsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAccountsStakeAddressRewardsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAccountsStakeAddressRewardsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRewardsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAccountsStakeAddressRewardsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAccountsStakeAddressRewardsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAccountsStakeAddressRewardsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAccounts_StakeAddress_Rewards'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountsStakeAddressRewardsResponseError' is used.
data GetAccountsStakeAddressRewardsResponse =
   GetAccountsStakeAddressRewardsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountsStakeAddressRewardsResponse200 AccountRewardContent -- ^ Return the account content.
  | GetAccountsStakeAddressRewardsResponse400 GetAccountsStakeAddressRewardsResponseBody400 -- ^ Bad request
  | GetAccountsStakeAddressRewardsResponse403 GetAccountsStakeAddressRewardsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAccountsStakeAddressRewardsResponse404 GetAccountsStakeAddressRewardsResponseBody404 -- ^ Component not found
  | GetAccountsStakeAddressRewardsResponse418 GetAccountsStakeAddressRewardsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAccountsStakeAddressRewardsResponse429 GetAccountsStakeAddressRewardsResponseBody429 -- ^ Usage limit reached
  | GetAccountsStakeAddressRewardsResponse500 GetAccountsStakeAddressRewardsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRewardsResponseBody400 = GetAccountsStakeAddressRewardsResponseBody400 {
  -- | error
  getAccountsStakeAddressRewardsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRewardsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRewardsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRewardsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRewardsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRewardsResponseBody400" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRewardsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRewardsResponseBody400' with all required fields.
mkGetAccountsStakeAddressRewardsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRewardsResponseBody400StatusCode'
  -> GetAccountsStakeAddressRewardsResponseBody400
mkGetAccountsStakeAddressRewardsResponseBody400 getAccountsStakeAddressRewardsResponseBody400Error getAccountsStakeAddressRewardsResponseBody400Message getAccountsStakeAddressRewardsResponseBody400StatusCode = GetAccountsStakeAddressRewardsResponseBody400{getAccountsStakeAddressRewardsResponseBody400Error = getAccountsStakeAddressRewardsResponseBody400Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody400Message = getAccountsStakeAddressRewardsResponseBody400Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody400StatusCode = getAccountsStakeAddressRewardsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRewardsResponseBody403 = GetAccountsStakeAddressRewardsResponseBody403 {
  -- | error
  getAccountsStakeAddressRewardsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRewardsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRewardsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRewardsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRewardsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRewardsResponseBody403" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRewardsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRewardsResponseBody403' with all required fields.
mkGetAccountsStakeAddressRewardsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRewardsResponseBody403StatusCode'
  -> GetAccountsStakeAddressRewardsResponseBody403
mkGetAccountsStakeAddressRewardsResponseBody403 getAccountsStakeAddressRewardsResponseBody403Error getAccountsStakeAddressRewardsResponseBody403Message getAccountsStakeAddressRewardsResponseBody403StatusCode = GetAccountsStakeAddressRewardsResponseBody403{getAccountsStakeAddressRewardsResponseBody403Error = getAccountsStakeAddressRewardsResponseBody403Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody403Message = getAccountsStakeAddressRewardsResponseBody403Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody403StatusCode = getAccountsStakeAddressRewardsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRewardsResponseBody404 = GetAccountsStakeAddressRewardsResponseBody404 {
  -- | error
  getAccountsStakeAddressRewardsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRewardsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRewardsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRewardsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRewardsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRewardsResponseBody404" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRewardsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRewardsResponseBody404' with all required fields.
mkGetAccountsStakeAddressRewardsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRewardsResponseBody404StatusCode'
  -> GetAccountsStakeAddressRewardsResponseBody404
mkGetAccountsStakeAddressRewardsResponseBody404 getAccountsStakeAddressRewardsResponseBody404Error getAccountsStakeAddressRewardsResponseBody404Message getAccountsStakeAddressRewardsResponseBody404StatusCode = GetAccountsStakeAddressRewardsResponseBody404{getAccountsStakeAddressRewardsResponseBody404Error = getAccountsStakeAddressRewardsResponseBody404Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody404Message = getAccountsStakeAddressRewardsResponseBody404Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody404StatusCode = getAccountsStakeAddressRewardsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRewardsResponseBody418 = GetAccountsStakeAddressRewardsResponseBody418 {
  -- | error
  getAccountsStakeAddressRewardsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRewardsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRewardsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRewardsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRewardsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRewardsResponseBody418" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRewardsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRewardsResponseBody418' with all required fields.
mkGetAccountsStakeAddressRewardsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRewardsResponseBody418StatusCode'
  -> GetAccountsStakeAddressRewardsResponseBody418
mkGetAccountsStakeAddressRewardsResponseBody418 getAccountsStakeAddressRewardsResponseBody418Error getAccountsStakeAddressRewardsResponseBody418Message getAccountsStakeAddressRewardsResponseBody418StatusCode = GetAccountsStakeAddressRewardsResponseBody418{getAccountsStakeAddressRewardsResponseBody418Error = getAccountsStakeAddressRewardsResponseBody418Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody418Message = getAccountsStakeAddressRewardsResponseBody418Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody418StatusCode = getAccountsStakeAddressRewardsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRewardsResponseBody429 = GetAccountsStakeAddressRewardsResponseBody429 {
  -- | error
  getAccountsStakeAddressRewardsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRewardsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRewardsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRewardsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRewardsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRewardsResponseBody429" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRewardsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRewardsResponseBody429' with all required fields.
mkGetAccountsStakeAddressRewardsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRewardsResponseBody429StatusCode'
  -> GetAccountsStakeAddressRewardsResponseBody429
mkGetAccountsStakeAddressRewardsResponseBody429 getAccountsStakeAddressRewardsResponseBody429Error getAccountsStakeAddressRewardsResponseBody429Message getAccountsStakeAddressRewardsResponseBody429StatusCode = GetAccountsStakeAddressRewardsResponseBody429{getAccountsStakeAddressRewardsResponseBody429Error = getAccountsStakeAddressRewardsResponseBody429Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody429Message = getAccountsStakeAddressRewardsResponseBody429Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody429StatusCode = getAccountsStakeAddressRewardsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressRewardsResponseBody500 = GetAccountsStakeAddressRewardsResponseBody500 {
  -- | error
  getAccountsStakeAddressRewardsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressRewardsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressRewardsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressRewardsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressRewardsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressRewardsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressRewardsResponseBody500" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressRewardsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressRewardsResponseBody500' with all required fields.
mkGetAccountsStakeAddressRewardsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressRewardsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressRewardsResponseBody500StatusCode'
  -> GetAccountsStakeAddressRewardsResponseBody500
mkGetAccountsStakeAddressRewardsResponseBody500 getAccountsStakeAddressRewardsResponseBody500Error getAccountsStakeAddressRewardsResponseBody500Message getAccountsStakeAddressRewardsResponseBody500StatusCode = GetAccountsStakeAddressRewardsResponseBody500{getAccountsStakeAddressRewardsResponseBody500Error = getAccountsStakeAddressRewardsResponseBody500Error,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody500Message = getAccountsStakeAddressRewardsResponseBody500Message,
                                                                                                                                                                                                                                                                getAccountsStakeAddressRewardsResponseBody500StatusCode = getAccountsStakeAddressRewardsResponseBody500StatusCode}
-- | > GET /accounts/{stake_address}/rewards
-- 
-- The same as 'getAccounts_StakeAddress_Rewards' but accepts an explicit configuration.
getAccounts_StakeAddress_RewardsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressRewardsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressRewardsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_RewardsWithConfiguration config
                                                  parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressRewardsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      AccountRewardContent)
                                                                                                                                                                                                                        | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressRewardsResponseBody400)
                                                                                                                                                                                                                        | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressRewardsResponseBody403)
                                                                                                                                                                                                                        | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressRewardsResponseBody404)
                                                                                                                                                                                                                        | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressRewardsResponseBody418)
                                                                                                                                                                                                                        | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressRewardsResponseBody429)
                                                                                                                                                                                                                        | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressRewardsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetAccountsStakeAddressRewardsResponseBody500)
                                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressRewardsParametersPathStakeAddress parameters))) GHC.Base.++ "/rewards"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/rewards
-- 
-- The same as 'getAccounts_StakeAddress_Rewards' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_RewardsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressRewardsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_RewardsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressRewardsParametersPathStakeAddress parameters))) GHC.Base.++ "/rewards"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/rewards
-- 
-- The same as 'getAccounts_StakeAddress_Rewards' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_RewardsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressRewardsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_RewardsWithConfigurationRaw config
                                                     parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressRewardsParametersPathStakeAddress parameters))) GHC.Base.++ "/rewards"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressRewardsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
