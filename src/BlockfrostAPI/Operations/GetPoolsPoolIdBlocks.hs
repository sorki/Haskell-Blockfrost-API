-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPools_PoolId_Blocks
module BlockfrostAPI.Operations.GetPoolsPoolIdBlocks where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /pools/{pool_id}/blocks
-- 
-- List of stake pools blocks.
getPools_PoolId_Blocks :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsPoolIdBlocksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetPoolsPoolIdBlocksResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_Blocks parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdBlocksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       PoolBlocks)
                                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetPoolsPoolIdBlocksResponseBody400)
                                                                                                                                                                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetPoolsPoolIdBlocksResponseBody403)
                                                                                                                                                                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetPoolsPoolIdBlocksResponseBody404)
                                                                                                                                                                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetPoolsPoolIdBlocksResponseBody418)
                                                                                                                                                                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetPoolsPoolIdBlocksResponseBody429)
                                                                                                                                                                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetPoolsPoolIdBlocksResponseBody500)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdBlocksParametersPathPoolId parameters))) GHC.Base.++ "/blocks"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/pools\/{pool_id}\/blocks.GET.parameters@ in the specification.
-- 
-- 
data GetPoolsPoolIdBlocksParameters = GetPoolsPoolIdBlocksParameters {
  -- | pathPool_id: Represents the parameter named \'pool_id\'
  -- 
  -- Bech32 or hexadecimal pool ID.
  getPoolsPoolIdBlocksParametersPathPoolId :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getPoolsPoolIdBlocksParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getPoolsPoolIdBlocksParametersQueryOrder :: (GHC.Maybe.Maybe GetPoolsPoolIdBlocksParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getPoolsPoolIdBlocksParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdBlocksParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathPool_id" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksParametersPathPoolId obj : "queryCount" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathPool_id" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksParametersPathPoolId obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdBlocksParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdBlocksParameters" (\obj -> (((GHC.Base.pure GetPoolsPoolIdBlocksParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathPool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetPoolsPoolIdBlocksParameters' with all required fields.
mkGetPoolsPoolIdBlocksParameters :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksParametersPathPoolId'
  -> GetPoolsPoolIdBlocksParameters
mkGetPoolsPoolIdBlocksParameters getPoolsPoolIdBlocksParametersPathPoolId = GetPoolsPoolIdBlocksParameters{getPoolsPoolIdBlocksParametersPathPoolId = getPoolsPoolIdBlocksParametersPathPoolId,
                                                                                                           getPoolsPoolIdBlocksParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                           getPoolsPoolIdBlocksParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                           getPoolsPoolIdBlocksParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/pools\/{pool_id}\/blocks.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetPoolsPoolIdBlocksParametersQueryOrder' =
   GetPoolsPoolIdBlocksParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetPoolsPoolIdBlocksParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetPoolsPoolIdBlocksParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetPoolsPoolIdBlocksParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdBlocksParametersQueryOrder'
    where toJSON (GetPoolsPoolIdBlocksParametersQueryOrder'Other val) = val
          toJSON (GetPoolsPoolIdBlocksParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetPoolsPoolIdBlocksParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetPoolsPoolIdBlocksParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdBlocksParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetPoolsPoolIdBlocksParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetPoolsPoolIdBlocksParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetPoolsPoolIdBlocksParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getPools_PoolId_Blocks'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPoolsPoolIdBlocksResponseError' is used.
data GetPoolsPoolIdBlocksResponse =
   GetPoolsPoolIdBlocksResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPoolsPoolIdBlocksResponse200 PoolBlocks -- ^ Return the pool block list
  | GetPoolsPoolIdBlocksResponse400 GetPoolsPoolIdBlocksResponseBody400 -- ^ Bad request
  | GetPoolsPoolIdBlocksResponse403 GetPoolsPoolIdBlocksResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetPoolsPoolIdBlocksResponse404 GetPoolsPoolIdBlocksResponseBody404 -- ^ Component not found
  | GetPoolsPoolIdBlocksResponse418 GetPoolsPoolIdBlocksResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetPoolsPoolIdBlocksResponse429 GetPoolsPoolIdBlocksResponseBody429 -- ^ Usage limit reached
  | GetPoolsPoolIdBlocksResponse500 GetPoolsPoolIdBlocksResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdBlocksResponseBody400 = GetPoolsPoolIdBlocksResponseBody400 {
  -- | error
  getPoolsPoolIdBlocksResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdBlocksResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdBlocksResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdBlocksResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdBlocksResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdBlocksResponseBody400" (\obj -> ((GHC.Base.pure GetPoolsPoolIdBlocksResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdBlocksResponseBody400' with all required fields.
mkGetPoolsPoolIdBlocksResponseBody400 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdBlocksResponseBody400StatusCode'
  -> GetPoolsPoolIdBlocksResponseBody400
mkGetPoolsPoolIdBlocksResponseBody400 getPoolsPoolIdBlocksResponseBody400Error getPoolsPoolIdBlocksResponseBody400Message getPoolsPoolIdBlocksResponseBody400StatusCode = GetPoolsPoolIdBlocksResponseBody400{getPoolsPoolIdBlocksResponseBody400Error = getPoolsPoolIdBlocksResponseBody400Error,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody400Message = getPoolsPoolIdBlocksResponseBody400Message,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody400StatusCode = getPoolsPoolIdBlocksResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdBlocksResponseBody403 = GetPoolsPoolIdBlocksResponseBody403 {
  -- | error
  getPoolsPoolIdBlocksResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdBlocksResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdBlocksResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdBlocksResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdBlocksResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdBlocksResponseBody403" (\obj -> ((GHC.Base.pure GetPoolsPoolIdBlocksResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdBlocksResponseBody403' with all required fields.
mkGetPoolsPoolIdBlocksResponseBody403 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdBlocksResponseBody403StatusCode'
  -> GetPoolsPoolIdBlocksResponseBody403
mkGetPoolsPoolIdBlocksResponseBody403 getPoolsPoolIdBlocksResponseBody403Error getPoolsPoolIdBlocksResponseBody403Message getPoolsPoolIdBlocksResponseBody403StatusCode = GetPoolsPoolIdBlocksResponseBody403{getPoolsPoolIdBlocksResponseBody403Error = getPoolsPoolIdBlocksResponseBody403Error,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody403Message = getPoolsPoolIdBlocksResponseBody403Message,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody403StatusCode = getPoolsPoolIdBlocksResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdBlocksResponseBody404 = GetPoolsPoolIdBlocksResponseBody404 {
  -- | error
  getPoolsPoolIdBlocksResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdBlocksResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdBlocksResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdBlocksResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdBlocksResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdBlocksResponseBody404" (\obj -> ((GHC.Base.pure GetPoolsPoolIdBlocksResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdBlocksResponseBody404' with all required fields.
mkGetPoolsPoolIdBlocksResponseBody404 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdBlocksResponseBody404StatusCode'
  -> GetPoolsPoolIdBlocksResponseBody404
mkGetPoolsPoolIdBlocksResponseBody404 getPoolsPoolIdBlocksResponseBody404Error getPoolsPoolIdBlocksResponseBody404Message getPoolsPoolIdBlocksResponseBody404StatusCode = GetPoolsPoolIdBlocksResponseBody404{getPoolsPoolIdBlocksResponseBody404Error = getPoolsPoolIdBlocksResponseBody404Error,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody404Message = getPoolsPoolIdBlocksResponseBody404Message,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody404StatusCode = getPoolsPoolIdBlocksResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdBlocksResponseBody418 = GetPoolsPoolIdBlocksResponseBody418 {
  -- | error
  getPoolsPoolIdBlocksResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdBlocksResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdBlocksResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdBlocksResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdBlocksResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdBlocksResponseBody418" (\obj -> ((GHC.Base.pure GetPoolsPoolIdBlocksResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdBlocksResponseBody418' with all required fields.
mkGetPoolsPoolIdBlocksResponseBody418 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdBlocksResponseBody418StatusCode'
  -> GetPoolsPoolIdBlocksResponseBody418
mkGetPoolsPoolIdBlocksResponseBody418 getPoolsPoolIdBlocksResponseBody418Error getPoolsPoolIdBlocksResponseBody418Message getPoolsPoolIdBlocksResponseBody418StatusCode = GetPoolsPoolIdBlocksResponseBody418{getPoolsPoolIdBlocksResponseBody418Error = getPoolsPoolIdBlocksResponseBody418Error,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody418Message = getPoolsPoolIdBlocksResponseBody418Message,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody418StatusCode = getPoolsPoolIdBlocksResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdBlocksResponseBody429 = GetPoolsPoolIdBlocksResponseBody429 {
  -- | error
  getPoolsPoolIdBlocksResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdBlocksResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdBlocksResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdBlocksResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdBlocksResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdBlocksResponseBody429" (\obj -> ((GHC.Base.pure GetPoolsPoolIdBlocksResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdBlocksResponseBody429' with all required fields.
mkGetPoolsPoolIdBlocksResponseBody429 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdBlocksResponseBody429StatusCode'
  -> GetPoolsPoolIdBlocksResponseBody429
mkGetPoolsPoolIdBlocksResponseBody429 getPoolsPoolIdBlocksResponseBody429Error getPoolsPoolIdBlocksResponseBody429Message getPoolsPoolIdBlocksResponseBody429StatusCode = GetPoolsPoolIdBlocksResponseBody429{getPoolsPoolIdBlocksResponseBody429Error = getPoolsPoolIdBlocksResponseBody429Error,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody429Message = getPoolsPoolIdBlocksResponseBody429Message,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody429StatusCode = getPoolsPoolIdBlocksResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdBlocksResponseBody500 = GetPoolsPoolIdBlocksResponseBody500 {
  -- | error
  getPoolsPoolIdBlocksResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdBlocksResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdBlocksResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdBlocksResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdBlocksResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdBlocksResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdBlocksResponseBody500" (\obj -> ((GHC.Base.pure GetPoolsPoolIdBlocksResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdBlocksResponseBody500' with all required fields.
mkGetPoolsPoolIdBlocksResponseBody500 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdBlocksResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdBlocksResponseBody500StatusCode'
  -> GetPoolsPoolIdBlocksResponseBody500
mkGetPoolsPoolIdBlocksResponseBody500 getPoolsPoolIdBlocksResponseBody500Error getPoolsPoolIdBlocksResponseBody500Message getPoolsPoolIdBlocksResponseBody500StatusCode = GetPoolsPoolIdBlocksResponseBody500{getPoolsPoolIdBlocksResponseBody500Error = getPoolsPoolIdBlocksResponseBody500Error,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody500Message = getPoolsPoolIdBlocksResponseBody500Message,
                                                                                                                                                                                                              getPoolsPoolIdBlocksResponseBody500StatusCode = getPoolsPoolIdBlocksResponseBody500StatusCode}
-- | > GET /pools/{pool_id}/blocks
-- 
-- The same as 'getPools_PoolId_Blocks' but accepts an explicit configuration.
getPools_PoolId_BlocksWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsPoolIdBlocksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetPoolsPoolIdBlocksResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_BlocksWithConfiguration config
                                        parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdBlocksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                        PoolBlocks)
                                                                                                                                                                                                    | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdBlocksResponseBody400)
                                                                                                                                                                                                    | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdBlocksResponseBody403)
                                                                                                                                                                                                    | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdBlocksResponseBody404)
                                                                                                                                                                                                    | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdBlocksResponseBody418)
                                                                                                                                                                                                    | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdBlocksResponseBody429)
                                                                                                                                                                                                    | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdBlocksResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdBlocksResponseBody500)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdBlocksParametersPathPoolId parameters))) GHC.Base.++ "/blocks"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/{pool_id}/blocks
-- 
-- The same as 'getPools_PoolId_Blocks' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_BlocksRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsPoolIdBlocksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_BlocksRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdBlocksParametersPathPoolId parameters))) GHC.Base.++ "/blocks"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/{pool_id}/blocks
-- 
-- The same as 'getPools_PoolId_Blocks' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_BlocksWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsPoolIdBlocksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_BlocksWithConfigurationRaw config
                                           parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdBlocksParametersPathPoolId parameters))) GHC.Base.++ "/blocks"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdBlocksParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
