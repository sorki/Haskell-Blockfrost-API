-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getEpochs_Number_Stakes_PoolId_
module BlockfrostAPI.Operations.GetEpochsNumberStakesPoolId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /epochs/{number}/stakes/{pool_id}
-- 
-- Return the active stake distribution for the epoch specified by stake pool.
getEpochs_Number_Stakes_PoolId_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberStakesPoolIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetEpochsNumberStakesPoolIdResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Stakes_PoolId_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberStakesPoolIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              EpochStakePoolContent)
                                                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberStakesPoolIdResponseBody400)
                                                                                                                                                                                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberStakesPoolIdResponseBody403)
                                                                                                                                                                                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberStakesPoolIdResponseBody404)
                                                                                                                                                                                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberStakesPoolIdResponseBody418)
                                                                                                                                                                                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberStakesPoolIdResponseBody429)
                                                                                                                                                                                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetEpochsNumberStakesPoolIdResponseBody500)
                                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesPoolIdParametersPathNumber parameters))) GHC.Base.++ ("/stakes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesPoolIdParametersPathPoolId parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesPoolIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesPoolIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/epochs\/{number}\/stakes\/{pool_id}.GET.parameters@ in the specification.
-- 
-- 
data GetEpochsNumberStakesPoolIdParameters = GetEpochsNumberStakesPoolIdParameters {
  -- | pathNumber: Represents the parameter named \'number\'
  -- 
  -- Number of the epoch
  getEpochsNumberStakesPoolIdParametersPathNumber :: GHC.Integer.Type.Integer
  -- | pathPool_id: Represents the parameter named \'pool_id\'
  -- 
  -- Stake pool ID to filter
  , getEpochsNumberStakesPoolIdParametersPathPoolId :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getEpochsNumberStakesPoolIdParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getEpochsNumberStakesPoolIdParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesPoolIdParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdParametersPathNumber obj : "pathPool_id" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdParametersPathPoolId obj : "queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdParametersQueryCount obj : "queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdParametersPathNumber obj) GHC.Base.<> (("pathPool_id" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdParametersPathPoolId obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdParametersQueryCount obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesPoolIdParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesPoolIdParameters" (\obj -> (((GHC.Base.pure GetEpochsNumberStakesPoolIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNumber")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathPool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetEpochsNumberStakesPoolIdParameters' with all required fields.
mkGetEpochsNumberStakesPoolIdParameters :: GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesPoolIdParametersPathNumber'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdParametersPathPoolId'
  -> GetEpochsNumberStakesPoolIdParameters
mkGetEpochsNumberStakesPoolIdParameters getEpochsNumberStakesPoolIdParametersPathNumber getEpochsNumberStakesPoolIdParametersPathPoolId = GetEpochsNumberStakesPoolIdParameters{getEpochsNumberStakesPoolIdParametersPathNumber = getEpochsNumberStakesPoolIdParametersPathNumber,
                                                                                                                                                                                getEpochsNumberStakesPoolIdParametersPathPoolId = getEpochsNumberStakesPoolIdParametersPathPoolId,
                                                                                                                                                                                getEpochsNumberStakesPoolIdParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                                                                getEpochsNumberStakesPoolIdParametersQueryPage = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getEpochs_Number_Stakes_PoolId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetEpochsNumberStakesPoolIdResponseError' is used.
data GetEpochsNumberStakesPoolIdResponse =
   GetEpochsNumberStakesPoolIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetEpochsNumberStakesPoolIdResponse200 EpochStakePoolContent -- ^ Return the data about the epoch
  | GetEpochsNumberStakesPoolIdResponse400 GetEpochsNumberStakesPoolIdResponseBody400 -- ^ Bad request
  | GetEpochsNumberStakesPoolIdResponse403 GetEpochsNumberStakesPoolIdResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetEpochsNumberStakesPoolIdResponse404 GetEpochsNumberStakesPoolIdResponseBody404 -- ^ Component not found
  | GetEpochsNumberStakesPoolIdResponse418 GetEpochsNumberStakesPoolIdResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetEpochsNumberStakesPoolIdResponse429 GetEpochsNumberStakesPoolIdResponseBody429 -- ^ Usage limit reached
  | GetEpochsNumberStakesPoolIdResponse500 GetEpochsNumberStakesPoolIdResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesPoolIdResponseBody400 = GetEpochsNumberStakesPoolIdResponseBody400 {
  -- | error
  getEpochsNumberStakesPoolIdResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesPoolIdResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesPoolIdResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesPoolIdResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesPoolIdResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesPoolIdResponseBody400" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesPoolIdResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesPoolIdResponseBody400' with all required fields.
mkGetEpochsNumberStakesPoolIdResponseBody400 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesPoolIdResponseBody400StatusCode'
  -> GetEpochsNumberStakesPoolIdResponseBody400
mkGetEpochsNumberStakesPoolIdResponseBody400 getEpochsNumberStakesPoolIdResponseBody400Error getEpochsNumberStakesPoolIdResponseBody400Message getEpochsNumberStakesPoolIdResponseBody400StatusCode = GetEpochsNumberStakesPoolIdResponseBody400{getEpochsNumberStakesPoolIdResponseBody400Error = getEpochsNumberStakesPoolIdResponseBody400Error,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody400Message = getEpochsNumberStakesPoolIdResponseBody400Message,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody400StatusCode = getEpochsNumberStakesPoolIdResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesPoolIdResponseBody403 = GetEpochsNumberStakesPoolIdResponseBody403 {
  -- | error
  getEpochsNumberStakesPoolIdResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesPoolIdResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesPoolIdResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesPoolIdResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesPoolIdResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesPoolIdResponseBody403" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesPoolIdResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesPoolIdResponseBody403' with all required fields.
mkGetEpochsNumberStakesPoolIdResponseBody403 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesPoolIdResponseBody403StatusCode'
  -> GetEpochsNumberStakesPoolIdResponseBody403
mkGetEpochsNumberStakesPoolIdResponseBody403 getEpochsNumberStakesPoolIdResponseBody403Error getEpochsNumberStakesPoolIdResponseBody403Message getEpochsNumberStakesPoolIdResponseBody403StatusCode = GetEpochsNumberStakesPoolIdResponseBody403{getEpochsNumberStakesPoolIdResponseBody403Error = getEpochsNumberStakesPoolIdResponseBody403Error,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody403Message = getEpochsNumberStakesPoolIdResponseBody403Message,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody403StatusCode = getEpochsNumberStakesPoolIdResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesPoolIdResponseBody404 = GetEpochsNumberStakesPoolIdResponseBody404 {
  -- | error
  getEpochsNumberStakesPoolIdResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesPoolIdResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesPoolIdResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesPoolIdResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesPoolIdResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesPoolIdResponseBody404" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesPoolIdResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesPoolIdResponseBody404' with all required fields.
mkGetEpochsNumberStakesPoolIdResponseBody404 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesPoolIdResponseBody404StatusCode'
  -> GetEpochsNumberStakesPoolIdResponseBody404
mkGetEpochsNumberStakesPoolIdResponseBody404 getEpochsNumberStakesPoolIdResponseBody404Error getEpochsNumberStakesPoolIdResponseBody404Message getEpochsNumberStakesPoolIdResponseBody404StatusCode = GetEpochsNumberStakesPoolIdResponseBody404{getEpochsNumberStakesPoolIdResponseBody404Error = getEpochsNumberStakesPoolIdResponseBody404Error,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody404Message = getEpochsNumberStakesPoolIdResponseBody404Message,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody404StatusCode = getEpochsNumberStakesPoolIdResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesPoolIdResponseBody418 = GetEpochsNumberStakesPoolIdResponseBody418 {
  -- | error
  getEpochsNumberStakesPoolIdResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesPoolIdResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesPoolIdResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesPoolIdResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesPoolIdResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesPoolIdResponseBody418" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesPoolIdResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesPoolIdResponseBody418' with all required fields.
mkGetEpochsNumberStakesPoolIdResponseBody418 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesPoolIdResponseBody418StatusCode'
  -> GetEpochsNumberStakesPoolIdResponseBody418
mkGetEpochsNumberStakesPoolIdResponseBody418 getEpochsNumberStakesPoolIdResponseBody418Error getEpochsNumberStakesPoolIdResponseBody418Message getEpochsNumberStakesPoolIdResponseBody418StatusCode = GetEpochsNumberStakesPoolIdResponseBody418{getEpochsNumberStakesPoolIdResponseBody418Error = getEpochsNumberStakesPoolIdResponseBody418Error,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody418Message = getEpochsNumberStakesPoolIdResponseBody418Message,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody418StatusCode = getEpochsNumberStakesPoolIdResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesPoolIdResponseBody429 = GetEpochsNumberStakesPoolIdResponseBody429 {
  -- | error
  getEpochsNumberStakesPoolIdResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesPoolIdResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesPoolIdResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesPoolIdResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesPoolIdResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesPoolIdResponseBody429" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesPoolIdResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesPoolIdResponseBody429' with all required fields.
mkGetEpochsNumberStakesPoolIdResponseBody429 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesPoolIdResponseBody429StatusCode'
  -> GetEpochsNumberStakesPoolIdResponseBody429
mkGetEpochsNumberStakesPoolIdResponseBody429 getEpochsNumberStakesPoolIdResponseBody429Error getEpochsNumberStakesPoolIdResponseBody429Message getEpochsNumberStakesPoolIdResponseBody429StatusCode = GetEpochsNumberStakesPoolIdResponseBody429{getEpochsNumberStakesPoolIdResponseBody429Error = getEpochsNumberStakesPoolIdResponseBody429Error,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody429Message = getEpochsNumberStakesPoolIdResponseBody429Message,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody429StatusCode = getEpochsNumberStakesPoolIdResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberStakesPoolIdResponseBody500 = GetEpochsNumberStakesPoolIdResponseBody500 {
  -- | error
  getEpochsNumberStakesPoolIdResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberStakesPoolIdResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberStakesPoolIdResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberStakesPoolIdResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberStakesPoolIdResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberStakesPoolIdResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberStakesPoolIdResponseBody500" (\obj -> ((GHC.Base.pure GetEpochsNumberStakesPoolIdResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberStakesPoolIdResponseBody500' with all required fields.
mkGetEpochsNumberStakesPoolIdResponseBody500 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberStakesPoolIdResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberStakesPoolIdResponseBody500StatusCode'
  -> GetEpochsNumberStakesPoolIdResponseBody500
mkGetEpochsNumberStakesPoolIdResponseBody500 getEpochsNumberStakesPoolIdResponseBody500Error getEpochsNumberStakesPoolIdResponseBody500Message getEpochsNumberStakesPoolIdResponseBody500StatusCode = GetEpochsNumberStakesPoolIdResponseBody500{getEpochsNumberStakesPoolIdResponseBody500Error = getEpochsNumberStakesPoolIdResponseBody500Error,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody500Message = getEpochsNumberStakesPoolIdResponseBody500Message,
                                                                                                                                                                                                                                                 getEpochsNumberStakesPoolIdResponseBody500StatusCode = getEpochsNumberStakesPoolIdResponseBody500StatusCode}
-- | > GET /epochs/{number}/stakes/{pool_id}
-- 
-- The same as 'getEpochs_Number_Stakes_PoolId_' but accepts an explicit configuration.
getEpochs_Number_Stakes_PoolId_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberStakesPoolIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetEpochsNumberStakesPoolIdResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Stakes_PoolId_WithConfiguration config
                                                 parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberStakesPoolIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               EpochStakePoolContent)
                                                                                                                                                                                                                    | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberStakesPoolIdResponseBody400)
                                                                                                                                                                                                                    | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberStakesPoolIdResponseBody403)
                                                                                                                                                                                                                    | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberStakesPoolIdResponseBody404)
                                                                                                                                                                                                                    | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberStakesPoolIdResponseBody418)
                                                                                                                                                                                                                    | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberStakesPoolIdResponseBody429)
                                                                                                                                                                                                                    | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberStakesPoolIdResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetEpochsNumberStakesPoolIdResponseBody500)
                                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesPoolIdParametersPathNumber parameters))) GHC.Base.++ ("/stakes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesPoolIdParametersPathPoolId parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesPoolIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesPoolIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/stakes/{pool_id}
-- 
-- The same as 'getEpochs_Number_Stakes_PoolId_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_Stakes_PoolId_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberStakesPoolIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Stakes_PoolId_Raw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesPoolIdParametersPathNumber parameters))) GHC.Base.++ ("/stakes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesPoolIdParametersPathPoolId parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesPoolIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesPoolIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/stakes/{pool_id}
-- 
-- The same as 'getEpochs_Number_Stakes_PoolId_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_Stakes_PoolId_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberStakesPoolIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Stakes_PoolId_WithConfigurationRaw config
                                                    parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesPoolIdParametersPathNumber parameters))) GHC.Base.++ ("/stakes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberStakesPoolIdParametersPathPoolId parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesPoolIdParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberStakesPoolIdParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
