-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAssets_Asset_Transactions
module BlockfrostAPI.Operations.GetAssetsAssetTransactions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /assets/{asset}/transactions
-- 
-- List of a specific asset transactions
getAssets_Asset_Transactions :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsAssetTransactionsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAssetsAssetTransactionsResponse) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_Transactions parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAssetsAssetTransactionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         AssetTransactions)
                                                                                                                                                                                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetAssetsAssetTransactionsResponseBody400)
                                                                                                                                                                                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetAssetsAssetTransactionsResponseBody403)
                                                                                                                                                                                               | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetAssetsAssetTransactionsResponseBody404)
                                                                                                                                                                                               | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetAssetsAssetTransactionsResponseBody418)
                                                                                                                                                                                               | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetAssetsAssetTransactionsResponseBody429)
                                                                                                                                                                                               | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetAssetsAssetTransactionsResponseBody500)
                                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetTransactionsParametersPathAsset parameters))) GHC.Base.++ "/transactions"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/assets\/{asset}\/transactions.GET.parameters@ in the specification.
-- 
-- 
data GetAssetsAssetTransactionsParameters = GetAssetsAssetTransactionsParameters {
  -- | pathAsset: Represents the parameter named \'asset\'
  -- 
  -- Concatenation of the policy_id and hex-encoded asset_name
  getAssetsAssetTransactionsParametersPathAsset :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAssetsAssetTransactionsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAssetsAssetTransactionsParametersQueryOrder :: (GHC.Maybe.Maybe GetAssetsAssetTransactionsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAssetsAssetTransactionsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTransactionsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAsset" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsParametersPathAsset obj : "queryCount" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAsset" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsParametersPathAsset obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTransactionsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTransactionsParameters" (\obj -> (((GHC.Base.pure GetAssetsAssetTransactionsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAssetsAssetTransactionsParameters' with all required fields.
mkGetAssetsAssetTransactionsParameters :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsParametersPathAsset'
  -> GetAssetsAssetTransactionsParameters
mkGetAssetsAssetTransactionsParameters getAssetsAssetTransactionsParametersPathAsset = GetAssetsAssetTransactionsParameters{getAssetsAssetTransactionsParametersPathAsset = getAssetsAssetTransactionsParametersPathAsset,
                                                                                                                            getAssetsAssetTransactionsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                            getAssetsAssetTransactionsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                            getAssetsAssetTransactionsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/assets\/{asset}\/transactions.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAssetsAssetTransactionsParametersQueryOrder' =
   GetAssetsAssetTransactionsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAssetsAssetTransactionsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAssetsAssetTransactionsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAssetsAssetTransactionsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTransactionsParametersQueryOrder'
    where toJSON (GetAssetsAssetTransactionsParametersQueryOrder'Other val) = val
          toJSON (GetAssetsAssetTransactionsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAssetsAssetTransactionsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAssetsAssetTransactionsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTransactionsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAssetsAssetTransactionsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAssetsAssetTransactionsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAssetsAssetTransactionsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAssets_Asset_Transactions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAssetsAssetTransactionsResponseError' is used.
data GetAssetsAssetTransactionsResponse =
   GetAssetsAssetTransactionsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAssetsAssetTransactionsResponse200 AssetTransactions -- ^ Return the information about the history of a specific asset
  | GetAssetsAssetTransactionsResponse400 GetAssetsAssetTransactionsResponseBody400 -- ^ Bad request
  | GetAssetsAssetTransactionsResponse403 GetAssetsAssetTransactionsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAssetsAssetTransactionsResponse404 GetAssetsAssetTransactionsResponseBody404 -- ^ Component not found
  | GetAssetsAssetTransactionsResponse418 GetAssetsAssetTransactionsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAssetsAssetTransactionsResponse429 GetAssetsAssetTransactionsResponseBody429 -- ^ Usage limit reached
  | GetAssetsAssetTransactionsResponse500 GetAssetsAssetTransactionsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTransactionsResponseBody400 = GetAssetsAssetTransactionsResponseBody400 {
  -- | error
  getAssetsAssetTransactionsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTransactionsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTransactionsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTransactionsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTransactionsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTransactionsResponseBody400" (\obj -> ((GHC.Base.pure GetAssetsAssetTransactionsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTransactionsResponseBody400' with all required fields.
mkGetAssetsAssetTransactionsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTransactionsResponseBody400StatusCode'
  -> GetAssetsAssetTransactionsResponseBody400
mkGetAssetsAssetTransactionsResponseBody400 getAssetsAssetTransactionsResponseBody400Error getAssetsAssetTransactionsResponseBody400Message getAssetsAssetTransactionsResponseBody400StatusCode = GetAssetsAssetTransactionsResponseBody400{getAssetsAssetTransactionsResponseBody400Error = getAssetsAssetTransactionsResponseBody400Error,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody400Message = getAssetsAssetTransactionsResponseBody400Message,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody400StatusCode = getAssetsAssetTransactionsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTransactionsResponseBody403 = GetAssetsAssetTransactionsResponseBody403 {
  -- | error
  getAssetsAssetTransactionsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTransactionsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTransactionsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTransactionsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTransactionsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTransactionsResponseBody403" (\obj -> ((GHC.Base.pure GetAssetsAssetTransactionsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTransactionsResponseBody403' with all required fields.
mkGetAssetsAssetTransactionsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTransactionsResponseBody403StatusCode'
  -> GetAssetsAssetTransactionsResponseBody403
mkGetAssetsAssetTransactionsResponseBody403 getAssetsAssetTransactionsResponseBody403Error getAssetsAssetTransactionsResponseBody403Message getAssetsAssetTransactionsResponseBody403StatusCode = GetAssetsAssetTransactionsResponseBody403{getAssetsAssetTransactionsResponseBody403Error = getAssetsAssetTransactionsResponseBody403Error,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody403Message = getAssetsAssetTransactionsResponseBody403Message,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody403StatusCode = getAssetsAssetTransactionsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTransactionsResponseBody404 = GetAssetsAssetTransactionsResponseBody404 {
  -- | error
  getAssetsAssetTransactionsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTransactionsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTransactionsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTransactionsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTransactionsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTransactionsResponseBody404" (\obj -> ((GHC.Base.pure GetAssetsAssetTransactionsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTransactionsResponseBody404' with all required fields.
mkGetAssetsAssetTransactionsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTransactionsResponseBody404StatusCode'
  -> GetAssetsAssetTransactionsResponseBody404
mkGetAssetsAssetTransactionsResponseBody404 getAssetsAssetTransactionsResponseBody404Error getAssetsAssetTransactionsResponseBody404Message getAssetsAssetTransactionsResponseBody404StatusCode = GetAssetsAssetTransactionsResponseBody404{getAssetsAssetTransactionsResponseBody404Error = getAssetsAssetTransactionsResponseBody404Error,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody404Message = getAssetsAssetTransactionsResponseBody404Message,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody404StatusCode = getAssetsAssetTransactionsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTransactionsResponseBody418 = GetAssetsAssetTransactionsResponseBody418 {
  -- | error
  getAssetsAssetTransactionsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTransactionsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTransactionsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTransactionsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTransactionsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTransactionsResponseBody418" (\obj -> ((GHC.Base.pure GetAssetsAssetTransactionsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTransactionsResponseBody418' with all required fields.
mkGetAssetsAssetTransactionsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTransactionsResponseBody418StatusCode'
  -> GetAssetsAssetTransactionsResponseBody418
mkGetAssetsAssetTransactionsResponseBody418 getAssetsAssetTransactionsResponseBody418Error getAssetsAssetTransactionsResponseBody418Message getAssetsAssetTransactionsResponseBody418StatusCode = GetAssetsAssetTransactionsResponseBody418{getAssetsAssetTransactionsResponseBody418Error = getAssetsAssetTransactionsResponseBody418Error,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody418Message = getAssetsAssetTransactionsResponseBody418Message,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody418StatusCode = getAssetsAssetTransactionsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTransactionsResponseBody429 = GetAssetsAssetTransactionsResponseBody429 {
  -- | error
  getAssetsAssetTransactionsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTransactionsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTransactionsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTransactionsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTransactionsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTransactionsResponseBody429" (\obj -> ((GHC.Base.pure GetAssetsAssetTransactionsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTransactionsResponseBody429' with all required fields.
mkGetAssetsAssetTransactionsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTransactionsResponseBody429StatusCode'
  -> GetAssetsAssetTransactionsResponseBody429
mkGetAssetsAssetTransactionsResponseBody429 getAssetsAssetTransactionsResponseBody429Error getAssetsAssetTransactionsResponseBody429Message getAssetsAssetTransactionsResponseBody429StatusCode = GetAssetsAssetTransactionsResponseBody429{getAssetsAssetTransactionsResponseBody429Error = getAssetsAssetTransactionsResponseBody429Error,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody429Message = getAssetsAssetTransactionsResponseBody429Message,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody429StatusCode = getAssetsAssetTransactionsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAssetsAssetTransactionsResponseBody500 = GetAssetsAssetTransactionsResponseBody500 {
  -- | error
  getAssetsAssetTransactionsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAssetsAssetTransactionsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAssetsAssetTransactionsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAssetsAssetTransactionsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAssetsAssetTransactionsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAssetsAssetTransactionsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAssetsAssetTransactionsResponseBody500" (\obj -> ((GHC.Base.pure GetAssetsAssetTransactionsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAssetsAssetTransactionsResponseBody500' with all required fields.
mkGetAssetsAssetTransactionsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAssetsAssetTransactionsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAssetsAssetTransactionsResponseBody500StatusCode'
  -> GetAssetsAssetTransactionsResponseBody500
mkGetAssetsAssetTransactionsResponseBody500 getAssetsAssetTransactionsResponseBody500Error getAssetsAssetTransactionsResponseBody500Message getAssetsAssetTransactionsResponseBody500StatusCode = GetAssetsAssetTransactionsResponseBody500{getAssetsAssetTransactionsResponseBody500Error = getAssetsAssetTransactionsResponseBody500Error,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody500Message = getAssetsAssetTransactionsResponseBody500Message,
                                                                                                                                                                                                                                            getAssetsAssetTransactionsResponseBody500StatusCode = getAssetsAssetTransactionsResponseBody500StatusCode}
-- | > GET /assets/{asset}/transactions
-- 
-- The same as 'getAssets_Asset_Transactions' but accepts an explicit configuration.
getAssets_Asset_TransactionsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsAssetTransactionsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAssetsAssetTransactionsResponse) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_TransactionsWithConfiguration config
                                              parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAssetsAssetTransactionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AssetTransactions)
                                                                                                                                                                                                                | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAssetsAssetTransactionsResponseBody400)
                                                                                                                                                                                                                | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAssetsAssetTransactionsResponseBody403)
                                                                                                                                                                                                                | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAssetsAssetTransactionsResponseBody404)
                                                                                                                                                                                                                | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAssetsAssetTransactionsResponseBody418)
                                                                                                                                                                                                                | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAssetsAssetTransactionsResponseBody429)
                                                                                                                                                                                                                | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAssetsAssetTransactionsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAssetsAssetTransactionsResponseBody500)
                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetTransactionsParametersPathAsset parameters))) GHC.Base.++ "/transactions"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets/{asset}/transactions
-- 
-- The same as 'getAssets_Asset_Transactions' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAssets_Asset_TransactionsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAssetsAssetTransactionsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_TransactionsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetTransactionsParametersPathAsset parameters))) GHC.Base.++ "/transactions"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /assets/{asset}/transactions
-- 
-- The same as 'getAssets_Asset_Transactions' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAssets_Asset_TransactionsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAssetsAssetTransactionsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAssets_Asset_TransactionsWithConfigurationRaw config
                                                 parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/assets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAssetsAssetTransactionsParametersPathAsset parameters))) GHC.Base.++ "/transactions"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAssetsAssetTransactionsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
