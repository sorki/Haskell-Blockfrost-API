-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBlocks_HashOrNumber_Next
module BlockfrostAPI.Operations.GetBlocksHashOrNumberNext where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /blocks/{hash_or_number}/next
-- 
-- Return the list of blocks following a specific block.
getBlocks_HashOrNumber_Next :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetBlocksHashOrNumberNextParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetBlocksHashOrNumberNextResponse) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_Next parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBlocksHashOrNumberNextResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockContentArray)
                                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberNextResponseBody400)
                                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberNextResponseBody403)
                                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberNextResponseBody404)
                                                                                                                                                                                             | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberNextResponseBody418)
                                                                                                                                                                                             | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberNextResponseBody429)
                                                                                                                                                                                             | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetBlocksHashOrNumberNextResponseBody500)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberNextParametersPathHashOrNumber parameters))) GHC.Base.++ "/next"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberNextParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberNextParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/blocks\/{hash_or_number}\/next.GET.parameters@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberNextParameters = GetBlocksHashOrNumberNextParameters {
  -- | pathHash_or_number: Represents the parameter named \'hash_or_number\'
  -- 
  -- Hash of the requested block.
  getBlocksHashOrNumberNextParametersPathHashOrNumber :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getBlocksHashOrNumberNextParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getBlocksHashOrNumberNextParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberNextParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathHash_or_number" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextParametersPathHashOrNumber obj : "queryCount" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextParametersQueryCount obj : "queryPage" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathHash_or_number" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextParametersPathHashOrNumber obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextParametersQueryCount obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberNextParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberNextParameters" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberNextParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathHash_or_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetBlocksHashOrNumberNextParameters' with all required fields.
mkGetBlocksHashOrNumberNextParameters :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextParametersPathHashOrNumber'
  -> GetBlocksHashOrNumberNextParameters
mkGetBlocksHashOrNumberNextParameters getBlocksHashOrNumberNextParametersPathHashOrNumber = GetBlocksHashOrNumberNextParameters{getBlocksHashOrNumberNextParametersPathHashOrNumber = getBlocksHashOrNumberNextParametersPathHashOrNumber,
                                                                                                                                getBlocksHashOrNumberNextParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                getBlocksHashOrNumberNextParametersQueryPage = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getBlocks_HashOrNumber_Next'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBlocksHashOrNumberNextResponseError' is used.
data GetBlocksHashOrNumberNextResponse =
   GetBlocksHashOrNumberNextResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBlocksHashOrNumberNextResponse200 BlockContentArray -- ^ Return the contents of the block.
  | GetBlocksHashOrNumberNextResponse400 GetBlocksHashOrNumberNextResponseBody400 -- ^ Bad request
  | GetBlocksHashOrNumberNextResponse403 GetBlocksHashOrNumberNextResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetBlocksHashOrNumberNextResponse404 GetBlocksHashOrNumberNextResponseBody404 -- ^ Component not found
  | GetBlocksHashOrNumberNextResponse418 GetBlocksHashOrNumberNextResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetBlocksHashOrNumberNextResponse429 GetBlocksHashOrNumberNextResponseBody429 -- ^ Usage limit reached
  | GetBlocksHashOrNumberNextResponse500 GetBlocksHashOrNumberNextResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberNextResponseBody400 = GetBlocksHashOrNumberNextResponseBody400 {
  -- | error
  getBlocksHashOrNumberNextResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberNextResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberNextResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberNextResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberNextResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberNextResponseBody400" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberNextResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberNextResponseBody400' with all required fields.
mkGetBlocksHashOrNumberNextResponseBody400 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberNextResponseBody400StatusCode'
  -> GetBlocksHashOrNumberNextResponseBody400
mkGetBlocksHashOrNumberNextResponseBody400 getBlocksHashOrNumberNextResponseBody400Error getBlocksHashOrNumberNextResponseBody400Message getBlocksHashOrNumberNextResponseBody400StatusCode = GetBlocksHashOrNumberNextResponseBody400{getBlocksHashOrNumberNextResponseBody400Error = getBlocksHashOrNumberNextResponseBody400Error,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody400Message = getBlocksHashOrNumberNextResponseBody400Message,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody400StatusCode = getBlocksHashOrNumberNextResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberNextResponseBody403 = GetBlocksHashOrNumberNextResponseBody403 {
  -- | error
  getBlocksHashOrNumberNextResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberNextResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberNextResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberNextResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberNextResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberNextResponseBody403" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberNextResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberNextResponseBody403' with all required fields.
mkGetBlocksHashOrNumberNextResponseBody403 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberNextResponseBody403StatusCode'
  -> GetBlocksHashOrNumberNextResponseBody403
mkGetBlocksHashOrNumberNextResponseBody403 getBlocksHashOrNumberNextResponseBody403Error getBlocksHashOrNumberNextResponseBody403Message getBlocksHashOrNumberNextResponseBody403StatusCode = GetBlocksHashOrNumberNextResponseBody403{getBlocksHashOrNumberNextResponseBody403Error = getBlocksHashOrNumberNextResponseBody403Error,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody403Message = getBlocksHashOrNumberNextResponseBody403Message,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody403StatusCode = getBlocksHashOrNumberNextResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberNextResponseBody404 = GetBlocksHashOrNumberNextResponseBody404 {
  -- | error
  getBlocksHashOrNumberNextResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberNextResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberNextResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberNextResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberNextResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberNextResponseBody404" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberNextResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberNextResponseBody404' with all required fields.
mkGetBlocksHashOrNumberNextResponseBody404 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberNextResponseBody404StatusCode'
  -> GetBlocksHashOrNumberNextResponseBody404
mkGetBlocksHashOrNumberNextResponseBody404 getBlocksHashOrNumberNextResponseBody404Error getBlocksHashOrNumberNextResponseBody404Message getBlocksHashOrNumberNextResponseBody404StatusCode = GetBlocksHashOrNumberNextResponseBody404{getBlocksHashOrNumberNextResponseBody404Error = getBlocksHashOrNumberNextResponseBody404Error,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody404Message = getBlocksHashOrNumberNextResponseBody404Message,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody404StatusCode = getBlocksHashOrNumberNextResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberNextResponseBody418 = GetBlocksHashOrNumberNextResponseBody418 {
  -- | error
  getBlocksHashOrNumberNextResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberNextResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberNextResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberNextResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberNextResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberNextResponseBody418" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberNextResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberNextResponseBody418' with all required fields.
mkGetBlocksHashOrNumberNextResponseBody418 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberNextResponseBody418StatusCode'
  -> GetBlocksHashOrNumberNextResponseBody418
mkGetBlocksHashOrNumberNextResponseBody418 getBlocksHashOrNumberNextResponseBody418Error getBlocksHashOrNumberNextResponseBody418Message getBlocksHashOrNumberNextResponseBody418StatusCode = GetBlocksHashOrNumberNextResponseBody418{getBlocksHashOrNumberNextResponseBody418Error = getBlocksHashOrNumberNextResponseBody418Error,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody418Message = getBlocksHashOrNumberNextResponseBody418Message,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody418StatusCode = getBlocksHashOrNumberNextResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberNextResponseBody429 = GetBlocksHashOrNumberNextResponseBody429 {
  -- | error
  getBlocksHashOrNumberNextResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberNextResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberNextResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberNextResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberNextResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberNextResponseBody429" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberNextResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberNextResponseBody429' with all required fields.
mkGetBlocksHashOrNumberNextResponseBody429 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberNextResponseBody429StatusCode'
  -> GetBlocksHashOrNumberNextResponseBody429
mkGetBlocksHashOrNumberNextResponseBody429 getBlocksHashOrNumberNextResponseBody429Error getBlocksHashOrNumberNextResponseBody429Message getBlocksHashOrNumberNextResponseBody429StatusCode = GetBlocksHashOrNumberNextResponseBody429{getBlocksHashOrNumberNextResponseBody429Error = getBlocksHashOrNumberNextResponseBody429Error,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody429Message = getBlocksHashOrNumberNextResponseBody429Message,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody429StatusCode = getBlocksHashOrNumberNextResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksHashOrNumberNextResponseBody500 = GetBlocksHashOrNumberNextResponseBody500 {
  -- | error
  getBlocksHashOrNumberNextResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksHashOrNumberNextResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksHashOrNumberNextResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksHashOrNumberNextResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksHashOrNumberNextResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksHashOrNumberNextResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksHashOrNumberNextResponseBody500" (\obj -> ((GHC.Base.pure GetBlocksHashOrNumberNextResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksHashOrNumberNextResponseBody500' with all required fields.
mkGetBlocksHashOrNumberNextResponseBody500 :: Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksHashOrNumberNextResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksHashOrNumberNextResponseBody500StatusCode'
  -> GetBlocksHashOrNumberNextResponseBody500
mkGetBlocksHashOrNumberNextResponseBody500 getBlocksHashOrNumberNextResponseBody500Error getBlocksHashOrNumberNextResponseBody500Message getBlocksHashOrNumberNextResponseBody500StatusCode = GetBlocksHashOrNumberNextResponseBody500{getBlocksHashOrNumberNextResponseBody500Error = getBlocksHashOrNumberNextResponseBody500Error,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody500Message = getBlocksHashOrNumberNextResponseBody500Message,
                                                                                                                                                                                                                                       getBlocksHashOrNumberNextResponseBody500StatusCode = getBlocksHashOrNumberNextResponseBody500StatusCode}
-- | > GET /blocks/{hash_or_number}/next
-- 
-- The same as 'getBlocks_HashOrNumber_Next' but accepts an explicit configuration.
getBlocks_HashOrNumber_NextWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetBlocksHashOrNumberNextParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetBlocksHashOrNumberNextResponse) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_NextWithConfiguration config
                                             parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetBlocksHashOrNumberNextResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       BlockContentArray)
                                                                                                                                                                                                              | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetBlocksHashOrNumberNextResponseBody400)
                                                                                                                                                                                                              | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetBlocksHashOrNumberNextResponseBody403)
                                                                                                                                                                                                              | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetBlocksHashOrNumberNextResponseBody404)
                                                                                                                                                                                                              | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetBlocksHashOrNumberNextResponseBody418)
                                                                                                                                                                                                              | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetBlocksHashOrNumberNextResponseBody429)
                                                                                                                                                                                                              | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksHashOrNumberNextResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetBlocksHashOrNumberNextResponseBody500)
                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberNextParametersPathHashOrNumber parameters))) GHC.Base.++ "/next"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberNextParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberNextParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /blocks/{hash_or_number}/next
-- 
-- The same as 'getBlocks_HashOrNumber_Next' but returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocks_HashOrNumber_NextRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetBlocksHashOrNumberNextParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_NextRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberNextParametersPathHashOrNumber parameters))) GHC.Base.++ "/next"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberNextParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                       BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberNextParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /blocks/{hash_or_number}/next
-- 
-- The same as 'getBlocks_HashOrNumber_Next' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocks_HashOrNumber_NextWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetBlocksHashOrNumberNextParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocks_HashOrNumber_NextWithConfigurationRaw config
                                                parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksHashOrNumberNextParametersPathHashOrNumber parameters))) GHC.Base.++ "/next"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberNextParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBlocksHashOrNumberNextParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
