-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccounts_StakeAddress_AddressesAssets
module BlockfrostAPI.Operations.GetAccountsStakeAddressAddressesAssets where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /accounts/{stake_address}/addresses/assets
-- 
-- Obtain information about assets associated with addresses of a specific account.
-- 
-- \<b>Be careful\<\/b>, as an account could be part of a mangled address and does not necessarily mean the addresses are owned by user as the account.
getAccounts_StakeAddress_AddressesAssets :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressAddressesAssetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressAddressesAssetsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_AddressesAssets parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressAddressesAssetsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AccountAddressesAssets)
                                                                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAccountsStakeAddressAddressesAssetsResponseBody400)
                                                                                                                                                                                                                       | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAccountsStakeAddressAddressesAssetsResponseBody403)
                                                                                                                                                                                                                       | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAccountsStakeAddressAddressesAssetsResponseBody404)
                                                                                                                                                                                                                       | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAccountsStakeAddressAddressesAssetsResponseBody418)
                                                                                                                                                                                                                       | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAccountsStakeAddressAddressesAssetsResponseBody429)
                                                                                                                                                                                                                       | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetAccountsStakeAddressAddressesAssetsResponseBody500)
                                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress parameters))) GHC.Base.++ "/addresses/assets"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/accounts\/{stake_address}\/addresses\/assets.GET.parameters@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesAssetsParameters = GetAccountsStakeAddressAddressesAssetsParameters {
  -- | pathStake_address: Represents the parameter named \'stake_address\'
  -- 
  -- Bech32 stake address.
  getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAccountsStakeAddressAddressesAssetsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAccountsStakeAddressAddressesAssetsParametersQueryOrder :: (GHC.Maybe.Maybe GetAccountsStakeAddressAddressesAssetsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAccountsStakeAddressAddressesAssetsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesAssetsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesAssetsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesAssetsParameters" (\obj -> (((GHC.Base.pure GetAccountsStakeAddressAddressesAssetsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathStake_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAccountsStakeAddressAddressesAssetsParameters' with all required fields.
mkGetAccountsStakeAddressAddressesAssetsParameters :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress'
  -> GetAccountsStakeAddressAddressesAssetsParameters
mkGetAccountsStakeAddressAddressesAssetsParameters getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress = GetAccountsStakeAddressAddressesAssetsParameters{getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress = getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress,
                                                                                                                                                                       getAccountsStakeAddressAddressesAssetsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                                                       getAccountsStakeAddressAddressesAssetsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                                                       getAccountsStakeAddressAddressesAssetsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/accounts\/{stake_address}\/addresses\/assets.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAccountsStakeAddressAddressesAssetsParametersQueryOrder' =
   GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'
    where toJSON (GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'Other val) = val
          toJSON (GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAccountsStakeAddressAddressesAssetsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAccounts_StakeAddress_AddressesAssets'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountsStakeAddressAddressesAssetsResponseError' is used.
data GetAccountsStakeAddressAddressesAssetsResponse =
   GetAccountsStakeAddressAddressesAssetsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountsStakeAddressAddressesAssetsResponse200 AccountAddressesAssets -- ^ Return the account addresses content
  | GetAccountsStakeAddressAddressesAssetsResponse400 GetAccountsStakeAddressAddressesAssetsResponseBody400 -- ^ Bad request
  | GetAccountsStakeAddressAddressesAssetsResponse403 GetAccountsStakeAddressAddressesAssetsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAccountsStakeAddressAddressesAssetsResponse404 GetAccountsStakeAddressAddressesAssetsResponseBody404 -- ^ Component not found
  | GetAccountsStakeAddressAddressesAssetsResponse418 GetAccountsStakeAddressAddressesAssetsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAccountsStakeAddressAddressesAssetsResponse429 GetAccountsStakeAddressAddressesAssetsResponseBody429 -- ^ Usage limit reached
  | GetAccountsStakeAddressAddressesAssetsResponse500 GetAccountsStakeAddressAddressesAssetsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesAssetsResponseBody400 = GetAccountsStakeAddressAddressesAssetsResponseBody400 {
  -- | error
  getAccountsStakeAddressAddressesAssetsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesAssetsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesAssetsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesAssetsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesAssetsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesAssetsResponseBody400" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesAssetsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesAssetsResponseBody400' with all required fields.
mkGetAccountsStakeAddressAddressesAssetsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody400StatusCode'
  -> GetAccountsStakeAddressAddressesAssetsResponseBody400
mkGetAccountsStakeAddressAddressesAssetsResponseBody400 getAccountsStakeAddressAddressesAssetsResponseBody400Error getAccountsStakeAddressAddressesAssetsResponseBody400Message getAccountsStakeAddressAddressesAssetsResponseBody400StatusCode = GetAccountsStakeAddressAddressesAssetsResponseBody400{getAccountsStakeAddressAddressesAssetsResponseBody400Error = getAccountsStakeAddressAddressesAssetsResponseBody400Error,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody400Message = getAccountsStakeAddressAddressesAssetsResponseBody400Message,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody400StatusCode = getAccountsStakeAddressAddressesAssetsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesAssetsResponseBody403 = GetAccountsStakeAddressAddressesAssetsResponseBody403 {
  -- | error
  getAccountsStakeAddressAddressesAssetsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesAssetsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesAssetsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesAssetsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesAssetsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesAssetsResponseBody403" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesAssetsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesAssetsResponseBody403' with all required fields.
mkGetAccountsStakeAddressAddressesAssetsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody403StatusCode'
  -> GetAccountsStakeAddressAddressesAssetsResponseBody403
mkGetAccountsStakeAddressAddressesAssetsResponseBody403 getAccountsStakeAddressAddressesAssetsResponseBody403Error getAccountsStakeAddressAddressesAssetsResponseBody403Message getAccountsStakeAddressAddressesAssetsResponseBody403StatusCode = GetAccountsStakeAddressAddressesAssetsResponseBody403{getAccountsStakeAddressAddressesAssetsResponseBody403Error = getAccountsStakeAddressAddressesAssetsResponseBody403Error,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody403Message = getAccountsStakeAddressAddressesAssetsResponseBody403Message,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody403StatusCode = getAccountsStakeAddressAddressesAssetsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesAssetsResponseBody404 = GetAccountsStakeAddressAddressesAssetsResponseBody404 {
  -- | error
  getAccountsStakeAddressAddressesAssetsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesAssetsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesAssetsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesAssetsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesAssetsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesAssetsResponseBody404" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesAssetsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesAssetsResponseBody404' with all required fields.
mkGetAccountsStakeAddressAddressesAssetsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody404StatusCode'
  -> GetAccountsStakeAddressAddressesAssetsResponseBody404
mkGetAccountsStakeAddressAddressesAssetsResponseBody404 getAccountsStakeAddressAddressesAssetsResponseBody404Error getAccountsStakeAddressAddressesAssetsResponseBody404Message getAccountsStakeAddressAddressesAssetsResponseBody404StatusCode = GetAccountsStakeAddressAddressesAssetsResponseBody404{getAccountsStakeAddressAddressesAssetsResponseBody404Error = getAccountsStakeAddressAddressesAssetsResponseBody404Error,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody404Message = getAccountsStakeAddressAddressesAssetsResponseBody404Message,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody404StatusCode = getAccountsStakeAddressAddressesAssetsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesAssetsResponseBody418 = GetAccountsStakeAddressAddressesAssetsResponseBody418 {
  -- | error
  getAccountsStakeAddressAddressesAssetsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesAssetsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesAssetsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesAssetsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesAssetsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesAssetsResponseBody418" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesAssetsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesAssetsResponseBody418' with all required fields.
mkGetAccountsStakeAddressAddressesAssetsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody418StatusCode'
  -> GetAccountsStakeAddressAddressesAssetsResponseBody418
mkGetAccountsStakeAddressAddressesAssetsResponseBody418 getAccountsStakeAddressAddressesAssetsResponseBody418Error getAccountsStakeAddressAddressesAssetsResponseBody418Message getAccountsStakeAddressAddressesAssetsResponseBody418StatusCode = GetAccountsStakeAddressAddressesAssetsResponseBody418{getAccountsStakeAddressAddressesAssetsResponseBody418Error = getAccountsStakeAddressAddressesAssetsResponseBody418Error,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody418Message = getAccountsStakeAddressAddressesAssetsResponseBody418Message,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody418StatusCode = getAccountsStakeAddressAddressesAssetsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesAssetsResponseBody429 = GetAccountsStakeAddressAddressesAssetsResponseBody429 {
  -- | error
  getAccountsStakeAddressAddressesAssetsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesAssetsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesAssetsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesAssetsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesAssetsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesAssetsResponseBody429" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesAssetsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesAssetsResponseBody429' with all required fields.
mkGetAccountsStakeAddressAddressesAssetsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody429StatusCode'
  -> GetAccountsStakeAddressAddressesAssetsResponseBody429
mkGetAccountsStakeAddressAddressesAssetsResponseBody429 getAccountsStakeAddressAddressesAssetsResponseBody429Error getAccountsStakeAddressAddressesAssetsResponseBody429Message getAccountsStakeAddressAddressesAssetsResponseBody429StatusCode = GetAccountsStakeAddressAddressesAssetsResponseBody429{getAccountsStakeAddressAddressesAssetsResponseBody429Error = getAccountsStakeAddressAddressesAssetsResponseBody429Error,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody429Message = getAccountsStakeAddressAddressesAssetsResponseBody429Message,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody429StatusCode = getAccountsStakeAddressAddressesAssetsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressAddressesAssetsResponseBody500 = GetAccountsStakeAddressAddressesAssetsResponseBody500 {
  -- | error
  getAccountsStakeAddressAddressesAssetsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressAddressesAssetsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressAddressesAssetsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressAddressesAssetsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressAddressesAssetsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressAddressesAssetsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressAddressesAssetsResponseBody500" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressAddressesAssetsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressAddressesAssetsResponseBody500' with all required fields.
mkGetAccountsStakeAddressAddressesAssetsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressAddressesAssetsResponseBody500StatusCode'
  -> GetAccountsStakeAddressAddressesAssetsResponseBody500
mkGetAccountsStakeAddressAddressesAssetsResponseBody500 getAccountsStakeAddressAddressesAssetsResponseBody500Error getAccountsStakeAddressAddressesAssetsResponseBody500Message getAccountsStakeAddressAddressesAssetsResponseBody500StatusCode = GetAccountsStakeAddressAddressesAssetsResponseBody500{getAccountsStakeAddressAddressesAssetsResponseBody500Error = getAccountsStakeAddressAddressesAssetsResponseBody500Error,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody500Message = getAccountsStakeAddressAddressesAssetsResponseBody500Message,
                                                                                                                                                                                                                                                                                                        getAccountsStakeAddressAddressesAssetsResponseBody500StatusCode = getAccountsStakeAddressAddressesAssetsResponseBody500StatusCode}
-- | > GET /accounts/{stake_address}/addresses/assets
-- 
-- The same as 'getAccounts_StakeAddress_AddressesAssets' but accepts an explicit configuration.
getAccounts_StakeAddress_AddressesAssetsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressAddressesAssetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressAddressesAssetsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_AddressesAssetsWithConfiguration config
                                                          parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressAddressesAssetsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AccountAddressesAssets)
                                                                                                                                                                                                                                        | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAccountsStakeAddressAddressesAssetsResponseBody400)
                                                                                                                                                                                                                                        | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAccountsStakeAddressAddressesAssetsResponseBody403)
                                                                                                                                                                                                                                        | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAccountsStakeAddressAddressesAssetsResponseBody404)
                                                                                                                                                                                                                                        | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAccountsStakeAddressAddressesAssetsResponseBody418)
                                                                                                                                                                                                                                        | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAccountsStakeAddressAddressesAssetsResponseBody429)
                                                                                                                                                                                                                                        | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressAddressesAssetsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetAccountsStakeAddressAddressesAssetsResponseBody500)
                                                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress parameters))) GHC.Base.++ "/addresses/assets"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/addresses/assets
-- 
-- The same as 'getAccounts_StakeAddress_AddressesAssets' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_AddressesAssetsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressAddressesAssetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_AddressesAssetsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress parameters))) GHC.Base.++ "/addresses/assets"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/addresses/assets
-- 
-- The same as 'getAccounts_StakeAddress_AddressesAssets' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_AddressesAssetsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressAddressesAssetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_AddressesAssetsWithConfigurationRaw config
                                                             parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressAddressesAssetsParametersPathStakeAddress parameters))) GHC.Base.++ "/addresses/assets"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressAddressesAssetsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
