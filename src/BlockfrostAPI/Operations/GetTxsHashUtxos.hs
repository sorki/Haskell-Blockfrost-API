-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTxs_Hash_Utxos
module BlockfrostAPI.Operations.GetTxsHashUtxos where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /txs/{hash}/utxos
-- 
-- Return the inputs and UTXOs of the specific transaction.
getTxs_Hash_Utxos :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetTxsHashUtxosResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_Utxos hash = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTxsHashUtxosResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  TxContentUtxo)
                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashUtxosResponseBody400)
                                                                                                                                                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashUtxosResponseBody403)
                                                                                                                                                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashUtxosResponseBody404)
                                                                                                                                                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashUtxosResponseBody418)
                                                                                                                                                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashUtxosResponseBody429)
                                                                                                                                                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  GetTxsHashUtxosResponseBody500)
                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/utxos"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getTxs_Hash_Utxos'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTxsHashUtxosResponseError' is used.
data GetTxsHashUtxosResponse =
   GetTxsHashUtxosResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTxsHashUtxosResponse200 TxContentUtxo -- ^ Return the contents of the transaction.
  | GetTxsHashUtxosResponse400 GetTxsHashUtxosResponseBody400 -- ^ Bad request
  | GetTxsHashUtxosResponse403 GetTxsHashUtxosResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetTxsHashUtxosResponse404 GetTxsHashUtxosResponseBody404 -- ^ Component not found
  | GetTxsHashUtxosResponse418 GetTxsHashUtxosResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetTxsHashUtxosResponse429 GetTxsHashUtxosResponseBody429 -- ^ Usage limit reached
  | GetTxsHashUtxosResponse500 GetTxsHashUtxosResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashUtxosResponseBody400 = GetTxsHashUtxosResponseBody400 {
  -- | error
  getTxsHashUtxosResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashUtxosResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashUtxosResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashUtxosResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashUtxosResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashUtxosResponseBody400" (\obj -> ((GHC.Base.pure GetTxsHashUtxosResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashUtxosResponseBody400' with all required fields.
mkGetTxsHashUtxosResponseBody400 :: Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashUtxosResponseBody400StatusCode'
  -> GetTxsHashUtxosResponseBody400
mkGetTxsHashUtxosResponseBody400 getTxsHashUtxosResponseBody400Error getTxsHashUtxosResponseBody400Message getTxsHashUtxosResponseBody400StatusCode = GetTxsHashUtxosResponseBody400{getTxsHashUtxosResponseBody400Error = getTxsHashUtxosResponseBody400Error,
                                                                                                                                                                                     getTxsHashUtxosResponseBody400Message = getTxsHashUtxosResponseBody400Message,
                                                                                                                                                                                     getTxsHashUtxosResponseBody400StatusCode = getTxsHashUtxosResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashUtxosResponseBody403 = GetTxsHashUtxosResponseBody403 {
  -- | error
  getTxsHashUtxosResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashUtxosResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashUtxosResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashUtxosResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashUtxosResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashUtxosResponseBody403" (\obj -> ((GHC.Base.pure GetTxsHashUtxosResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashUtxosResponseBody403' with all required fields.
mkGetTxsHashUtxosResponseBody403 :: Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashUtxosResponseBody403StatusCode'
  -> GetTxsHashUtxosResponseBody403
mkGetTxsHashUtxosResponseBody403 getTxsHashUtxosResponseBody403Error getTxsHashUtxosResponseBody403Message getTxsHashUtxosResponseBody403StatusCode = GetTxsHashUtxosResponseBody403{getTxsHashUtxosResponseBody403Error = getTxsHashUtxosResponseBody403Error,
                                                                                                                                                                                     getTxsHashUtxosResponseBody403Message = getTxsHashUtxosResponseBody403Message,
                                                                                                                                                                                     getTxsHashUtxosResponseBody403StatusCode = getTxsHashUtxosResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashUtxosResponseBody404 = GetTxsHashUtxosResponseBody404 {
  -- | error
  getTxsHashUtxosResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashUtxosResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashUtxosResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashUtxosResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashUtxosResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashUtxosResponseBody404" (\obj -> ((GHC.Base.pure GetTxsHashUtxosResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashUtxosResponseBody404' with all required fields.
mkGetTxsHashUtxosResponseBody404 :: Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashUtxosResponseBody404StatusCode'
  -> GetTxsHashUtxosResponseBody404
mkGetTxsHashUtxosResponseBody404 getTxsHashUtxosResponseBody404Error getTxsHashUtxosResponseBody404Message getTxsHashUtxosResponseBody404StatusCode = GetTxsHashUtxosResponseBody404{getTxsHashUtxosResponseBody404Error = getTxsHashUtxosResponseBody404Error,
                                                                                                                                                                                     getTxsHashUtxosResponseBody404Message = getTxsHashUtxosResponseBody404Message,
                                                                                                                                                                                     getTxsHashUtxosResponseBody404StatusCode = getTxsHashUtxosResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashUtxosResponseBody418 = GetTxsHashUtxosResponseBody418 {
  -- | error
  getTxsHashUtxosResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashUtxosResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashUtxosResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashUtxosResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashUtxosResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashUtxosResponseBody418" (\obj -> ((GHC.Base.pure GetTxsHashUtxosResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashUtxosResponseBody418' with all required fields.
mkGetTxsHashUtxosResponseBody418 :: Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashUtxosResponseBody418StatusCode'
  -> GetTxsHashUtxosResponseBody418
mkGetTxsHashUtxosResponseBody418 getTxsHashUtxosResponseBody418Error getTxsHashUtxosResponseBody418Message getTxsHashUtxosResponseBody418StatusCode = GetTxsHashUtxosResponseBody418{getTxsHashUtxosResponseBody418Error = getTxsHashUtxosResponseBody418Error,
                                                                                                                                                                                     getTxsHashUtxosResponseBody418Message = getTxsHashUtxosResponseBody418Message,
                                                                                                                                                                                     getTxsHashUtxosResponseBody418StatusCode = getTxsHashUtxosResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashUtxosResponseBody429 = GetTxsHashUtxosResponseBody429 {
  -- | error
  getTxsHashUtxosResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashUtxosResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashUtxosResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashUtxosResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashUtxosResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashUtxosResponseBody429" (\obj -> ((GHC.Base.pure GetTxsHashUtxosResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashUtxosResponseBody429' with all required fields.
mkGetTxsHashUtxosResponseBody429 :: Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashUtxosResponseBody429StatusCode'
  -> GetTxsHashUtxosResponseBody429
mkGetTxsHashUtxosResponseBody429 getTxsHashUtxosResponseBody429Error getTxsHashUtxosResponseBody429Message getTxsHashUtxosResponseBody429StatusCode = GetTxsHashUtxosResponseBody429{getTxsHashUtxosResponseBody429Error = getTxsHashUtxosResponseBody429Error,
                                                                                                                                                                                     getTxsHashUtxosResponseBody429Message = getTxsHashUtxosResponseBody429Message,
                                                                                                                                                                                     getTxsHashUtxosResponseBody429StatusCode = getTxsHashUtxosResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashUtxosResponseBody500 = GetTxsHashUtxosResponseBody500 {
  -- | error
  getTxsHashUtxosResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashUtxosResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashUtxosResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashUtxosResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashUtxosResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashUtxosResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashUtxosResponseBody500" (\obj -> ((GHC.Base.pure GetTxsHashUtxosResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashUtxosResponseBody500' with all required fields.
mkGetTxsHashUtxosResponseBody500 :: Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashUtxosResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashUtxosResponseBody500StatusCode'
  -> GetTxsHashUtxosResponseBody500
mkGetTxsHashUtxosResponseBody500 getTxsHashUtxosResponseBody500Error getTxsHashUtxosResponseBody500Message getTxsHashUtxosResponseBody500StatusCode = GetTxsHashUtxosResponseBody500{getTxsHashUtxosResponseBody500Error = getTxsHashUtxosResponseBody500Error,
                                                                                                                                                                                     getTxsHashUtxosResponseBody500Message = getTxsHashUtxosResponseBody500Message,
                                                                                                                                                                                     getTxsHashUtxosResponseBody500StatusCode = getTxsHashUtxosResponseBody500StatusCode}
-- | > GET /txs/{hash}/utxos
-- 
-- The same as 'getTxs_Hash_Utxos' but accepts an explicit configuration.
getTxs_Hash_UtxosWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> m (Network.HTTP.Client.Types.Response GetTxsHashUtxosResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_UtxosWithConfiguration config
                                   hash = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetTxsHashUtxosResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   TxContentUtxo)
                                                                                                                                                                                    | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashUtxosResponseBody400)
                                                                                                                                                                                    | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashUtxosResponseBody403)
                                                                                                                                                                                    | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashUtxosResponseBody404)
                                                                                                                                                                                    | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashUtxosResponseBody418)
                                                                                                                                                                                    | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashUtxosResponseBody429)
                                                                                                                                                                                    | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashUtxosResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashUtxosResponseBody500)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/utxos"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/utxos
-- 
-- The same as 'getTxs_Hash_Utxos' but returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_UtxosRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_UtxosRaw hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/utxos"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/utxos
-- 
-- The same as 'getTxs_Hash_Utxos' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_UtxosWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_UtxosWithConfigurationRaw config
                                      hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/utxos"))) GHC.Base.mempty)
