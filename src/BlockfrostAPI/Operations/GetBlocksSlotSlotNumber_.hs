-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBlocksSlot_SlotNumber_
module BlockfrostAPI.Operations.GetBlocksSlotSlotNumber_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /blocks/slot/{slot_number}
-- 
-- Return the content of a requested block for a specific slot.
getBlocksSlot_SlotNumber_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GHC.Integer.Type.Integer -- ^ slot_number: Slot position for requested block.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetBlocksSlotSlotNumberResponse) -- ^ Monadic computation which returns the result of the operation
getBlocksSlot_SlotNumber_ slotNumber = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBlocksSlotSlotNumberResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                BlockContent)
                                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetBlocksSlotSlotNumberResponseBody400)
                                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetBlocksSlotSlotNumberResponseBody403)
                                                                                                                                                                                         | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetBlocksSlotSlotNumberResponseBody404)
                                                                                                                                                                                         | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetBlocksSlotSlotNumberResponseBody418)
                                                                                                                                                                                         | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetBlocksSlotSlotNumberResponseBody429)
                                                                                                                                                                                         | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetBlocksSlotSlotNumberResponseBody500)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/slot/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel slotNumber)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getBlocksSlot_SlotNumber_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBlocksSlotSlotNumberResponseError' is used.
data GetBlocksSlotSlotNumberResponse =
   GetBlocksSlotSlotNumberResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBlocksSlotSlotNumberResponse200 BlockContent -- ^ Return the contents of the block
  | GetBlocksSlotSlotNumberResponse400 GetBlocksSlotSlotNumberResponseBody400 -- ^ Bad request
  | GetBlocksSlotSlotNumberResponse403 GetBlocksSlotSlotNumberResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetBlocksSlotSlotNumberResponse404 GetBlocksSlotSlotNumberResponseBody404 -- ^ Component not found
  | GetBlocksSlotSlotNumberResponse418 GetBlocksSlotSlotNumberResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetBlocksSlotSlotNumberResponse429 GetBlocksSlotSlotNumberResponseBody429 -- ^ Usage limit reached
  | GetBlocksSlotSlotNumberResponse500 GetBlocksSlotSlotNumberResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksSlotSlotNumberResponseBody400 = GetBlocksSlotSlotNumberResponseBody400 {
  -- | error
  getBlocksSlotSlotNumberResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksSlotSlotNumberResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksSlotSlotNumberResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksSlotSlotNumberResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksSlotSlotNumberResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksSlotSlotNumberResponseBody400" (\obj -> ((GHC.Base.pure GetBlocksSlotSlotNumberResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksSlotSlotNumberResponseBody400' with all required fields.
mkGetBlocksSlotSlotNumberResponseBody400 :: Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksSlotSlotNumberResponseBody400StatusCode'
  -> GetBlocksSlotSlotNumberResponseBody400
mkGetBlocksSlotSlotNumberResponseBody400 getBlocksSlotSlotNumberResponseBody400Error getBlocksSlotSlotNumberResponseBody400Message getBlocksSlotSlotNumberResponseBody400StatusCode = GetBlocksSlotSlotNumberResponseBody400{getBlocksSlotSlotNumberResponseBody400Error = getBlocksSlotSlotNumberResponseBody400Error,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody400Message = getBlocksSlotSlotNumberResponseBody400Message,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody400StatusCode = getBlocksSlotSlotNumberResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksSlotSlotNumberResponseBody403 = GetBlocksSlotSlotNumberResponseBody403 {
  -- | error
  getBlocksSlotSlotNumberResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksSlotSlotNumberResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksSlotSlotNumberResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksSlotSlotNumberResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksSlotSlotNumberResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksSlotSlotNumberResponseBody403" (\obj -> ((GHC.Base.pure GetBlocksSlotSlotNumberResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksSlotSlotNumberResponseBody403' with all required fields.
mkGetBlocksSlotSlotNumberResponseBody403 :: Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksSlotSlotNumberResponseBody403StatusCode'
  -> GetBlocksSlotSlotNumberResponseBody403
mkGetBlocksSlotSlotNumberResponseBody403 getBlocksSlotSlotNumberResponseBody403Error getBlocksSlotSlotNumberResponseBody403Message getBlocksSlotSlotNumberResponseBody403StatusCode = GetBlocksSlotSlotNumberResponseBody403{getBlocksSlotSlotNumberResponseBody403Error = getBlocksSlotSlotNumberResponseBody403Error,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody403Message = getBlocksSlotSlotNumberResponseBody403Message,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody403StatusCode = getBlocksSlotSlotNumberResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksSlotSlotNumberResponseBody404 = GetBlocksSlotSlotNumberResponseBody404 {
  -- | error
  getBlocksSlotSlotNumberResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksSlotSlotNumberResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksSlotSlotNumberResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksSlotSlotNumberResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksSlotSlotNumberResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksSlotSlotNumberResponseBody404" (\obj -> ((GHC.Base.pure GetBlocksSlotSlotNumberResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksSlotSlotNumberResponseBody404' with all required fields.
mkGetBlocksSlotSlotNumberResponseBody404 :: Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksSlotSlotNumberResponseBody404StatusCode'
  -> GetBlocksSlotSlotNumberResponseBody404
mkGetBlocksSlotSlotNumberResponseBody404 getBlocksSlotSlotNumberResponseBody404Error getBlocksSlotSlotNumberResponseBody404Message getBlocksSlotSlotNumberResponseBody404StatusCode = GetBlocksSlotSlotNumberResponseBody404{getBlocksSlotSlotNumberResponseBody404Error = getBlocksSlotSlotNumberResponseBody404Error,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody404Message = getBlocksSlotSlotNumberResponseBody404Message,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody404StatusCode = getBlocksSlotSlotNumberResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksSlotSlotNumberResponseBody418 = GetBlocksSlotSlotNumberResponseBody418 {
  -- | error
  getBlocksSlotSlotNumberResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksSlotSlotNumberResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksSlotSlotNumberResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksSlotSlotNumberResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksSlotSlotNumberResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksSlotSlotNumberResponseBody418" (\obj -> ((GHC.Base.pure GetBlocksSlotSlotNumberResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksSlotSlotNumberResponseBody418' with all required fields.
mkGetBlocksSlotSlotNumberResponseBody418 :: Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksSlotSlotNumberResponseBody418StatusCode'
  -> GetBlocksSlotSlotNumberResponseBody418
mkGetBlocksSlotSlotNumberResponseBody418 getBlocksSlotSlotNumberResponseBody418Error getBlocksSlotSlotNumberResponseBody418Message getBlocksSlotSlotNumberResponseBody418StatusCode = GetBlocksSlotSlotNumberResponseBody418{getBlocksSlotSlotNumberResponseBody418Error = getBlocksSlotSlotNumberResponseBody418Error,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody418Message = getBlocksSlotSlotNumberResponseBody418Message,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody418StatusCode = getBlocksSlotSlotNumberResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksSlotSlotNumberResponseBody429 = GetBlocksSlotSlotNumberResponseBody429 {
  -- | error
  getBlocksSlotSlotNumberResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksSlotSlotNumberResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksSlotSlotNumberResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksSlotSlotNumberResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksSlotSlotNumberResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksSlotSlotNumberResponseBody429" (\obj -> ((GHC.Base.pure GetBlocksSlotSlotNumberResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksSlotSlotNumberResponseBody429' with all required fields.
mkGetBlocksSlotSlotNumberResponseBody429 :: Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksSlotSlotNumberResponseBody429StatusCode'
  -> GetBlocksSlotSlotNumberResponseBody429
mkGetBlocksSlotSlotNumberResponseBody429 getBlocksSlotSlotNumberResponseBody429Error getBlocksSlotSlotNumberResponseBody429Message getBlocksSlotSlotNumberResponseBody429StatusCode = GetBlocksSlotSlotNumberResponseBody429{getBlocksSlotSlotNumberResponseBody429Error = getBlocksSlotSlotNumberResponseBody429Error,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody429Message = getBlocksSlotSlotNumberResponseBody429Message,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody429StatusCode = getBlocksSlotSlotNumberResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksSlotSlotNumberResponseBody500 = GetBlocksSlotSlotNumberResponseBody500 {
  -- | error
  getBlocksSlotSlotNumberResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksSlotSlotNumberResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksSlotSlotNumberResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksSlotSlotNumberResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksSlotSlotNumberResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksSlotSlotNumberResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksSlotSlotNumberResponseBody500" (\obj -> ((GHC.Base.pure GetBlocksSlotSlotNumberResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksSlotSlotNumberResponseBody500' with all required fields.
mkGetBlocksSlotSlotNumberResponseBody500 :: Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksSlotSlotNumberResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksSlotSlotNumberResponseBody500StatusCode'
  -> GetBlocksSlotSlotNumberResponseBody500
mkGetBlocksSlotSlotNumberResponseBody500 getBlocksSlotSlotNumberResponseBody500Error getBlocksSlotSlotNumberResponseBody500Message getBlocksSlotSlotNumberResponseBody500StatusCode = GetBlocksSlotSlotNumberResponseBody500{getBlocksSlotSlotNumberResponseBody500Error = getBlocksSlotSlotNumberResponseBody500Error,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody500Message = getBlocksSlotSlotNumberResponseBody500Message,
                                                                                                                                                                                                                             getBlocksSlotSlotNumberResponseBody500StatusCode = getBlocksSlotSlotNumberResponseBody500StatusCode}
-- | > GET /blocks/slot/{slot_number}
-- 
-- The same as 'getBlocksSlot_SlotNumber_' but accepts an explicit configuration.
getBlocksSlot_SlotNumber_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer -- ^ slot_number: Slot position for requested block.
  -> m (Network.HTTP.Client.Types.Response GetBlocksSlotSlotNumberResponse) -- ^ Monadic computation which returns the result of the operation
getBlocksSlot_SlotNumber_WithConfiguration config
                                           slotNumber = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetBlocksSlotSlotNumberResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockContent)
                                                                                                                                                                                                          | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksSlotSlotNumberResponseBody400)
                                                                                                                                                                                                          | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksSlotSlotNumberResponseBody403)
                                                                                                                                                                                                          | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksSlotSlotNumberResponseBody404)
                                                                                                                                                                                                          | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksSlotSlotNumberResponseBody418)
                                                                                                                                                                                                          | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksSlotSlotNumberResponseBody429)
                                                                                                                                                                                                          | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksSlotSlotNumberResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetBlocksSlotSlotNumberResponseBody500)
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/slot/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel slotNumber)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /blocks/slot/{slot_number}
-- 
-- The same as 'getBlocksSlot_SlotNumber_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocksSlot_SlotNumber_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GHC.Integer.Type.Integer -- ^ slot_number: Slot position for requested block.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocksSlot_SlotNumber_Raw slotNumber = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/slot/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel slotNumber)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /blocks/slot/{slot_number}
-- 
-- The same as 'getBlocksSlot_SlotNumber_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocksSlot_SlotNumber_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer -- ^ slot_number: Slot position for requested block.
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocksSlot_SlotNumber_WithConfigurationRaw config
                                              slotNumber = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/slot/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel slotNumber)) GHC.Base.++ ""))) GHC.Base.mempty)
