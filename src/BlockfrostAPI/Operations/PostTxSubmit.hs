-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postTxSubmit
module BlockfrostAPI.Operations.PostTxSubmit where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > POST /tx/submit
-- 
-- Submit an already serialized transaction to the network.
postTxSubmit :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostTxSubmitResponse) -- ^ Monadic computation which returns the result of the operation
postTxSubmit = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostTxSubmitResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  Data.Text.Internal.Text)
                                                                                                                                                      | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  PostTxSubmitResponseBody400)
                                                                                                                                                      | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  PostTxSubmitResponseBody403)
                                                                                                                                                      | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  PostTxSubmitResponseBody404)
                                                                                                                                                      | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  PostTxSubmitResponseBody418)
                                                                                                                                                      | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  PostTxSubmitResponseBody429)
                                                                                                                                                      | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  PostTxSubmitResponseBody500)
                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/tx/submit") GHC.Base.mempty)
-- | Represents a response of the operation 'postTxSubmit'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostTxSubmitResponseError' is used.
data PostTxSubmitResponse =
   PostTxSubmitResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostTxSubmitResponse200 Data.Text.Internal.Text -- ^ Return the ID of the submitted transaction.
  | PostTxSubmitResponse400 PostTxSubmitResponseBody400 -- ^ Bad request
  | PostTxSubmitResponse403 PostTxSubmitResponseBody403 -- ^ Authentication secret is missing or invalid
  | PostTxSubmitResponse404 PostTxSubmitResponseBody404 -- ^ Component not found
  | PostTxSubmitResponse418 PostTxSubmitResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | PostTxSubmitResponse429 PostTxSubmitResponseBody429 -- ^ Usage limit reached
  | PostTxSubmitResponse500 PostTxSubmitResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data PostTxSubmitResponseBody400 = PostTxSubmitResponseBody400 {
  -- | error
  postTxSubmitResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , postTxSubmitResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , postTxSubmitResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTxSubmitResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostTxSubmitResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTxSubmitResponseBody400" (\obj -> ((GHC.Base.pure PostTxSubmitResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostTxSubmitResponseBody400' with all required fields.
mkPostTxSubmitResponseBody400 :: Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'postTxSubmitResponseBody400StatusCode'
  -> PostTxSubmitResponseBody400
mkPostTxSubmitResponseBody400 postTxSubmitResponseBody400Error postTxSubmitResponseBody400Message postTxSubmitResponseBody400StatusCode = PostTxSubmitResponseBody400{postTxSubmitResponseBody400Error = postTxSubmitResponseBody400Error,
                                                                                                                                                                      postTxSubmitResponseBody400Message = postTxSubmitResponseBody400Message,
                                                                                                                                                                      postTxSubmitResponseBody400StatusCode = postTxSubmitResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data PostTxSubmitResponseBody403 = PostTxSubmitResponseBody403 {
  -- | error
  postTxSubmitResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , postTxSubmitResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , postTxSubmitResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTxSubmitResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostTxSubmitResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTxSubmitResponseBody403" (\obj -> ((GHC.Base.pure PostTxSubmitResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostTxSubmitResponseBody403' with all required fields.
mkPostTxSubmitResponseBody403 :: Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'postTxSubmitResponseBody403StatusCode'
  -> PostTxSubmitResponseBody403
mkPostTxSubmitResponseBody403 postTxSubmitResponseBody403Error postTxSubmitResponseBody403Message postTxSubmitResponseBody403StatusCode = PostTxSubmitResponseBody403{postTxSubmitResponseBody403Error = postTxSubmitResponseBody403Error,
                                                                                                                                                                      postTxSubmitResponseBody403Message = postTxSubmitResponseBody403Message,
                                                                                                                                                                      postTxSubmitResponseBody403StatusCode = postTxSubmitResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data PostTxSubmitResponseBody404 = PostTxSubmitResponseBody404 {
  -- | error
  postTxSubmitResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , postTxSubmitResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , postTxSubmitResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTxSubmitResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostTxSubmitResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTxSubmitResponseBody404" (\obj -> ((GHC.Base.pure PostTxSubmitResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostTxSubmitResponseBody404' with all required fields.
mkPostTxSubmitResponseBody404 :: Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'postTxSubmitResponseBody404StatusCode'
  -> PostTxSubmitResponseBody404
mkPostTxSubmitResponseBody404 postTxSubmitResponseBody404Error postTxSubmitResponseBody404Message postTxSubmitResponseBody404StatusCode = PostTxSubmitResponseBody404{postTxSubmitResponseBody404Error = postTxSubmitResponseBody404Error,
                                                                                                                                                                      postTxSubmitResponseBody404Message = postTxSubmitResponseBody404Message,
                                                                                                                                                                      postTxSubmitResponseBody404StatusCode = postTxSubmitResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data PostTxSubmitResponseBody418 = PostTxSubmitResponseBody418 {
  -- | error
  postTxSubmitResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , postTxSubmitResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , postTxSubmitResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTxSubmitResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostTxSubmitResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTxSubmitResponseBody418" (\obj -> ((GHC.Base.pure PostTxSubmitResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostTxSubmitResponseBody418' with all required fields.
mkPostTxSubmitResponseBody418 :: Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'postTxSubmitResponseBody418StatusCode'
  -> PostTxSubmitResponseBody418
mkPostTxSubmitResponseBody418 postTxSubmitResponseBody418Error postTxSubmitResponseBody418Message postTxSubmitResponseBody418StatusCode = PostTxSubmitResponseBody418{postTxSubmitResponseBody418Error = postTxSubmitResponseBody418Error,
                                                                                                                                                                      postTxSubmitResponseBody418Message = postTxSubmitResponseBody418Message,
                                                                                                                                                                      postTxSubmitResponseBody418StatusCode = postTxSubmitResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data PostTxSubmitResponseBody429 = PostTxSubmitResponseBody429 {
  -- | error
  postTxSubmitResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , postTxSubmitResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , postTxSubmitResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTxSubmitResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostTxSubmitResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTxSubmitResponseBody429" (\obj -> ((GHC.Base.pure PostTxSubmitResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostTxSubmitResponseBody429' with all required fields.
mkPostTxSubmitResponseBody429 :: Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'postTxSubmitResponseBody429StatusCode'
  -> PostTxSubmitResponseBody429
mkPostTxSubmitResponseBody429 postTxSubmitResponseBody429Error postTxSubmitResponseBody429Message postTxSubmitResponseBody429StatusCode = PostTxSubmitResponseBody429{postTxSubmitResponseBody429Error = postTxSubmitResponseBody429Error,
                                                                                                                                                                      postTxSubmitResponseBody429Message = postTxSubmitResponseBody429Message,
                                                                                                                                                                      postTxSubmitResponseBody429StatusCode = postTxSubmitResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data PostTxSubmitResponseBody500 = PostTxSubmitResponseBody500 {
  -- | error
  postTxSubmitResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , postTxSubmitResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , postTxSubmitResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTxSubmitResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postTxSubmitResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostTxSubmitResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTxSubmitResponseBody500" (\obj -> ((GHC.Base.pure PostTxSubmitResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostTxSubmitResponseBody500' with all required fields.
mkPostTxSubmitResponseBody500 :: Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'postTxSubmitResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'postTxSubmitResponseBody500StatusCode'
  -> PostTxSubmitResponseBody500
mkPostTxSubmitResponseBody500 postTxSubmitResponseBody500Error postTxSubmitResponseBody500Message postTxSubmitResponseBody500StatusCode = PostTxSubmitResponseBody500{postTxSubmitResponseBody500Error = postTxSubmitResponseBody500Error,
                                                                                                                                                                      postTxSubmitResponseBody500Message = postTxSubmitResponseBody500Message,
                                                                                                                                                                      postTxSubmitResponseBody500StatusCode = postTxSubmitResponseBody500StatusCode}
-- | > POST /tx/submit
-- 
-- The same as 'postTxSubmit' but accepts an explicit configuration.
postTxSubmitWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response PostTxSubmitResponse) -- ^ Monadic computation which returns the result of the operation
postTxSubmitWithConfiguration config = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either PostTxSubmitResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                          Data.Text.Internal.Text)
                                                                                                                                                                              | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            PostTxSubmitResponseBody400)
                                                                                                                                                                              | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            PostTxSubmitResponseBody403)
                                                                                                                                                                              | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            PostTxSubmitResponseBody404)
                                                                                                                                                                              | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            PostTxSubmitResponseBody418)
                                                                                                                                                                              | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            PostTxSubmitResponseBody429)
                                                                                                                                                                              | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> PostTxSubmitResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            PostTxSubmitResponseBody500)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/tx/submit") GHC.Base.mempty)
-- | > POST /tx/submit
-- 
-- The same as 'postTxSubmit' but returns the raw 'Data.ByteString.Char8.ByteString'.
postTxSubmitRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postTxSubmitRaw = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/tx/submit") GHC.Base.mempty)
-- | > POST /tx/submit
-- 
-- The same as 'postTxSubmit' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postTxSubmitWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postTxSubmitWithConfigurationRaw config = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/tx/submit") GHC.Base.mempty)
