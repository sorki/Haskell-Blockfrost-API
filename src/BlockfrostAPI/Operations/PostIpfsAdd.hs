-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postIpfsAdd
module BlockfrostAPI.Operations.PostIpfsAdd where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > POST /ipfs/add
-- 
-- You need to \`\/ipfs\/pin\/add\` an object to avoid it being garbage collected. This usage
-- is being counted in your user account quota.
postIpfsAdd :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostIpfsAddResponse) -- ^ Monadic computation which returns the result of the operation
postIpfsAdd = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostIpfsAddResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                               PostIpfsAddResponseBody200)
                                                                                                                                                    | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                               PostIpfsAddResponseBody400)
                                                                                                                                                    | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                               PostIpfsAddResponseBody403)
                                                                                                                                                    | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                               PostIpfsAddResponseBody404)
                                                                                                                                                    | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                               PostIpfsAddResponseBody418)
                                                                                                                                                    | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                               PostIpfsAddResponseBody429)
                                                                                                                                                    | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                               PostIpfsAddResponseBody500)
                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ipfs/add") GHC.Base.mempty)
-- | Represents a response of the operation 'postIpfsAdd'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostIpfsAddResponseError' is used.
data PostIpfsAddResponse =
   PostIpfsAddResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostIpfsAddResponse200 PostIpfsAddResponseBody200 -- ^ Returns information about added IPFS object
  | PostIpfsAddResponse400 PostIpfsAddResponseBody400 -- ^ Bad request
  | PostIpfsAddResponse403 PostIpfsAddResponseBody403 -- ^ Authentication secret is missing or invalid
  | PostIpfsAddResponse404 PostIpfsAddResponseBody404 -- ^ Component not found
  | PostIpfsAddResponse418 PostIpfsAddResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | PostIpfsAddResponse429 PostIpfsAddResponseBody429 -- ^ Usage limit reached
  | PostIpfsAddResponse500 PostIpfsAddResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/ipfs\/add.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsAddResponseBody200 = PostIpfsAddResponseBody200 {
  -- | ipfs_hash: IPFS hash of the file
  postIpfsAddResponseBody200IpfsHash :: Data.Text.Internal.Text
  -- | name: Name of the file
  , postIpfsAddResponseBody200Name :: Data.Text.Internal.Text
  -- | size: Size of the file
  , postIpfsAddResponseBody200Size :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsAddResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ipfs_hash" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody200IpfsHash obj : "name" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody200Name obj : "size" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody200Size obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ipfs_hash" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody200IpfsHash obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody200Name obj) GHC.Base.<> ("size" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody200Size obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsAddResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsAddResponseBody200" (\obj -> ((GHC.Base.pure PostIpfsAddResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipfs_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size"))
-- | Create a new 'PostIpfsAddResponseBody200' with all required fields.
mkPostIpfsAddResponseBody200 :: Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody200IpfsHash'
  -> Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody200Name'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsAddResponseBody200Size'
  -> PostIpfsAddResponseBody200
mkPostIpfsAddResponseBody200 postIpfsAddResponseBody200IpfsHash postIpfsAddResponseBody200Name postIpfsAddResponseBody200Size = PostIpfsAddResponseBody200{postIpfsAddResponseBody200IpfsHash = postIpfsAddResponseBody200IpfsHash,
                                                                                                                                                           postIpfsAddResponseBody200Name = postIpfsAddResponseBody200Name,
                                                                                                                                                           postIpfsAddResponseBody200Size = postIpfsAddResponseBody200Size}
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsAddResponseBody400 = PostIpfsAddResponseBody400 {
  -- | error
  postIpfsAddResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsAddResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsAddResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsAddResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsAddResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsAddResponseBody400" (\obj -> ((GHC.Base.pure PostIpfsAddResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsAddResponseBody400' with all required fields.
mkPostIpfsAddResponseBody400 :: Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsAddResponseBody400StatusCode'
  -> PostIpfsAddResponseBody400
mkPostIpfsAddResponseBody400 postIpfsAddResponseBody400Error postIpfsAddResponseBody400Message postIpfsAddResponseBody400StatusCode = PostIpfsAddResponseBody400{postIpfsAddResponseBody400Error = postIpfsAddResponseBody400Error,
                                                                                                                                                                 postIpfsAddResponseBody400Message = postIpfsAddResponseBody400Message,
                                                                                                                                                                 postIpfsAddResponseBody400StatusCode = postIpfsAddResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsAddResponseBody403 = PostIpfsAddResponseBody403 {
  -- | error
  postIpfsAddResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsAddResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsAddResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsAddResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsAddResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsAddResponseBody403" (\obj -> ((GHC.Base.pure PostIpfsAddResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsAddResponseBody403' with all required fields.
mkPostIpfsAddResponseBody403 :: Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsAddResponseBody403StatusCode'
  -> PostIpfsAddResponseBody403
mkPostIpfsAddResponseBody403 postIpfsAddResponseBody403Error postIpfsAddResponseBody403Message postIpfsAddResponseBody403StatusCode = PostIpfsAddResponseBody403{postIpfsAddResponseBody403Error = postIpfsAddResponseBody403Error,
                                                                                                                                                                 postIpfsAddResponseBody403Message = postIpfsAddResponseBody403Message,
                                                                                                                                                                 postIpfsAddResponseBody403StatusCode = postIpfsAddResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsAddResponseBody404 = PostIpfsAddResponseBody404 {
  -- | error
  postIpfsAddResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsAddResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsAddResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsAddResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsAddResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsAddResponseBody404" (\obj -> ((GHC.Base.pure PostIpfsAddResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsAddResponseBody404' with all required fields.
mkPostIpfsAddResponseBody404 :: Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsAddResponseBody404StatusCode'
  -> PostIpfsAddResponseBody404
mkPostIpfsAddResponseBody404 postIpfsAddResponseBody404Error postIpfsAddResponseBody404Message postIpfsAddResponseBody404StatusCode = PostIpfsAddResponseBody404{postIpfsAddResponseBody404Error = postIpfsAddResponseBody404Error,
                                                                                                                                                                 postIpfsAddResponseBody404Message = postIpfsAddResponseBody404Message,
                                                                                                                                                                 postIpfsAddResponseBody404StatusCode = postIpfsAddResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsAddResponseBody418 = PostIpfsAddResponseBody418 {
  -- | error
  postIpfsAddResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsAddResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsAddResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsAddResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsAddResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsAddResponseBody418" (\obj -> ((GHC.Base.pure PostIpfsAddResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsAddResponseBody418' with all required fields.
mkPostIpfsAddResponseBody418 :: Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsAddResponseBody418StatusCode'
  -> PostIpfsAddResponseBody418
mkPostIpfsAddResponseBody418 postIpfsAddResponseBody418Error postIpfsAddResponseBody418Message postIpfsAddResponseBody418StatusCode = PostIpfsAddResponseBody418{postIpfsAddResponseBody418Error = postIpfsAddResponseBody418Error,
                                                                                                                                                                 postIpfsAddResponseBody418Message = postIpfsAddResponseBody418Message,
                                                                                                                                                                 postIpfsAddResponseBody418StatusCode = postIpfsAddResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsAddResponseBody429 = PostIpfsAddResponseBody429 {
  -- | error
  postIpfsAddResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsAddResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsAddResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsAddResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsAddResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsAddResponseBody429" (\obj -> ((GHC.Base.pure PostIpfsAddResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsAddResponseBody429' with all required fields.
mkPostIpfsAddResponseBody429 :: Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsAddResponseBody429StatusCode'
  -> PostIpfsAddResponseBody429
mkPostIpfsAddResponseBody429 postIpfsAddResponseBody429Error postIpfsAddResponseBody429Message postIpfsAddResponseBody429StatusCode = PostIpfsAddResponseBody429{postIpfsAddResponseBody429Error = postIpfsAddResponseBody429Error,
                                                                                                                                                                 postIpfsAddResponseBody429Message = postIpfsAddResponseBody429Message,
                                                                                                                                                                 postIpfsAddResponseBody429StatusCode = postIpfsAddResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsAddResponseBody500 = PostIpfsAddResponseBody500 {
  -- | error
  postIpfsAddResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsAddResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsAddResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsAddResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsAddResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsAddResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsAddResponseBody500" (\obj -> ((GHC.Base.pure PostIpfsAddResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsAddResponseBody500' with all required fields.
mkPostIpfsAddResponseBody500 :: Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsAddResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsAddResponseBody500StatusCode'
  -> PostIpfsAddResponseBody500
mkPostIpfsAddResponseBody500 postIpfsAddResponseBody500Error postIpfsAddResponseBody500Message postIpfsAddResponseBody500StatusCode = PostIpfsAddResponseBody500{postIpfsAddResponseBody500Error = postIpfsAddResponseBody500Error,
                                                                                                                                                                 postIpfsAddResponseBody500Message = postIpfsAddResponseBody500Message,
                                                                                                                                                                 postIpfsAddResponseBody500StatusCode = postIpfsAddResponseBody500StatusCode}
-- | > POST /ipfs/add
-- 
-- The same as 'postIpfsAdd' but accepts an explicit configuration.
postIpfsAddWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response PostIpfsAddResponse) -- ^ Monadic computation which returns the result of the operation
postIpfsAddWithConfiguration config = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either PostIpfsAddResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       PostIpfsAddResponseBody200)
                                                                                                                                                                            | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         PostIpfsAddResponseBody400)
                                                                                                                                                                            | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         PostIpfsAddResponseBody403)
                                                                                                                                                                            | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         PostIpfsAddResponseBody404)
                                                                                                                                                                            | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         PostIpfsAddResponseBody418)
                                                                                                                                                                            | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         PostIpfsAddResponseBody429)
                                                                                                                                                                            | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsAddResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         PostIpfsAddResponseBody500)
                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ipfs/add") GHC.Base.mempty)
-- | > POST /ipfs/add
-- 
-- The same as 'postIpfsAdd' but returns the raw 'Data.ByteString.Char8.ByteString'.
postIpfsAddRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postIpfsAddRaw = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ipfs/add") GHC.Base.mempty)
-- | > POST /ipfs/add
-- 
-- The same as 'postIpfsAdd' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postIpfsAddWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postIpfsAddWithConfigurationRaw config = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ipfs/add") GHC.Base.mempty)
