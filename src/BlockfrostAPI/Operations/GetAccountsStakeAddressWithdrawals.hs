-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccounts_StakeAddress_Withdrawals
module BlockfrostAPI.Operations.GetAccountsStakeAddressWithdrawals where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /accounts/{stake_address}/withdrawals
-- 
-- Obtain information about the withdrawals of a specific account.
getAccounts_StakeAddress_Withdrawals :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressWithdrawalsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressWithdrawalsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_Withdrawals parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressWithdrawalsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AccountWithdrawalContent)
                                                                                                                                                                                                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressWithdrawalsResponseBody400)
                                                                                                                                                                                                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressWithdrawalsResponseBody403)
                                                                                                                                                                                                               | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressWithdrawalsResponseBody404)
                                                                                                                                                                                                               | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressWithdrawalsResponseBody418)
                                                                                                                                                                                                               | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressWithdrawalsResponseBody429)
                                                                                                                                                                                                               | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountsStakeAddressWithdrawalsResponseBody500)
                                                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressWithdrawalsParametersPathStakeAddress parameters))) GHC.Base.++ "/withdrawals"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/accounts\/{stake_address}\/withdrawals.GET.parameters@ in the specification.
-- 
-- 
data GetAccountsStakeAddressWithdrawalsParameters = GetAccountsStakeAddressWithdrawalsParameters {
  -- | pathStake_address: Represents the parameter named \'stake_address\'
  -- 
  -- Bech32 stake address.
  getAccountsStakeAddressWithdrawalsParametersPathStakeAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAccountsStakeAddressWithdrawalsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAccountsStakeAddressWithdrawalsParametersQueryOrder :: (GHC.Maybe.Maybe GetAccountsStakeAddressWithdrawalsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAccountsStakeAddressWithdrawalsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressWithdrawalsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsParametersPathStakeAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsParametersPathStakeAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressWithdrawalsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressWithdrawalsParameters" (\obj -> (((GHC.Base.pure GetAccountsStakeAddressWithdrawalsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathStake_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAccountsStakeAddressWithdrawalsParameters' with all required fields.
mkGetAccountsStakeAddressWithdrawalsParameters :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsParametersPathStakeAddress'
  -> GetAccountsStakeAddressWithdrawalsParameters
mkGetAccountsStakeAddressWithdrawalsParameters getAccountsStakeAddressWithdrawalsParametersPathStakeAddress = GetAccountsStakeAddressWithdrawalsParameters{getAccountsStakeAddressWithdrawalsParametersPathStakeAddress = getAccountsStakeAddressWithdrawalsParametersPathStakeAddress,
                                                                                                                                                           getAccountsStakeAddressWithdrawalsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                                           getAccountsStakeAddressWithdrawalsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                                           getAccountsStakeAddressWithdrawalsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/accounts\/{stake_address}\/withdrawals.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAccountsStakeAddressWithdrawalsParametersQueryOrder' =
   GetAccountsStakeAddressWithdrawalsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAccountsStakeAddressWithdrawalsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAccountsStakeAddressWithdrawalsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAccountsStakeAddressWithdrawalsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressWithdrawalsParametersQueryOrder'
    where toJSON (GetAccountsStakeAddressWithdrawalsParametersQueryOrder'Other val) = val
          toJSON (GetAccountsStakeAddressWithdrawalsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAccountsStakeAddressWithdrawalsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAccountsStakeAddressWithdrawalsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressWithdrawalsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAccountsStakeAddressWithdrawalsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAccountsStakeAddressWithdrawalsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAccountsStakeAddressWithdrawalsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAccounts_StakeAddress_Withdrawals'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountsStakeAddressWithdrawalsResponseError' is used.
data GetAccountsStakeAddressWithdrawalsResponse =
   GetAccountsStakeAddressWithdrawalsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountsStakeAddressWithdrawalsResponse200 AccountWithdrawalContent -- ^ Return the account withdrawal content.
  | GetAccountsStakeAddressWithdrawalsResponse400 GetAccountsStakeAddressWithdrawalsResponseBody400 -- ^ Bad request
  | GetAccountsStakeAddressWithdrawalsResponse403 GetAccountsStakeAddressWithdrawalsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAccountsStakeAddressWithdrawalsResponse404 GetAccountsStakeAddressWithdrawalsResponseBody404 -- ^ Component not found
  | GetAccountsStakeAddressWithdrawalsResponse418 GetAccountsStakeAddressWithdrawalsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAccountsStakeAddressWithdrawalsResponse429 GetAccountsStakeAddressWithdrawalsResponseBody429 -- ^ Usage limit reached
  | GetAccountsStakeAddressWithdrawalsResponse500 GetAccountsStakeAddressWithdrawalsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressWithdrawalsResponseBody400 = GetAccountsStakeAddressWithdrawalsResponseBody400 {
  -- | error
  getAccountsStakeAddressWithdrawalsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressWithdrawalsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressWithdrawalsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressWithdrawalsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressWithdrawalsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressWithdrawalsResponseBody400" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressWithdrawalsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressWithdrawalsResponseBody400' with all required fields.
mkGetAccountsStakeAddressWithdrawalsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody400StatusCode'
  -> GetAccountsStakeAddressWithdrawalsResponseBody400
mkGetAccountsStakeAddressWithdrawalsResponseBody400 getAccountsStakeAddressWithdrawalsResponseBody400Error getAccountsStakeAddressWithdrawalsResponseBody400Message getAccountsStakeAddressWithdrawalsResponseBody400StatusCode = GetAccountsStakeAddressWithdrawalsResponseBody400{getAccountsStakeAddressWithdrawalsResponseBody400Error = getAccountsStakeAddressWithdrawalsResponseBody400Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody400Message = getAccountsStakeAddressWithdrawalsResponseBody400Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody400StatusCode = getAccountsStakeAddressWithdrawalsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressWithdrawalsResponseBody403 = GetAccountsStakeAddressWithdrawalsResponseBody403 {
  -- | error
  getAccountsStakeAddressWithdrawalsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressWithdrawalsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressWithdrawalsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressWithdrawalsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressWithdrawalsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressWithdrawalsResponseBody403" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressWithdrawalsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressWithdrawalsResponseBody403' with all required fields.
mkGetAccountsStakeAddressWithdrawalsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody403StatusCode'
  -> GetAccountsStakeAddressWithdrawalsResponseBody403
mkGetAccountsStakeAddressWithdrawalsResponseBody403 getAccountsStakeAddressWithdrawalsResponseBody403Error getAccountsStakeAddressWithdrawalsResponseBody403Message getAccountsStakeAddressWithdrawalsResponseBody403StatusCode = GetAccountsStakeAddressWithdrawalsResponseBody403{getAccountsStakeAddressWithdrawalsResponseBody403Error = getAccountsStakeAddressWithdrawalsResponseBody403Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody403Message = getAccountsStakeAddressWithdrawalsResponseBody403Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody403StatusCode = getAccountsStakeAddressWithdrawalsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressWithdrawalsResponseBody404 = GetAccountsStakeAddressWithdrawalsResponseBody404 {
  -- | error
  getAccountsStakeAddressWithdrawalsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressWithdrawalsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressWithdrawalsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressWithdrawalsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressWithdrawalsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressWithdrawalsResponseBody404" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressWithdrawalsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressWithdrawalsResponseBody404' with all required fields.
mkGetAccountsStakeAddressWithdrawalsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody404StatusCode'
  -> GetAccountsStakeAddressWithdrawalsResponseBody404
mkGetAccountsStakeAddressWithdrawalsResponseBody404 getAccountsStakeAddressWithdrawalsResponseBody404Error getAccountsStakeAddressWithdrawalsResponseBody404Message getAccountsStakeAddressWithdrawalsResponseBody404StatusCode = GetAccountsStakeAddressWithdrawalsResponseBody404{getAccountsStakeAddressWithdrawalsResponseBody404Error = getAccountsStakeAddressWithdrawalsResponseBody404Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody404Message = getAccountsStakeAddressWithdrawalsResponseBody404Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody404StatusCode = getAccountsStakeAddressWithdrawalsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressWithdrawalsResponseBody418 = GetAccountsStakeAddressWithdrawalsResponseBody418 {
  -- | error
  getAccountsStakeAddressWithdrawalsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressWithdrawalsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressWithdrawalsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressWithdrawalsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressWithdrawalsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressWithdrawalsResponseBody418" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressWithdrawalsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressWithdrawalsResponseBody418' with all required fields.
mkGetAccountsStakeAddressWithdrawalsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody418StatusCode'
  -> GetAccountsStakeAddressWithdrawalsResponseBody418
mkGetAccountsStakeAddressWithdrawalsResponseBody418 getAccountsStakeAddressWithdrawalsResponseBody418Error getAccountsStakeAddressWithdrawalsResponseBody418Message getAccountsStakeAddressWithdrawalsResponseBody418StatusCode = GetAccountsStakeAddressWithdrawalsResponseBody418{getAccountsStakeAddressWithdrawalsResponseBody418Error = getAccountsStakeAddressWithdrawalsResponseBody418Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody418Message = getAccountsStakeAddressWithdrawalsResponseBody418Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody418StatusCode = getAccountsStakeAddressWithdrawalsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressWithdrawalsResponseBody429 = GetAccountsStakeAddressWithdrawalsResponseBody429 {
  -- | error
  getAccountsStakeAddressWithdrawalsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressWithdrawalsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressWithdrawalsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressWithdrawalsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressWithdrawalsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressWithdrawalsResponseBody429" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressWithdrawalsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressWithdrawalsResponseBody429' with all required fields.
mkGetAccountsStakeAddressWithdrawalsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody429StatusCode'
  -> GetAccountsStakeAddressWithdrawalsResponseBody429
mkGetAccountsStakeAddressWithdrawalsResponseBody429 getAccountsStakeAddressWithdrawalsResponseBody429Error getAccountsStakeAddressWithdrawalsResponseBody429Message getAccountsStakeAddressWithdrawalsResponseBody429StatusCode = GetAccountsStakeAddressWithdrawalsResponseBody429{getAccountsStakeAddressWithdrawalsResponseBody429Error = getAccountsStakeAddressWithdrawalsResponseBody429Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody429Message = getAccountsStakeAddressWithdrawalsResponseBody429Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody429StatusCode = getAccountsStakeAddressWithdrawalsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressWithdrawalsResponseBody500 = GetAccountsStakeAddressWithdrawalsResponseBody500 {
  -- | error
  getAccountsStakeAddressWithdrawalsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressWithdrawalsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressWithdrawalsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressWithdrawalsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressWithdrawalsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressWithdrawalsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressWithdrawalsResponseBody500" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressWithdrawalsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressWithdrawalsResponseBody500' with all required fields.
mkGetAccountsStakeAddressWithdrawalsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressWithdrawalsResponseBody500StatusCode'
  -> GetAccountsStakeAddressWithdrawalsResponseBody500
mkGetAccountsStakeAddressWithdrawalsResponseBody500 getAccountsStakeAddressWithdrawalsResponseBody500Error getAccountsStakeAddressWithdrawalsResponseBody500Message getAccountsStakeAddressWithdrawalsResponseBody500StatusCode = GetAccountsStakeAddressWithdrawalsResponseBody500{getAccountsStakeAddressWithdrawalsResponseBody500Error = getAccountsStakeAddressWithdrawalsResponseBody500Error,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody500Message = getAccountsStakeAddressWithdrawalsResponseBody500Message,
                                                                                                                                                                                                                                                                                    getAccountsStakeAddressWithdrawalsResponseBody500StatusCode = getAccountsStakeAddressWithdrawalsResponseBody500StatusCode}
-- | > GET /accounts/{stake_address}/withdrawals
-- 
-- The same as 'getAccounts_StakeAddress_Withdrawals' but accepts an explicit configuration.
getAccounts_StakeAddress_WithdrawalsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressWithdrawalsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressWithdrawalsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_WithdrawalsWithConfiguration config
                                                      parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressWithdrawalsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AccountWithdrawalContent)
                                                                                                                                                                                                                                | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressWithdrawalsResponseBody400)
                                                                                                                                                                                                                                | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressWithdrawalsResponseBody403)
                                                                                                                                                                                                                                | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressWithdrawalsResponseBody404)
                                                                                                                                                                                                                                | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressWithdrawalsResponseBody418)
                                                                                                                                                                                                                                | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressWithdrawalsResponseBody429)
                                                                                                                                                                                                                                | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressWithdrawalsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetAccountsStakeAddressWithdrawalsResponseBody500)
                                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressWithdrawalsParametersPathStakeAddress parameters))) GHC.Base.++ "/withdrawals"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/withdrawals
-- 
-- The same as 'getAccounts_StakeAddress_Withdrawals' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_WithdrawalsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressWithdrawalsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_WithdrawalsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressWithdrawalsParametersPathStakeAddress parameters))) GHC.Base.++ "/withdrawals"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/withdrawals
-- 
-- The same as 'getAccounts_StakeAddress_Withdrawals' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_WithdrawalsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressWithdrawalsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_WithdrawalsWithConfigurationRaw config
                                                         parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressWithdrawalsParametersPathStakeAddress parameters))) GHC.Base.++ "/withdrawals"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressWithdrawalsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
