-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPoolsRetiring
module BlockfrostAPI.Operations.GetPoolsRetiring where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /pools/retiring
-- 
-- List of stake pools retiring in the upcoming epochs
getPoolsRetiring :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsRetiringParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetPoolsRetiringResponse) -- ^ Monadic computation which returns the result of the operation
getPoolsRetiring parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPoolsRetiringResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         PoolListRetire)
                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiringResponseBody400)
                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiringResponseBody403)
                                                                                                                                                                         | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiringResponseBody404)
                                                                                                                                                                         | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiringResponseBody418)
                                                                                                                                                                         | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiringResponseBody429)
                                                                                                                                                                         | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetPoolsRetiringResponseBody500)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/retiring") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/pools\/retiring.GET.parameters@ in the specification.
-- 
-- 
data GetPoolsRetiringParameters = GetPoolsRetiringParameters {
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  getPoolsRetiringParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getPoolsRetiringParametersQueryOrder :: (GHC.Maybe.Maybe GetPoolsRetiringParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getPoolsRetiringParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiringParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryCount" Data.Aeson.Types.ToJSON..= getPoolsRetiringParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getPoolsRetiringParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getPoolsRetiringParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryCount" Data.Aeson.Types.ToJSON..= getPoolsRetiringParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getPoolsRetiringParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getPoolsRetiringParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiringParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiringParameters" (\obj -> ((GHC.Base.pure GetPoolsRetiringParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetPoolsRetiringParameters' with all required fields.
mkGetPoolsRetiringParameters :: GetPoolsRetiringParameters
mkGetPoolsRetiringParameters = GetPoolsRetiringParameters{getPoolsRetiringParametersQueryCount = GHC.Maybe.Nothing,
                                                          getPoolsRetiringParametersQueryOrder = GHC.Maybe.Nothing,
                                                          getPoolsRetiringParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/pools\/retiring.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetPoolsRetiringParametersQueryOrder' =
   GetPoolsRetiringParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetPoolsRetiringParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetPoolsRetiringParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetPoolsRetiringParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiringParametersQueryOrder'
    where toJSON (GetPoolsRetiringParametersQueryOrder'Other val) = val
          toJSON (GetPoolsRetiringParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetPoolsRetiringParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetPoolsRetiringParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiringParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetPoolsRetiringParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetPoolsRetiringParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetPoolsRetiringParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getPoolsRetiring'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPoolsRetiringResponseError' is used.
data GetPoolsRetiringResponse =
   GetPoolsRetiringResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPoolsRetiringResponse200 PoolListRetire -- ^ Return the pool information content
  | GetPoolsRetiringResponse400 GetPoolsRetiringResponseBody400 -- ^ Bad request
  | GetPoolsRetiringResponse403 GetPoolsRetiringResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetPoolsRetiringResponse404 GetPoolsRetiringResponseBody404 -- ^ Component not found
  | GetPoolsRetiringResponse418 GetPoolsRetiringResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetPoolsRetiringResponse429 GetPoolsRetiringResponseBody429 -- ^ Usage limit reached
  | GetPoolsRetiringResponse500 GetPoolsRetiringResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiringResponseBody400 = GetPoolsRetiringResponseBody400 {
  -- | error
  getPoolsRetiringResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiringResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiringResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiringResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiringResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiringResponseBody400" (\obj -> ((GHC.Base.pure GetPoolsRetiringResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiringResponseBody400' with all required fields.
mkGetPoolsRetiringResponseBody400 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiringResponseBody400StatusCode'
  -> GetPoolsRetiringResponseBody400
mkGetPoolsRetiringResponseBody400 getPoolsRetiringResponseBody400Error getPoolsRetiringResponseBody400Message getPoolsRetiringResponseBody400StatusCode = GetPoolsRetiringResponseBody400{getPoolsRetiringResponseBody400Error = getPoolsRetiringResponseBody400Error,
                                                                                                                                                                                          getPoolsRetiringResponseBody400Message = getPoolsRetiringResponseBody400Message,
                                                                                                                                                                                          getPoolsRetiringResponseBody400StatusCode = getPoolsRetiringResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiringResponseBody403 = GetPoolsRetiringResponseBody403 {
  -- | error
  getPoolsRetiringResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiringResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiringResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiringResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiringResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiringResponseBody403" (\obj -> ((GHC.Base.pure GetPoolsRetiringResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiringResponseBody403' with all required fields.
mkGetPoolsRetiringResponseBody403 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiringResponseBody403StatusCode'
  -> GetPoolsRetiringResponseBody403
mkGetPoolsRetiringResponseBody403 getPoolsRetiringResponseBody403Error getPoolsRetiringResponseBody403Message getPoolsRetiringResponseBody403StatusCode = GetPoolsRetiringResponseBody403{getPoolsRetiringResponseBody403Error = getPoolsRetiringResponseBody403Error,
                                                                                                                                                                                          getPoolsRetiringResponseBody403Message = getPoolsRetiringResponseBody403Message,
                                                                                                                                                                                          getPoolsRetiringResponseBody403StatusCode = getPoolsRetiringResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiringResponseBody404 = GetPoolsRetiringResponseBody404 {
  -- | error
  getPoolsRetiringResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiringResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiringResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiringResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiringResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiringResponseBody404" (\obj -> ((GHC.Base.pure GetPoolsRetiringResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiringResponseBody404' with all required fields.
mkGetPoolsRetiringResponseBody404 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiringResponseBody404StatusCode'
  -> GetPoolsRetiringResponseBody404
mkGetPoolsRetiringResponseBody404 getPoolsRetiringResponseBody404Error getPoolsRetiringResponseBody404Message getPoolsRetiringResponseBody404StatusCode = GetPoolsRetiringResponseBody404{getPoolsRetiringResponseBody404Error = getPoolsRetiringResponseBody404Error,
                                                                                                                                                                                          getPoolsRetiringResponseBody404Message = getPoolsRetiringResponseBody404Message,
                                                                                                                                                                                          getPoolsRetiringResponseBody404StatusCode = getPoolsRetiringResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiringResponseBody418 = GetPoolsRetiringResponseBody418 {
  -- | error
  getPoolsRetiringResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiringResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiringResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiringResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiringResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiringResponseBody418" (\obj -> ((GHC.Base.pure GetPoolsRetiringResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiringResponseBody418' with all required fields.
mkGetPoolsRetiringResponseBody418 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiringResponseBody418StatusCode'
  -> GetPoolsRetiringResponseBody418
mkGetPoolsRetiringResponseBody418 getPoolsRetiringResponseBody418Error getPoolsRetiringResponseBody418Message getPoolsRetiringResponseBody418StatusCode = GetPoolsRetiringResponseBody418{getPoolsRetiringResponseBody418Error = getPoolsRetiringResponseBody418Error,
                                                                                                                                                                                          getPoolsRetiringResponseBody418Message = getPoolsRetiringResponseBody418Message,
                                                                                                                                                                                          getPoolsRetiringResponseBody418StatusCode = getPoolsRetiringResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiringResponseBody429 = GetPoolsRetiringResponseBody429 {
  -- | error
  getPoolsRetiringResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiringResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiringResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiringResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiringResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiringResponseBody429" (\obj -> ((GHC.Base.pure GetPoolsRetiringResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiringResponseBody429' with all required fields.
mkGetPoolsRetiringResponseBody429 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiringResponseBody429StatusCode'
  -> GetPoolsRetiringResponseBody429
mkGetPoolsRetiringResponseBody429 getPoolsRetiringResponseBody429Error getPoolsRetiringResponseBody429Message getPoolsRetiringResponseBody429StatusCode = GetPoolsRetiringResponseBody429{getPoolsRetiringResponseBody429Error = getPoolsRetiringResponseBody429Error,
                                                                                                                                                                                          getPoolsRetiringResponseBody429Message = getPoolsRetiringResponseBody429Message,
                                                                                                                                                                                          getPoolsRetiringResponseBody429StatusCode = getPoolsRetiringResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsRetiringResponseBody500 = GetPoolsRetiringResponseBody500 {
  -- | error
  getPoolsRetiringResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsRetiringResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsRetiringResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsRetiringResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsRetiringResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsRetiringResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsRetiringResponseBody500" (\obj -> ((GHC.Base.pure GetPoolsRetiringResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsRetiringResponseBody500' with all required fields.
mkGetPoolsRetiringResponseBody500 :: Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsRetiringResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsRetiringResponseBody500StatusCode'
  -> GetPoolsRetiringResponseBody500
mkGetPoolsRetiringResponseBody500 getPoolsRetiringResponseBody500Error getPoolsRetiringResponseBody500Message getPoolsRetiringResponseBody500StatusCode = GetPoolsRetiringResponseBody500{getPoolsRetiringResponseBody500Error = getPoolsRetiringResponseBody500Error,
                                                                                                                                                                                          getPoolsRetiringResponseBody500Message = getPoolsRetiringResponseBody500Message,
                                                                                                                                                                                          getPoolsRetiringResponseBody500StatusCode = getPoolsRetiringResponseBody500StatusCode}
-- | > GET /pools/retiring
-- 
-- The same as 'getPoolsRetiring' but accepts an explicit configuration.
getPoolsRetiringWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsRetiringParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetPoolsRetiringResponse) -- ^ Monadic computation which returns the result of the operation
getPoolsRetiringWithConfiguration config
                                  parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetPoolsRetiringResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          PoolListRetire)
                                                                                                                                                                                          | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsRetiringResponseBody400)
                                                                                                                                                                                          | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsRetiringResponseBody403)
                                                                                                                                                                                          | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsRetiringResponseBody404)
                                                                                                                                                                                          | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsRetiringResponseBody418)
                                                                                                                                                                                          | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsRetiringResponseBody429)
                                                                                                                                                                                          | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsRetiringResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetPoolsRetiringResponseBody500)
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/retiring") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                   BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/retiring
-- 
-- The same as 'getPoolsRetiring' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPoolsRetiringRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsRetiringParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPoolsRetiringRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/retiring") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                              BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                              BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/retiring
-- 
-- The same as 'getPoolsRetiring' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPoolsRetiringWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsRetiringParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPoolsRetiringWithConfigurationRaw config
                                     parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/retiring") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsRetiringParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
