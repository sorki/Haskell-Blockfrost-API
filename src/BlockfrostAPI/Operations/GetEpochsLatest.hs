-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getEpochsLatest
module BlockfrostAPI.Operations.GetEpochsLatest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /epochs/latest
-- 
-- Return the information about the latest, therefore current, epoch.
getEpochsLatest :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetEpochsLatestResponse) -- ^ Monadic computation which returns the result of the operation
getEpochsLatest = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetEpochsLatestResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           EpochContent)
                                                                                                                                                            | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetEpochsLatestResponseBody400)
                                                                                                                                                            | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetEpochsLatestResponseBody403)
                                                                                                                                                            | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetEpochsLatestResponseBody404)
                                                                                                                                                            | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetEpochsLatestResponseBody418)
                                                                                                                                                            | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetEpochsLatestResponseBody429)
                                                                                                                                                            | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetEpochsLatestResponseBody500)
                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/epochs/latest") GHC.Base.mempty)
-- | Represents a response of the operation 'getEpochsLatest'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetEpochsLatestResponseError' is used.
data GetEpochsLatestResponse =
   GetEpochsLatestResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetEpochsLatestResponse200 EpochContent -- ^ Return the data about the epoch
  | GetEpochsLatestResponse400 GetEpochsLatestResponseBody400 -- ^ Bad request
  | GetEpochsLatestResponse403 GetEpochsLatestResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetEpochsLatestResponse404 GetEpochsLatestResponseBody404 -- ^ Component not found
  | GetEpochsLatestResponse418 GetEpochsLatestResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetEpochsLatestResponse429 GetEpochsLatestResponseBody429 -- ^ Usage limit reached
  | GetEpochsLatestResponse500 GetEpochsLatestResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsLatestResponseBody400 = GetEpochsLatestResponseBody400 {
  -- | error
  getEpochsLatestResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsLatestResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsLatestResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsLatestResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsLatestResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsLatestResponseBody400" (\obj -> ((GHC.Base.pure GetEpochsLatestResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsLatestResponseBody400' with all required fields.
mkGetEpochsLatestResponseBody400 :: Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsLatestResponseBody400StatusCode'
  -> GetEpochsLatestResponseBody400
mkGetEpochsLatestResponseBody400 getEpochsLatestResponseBody400Error getEpochsLatestResponseBody400Message getEpochsLatestResponseBody400StatusCode = GetEpochsLatestResponseBody400{getEpochsLatestResponseBody400Error = getEpochsLatestResponseBody400Error,
                                                                                                                                                                                     getEpochsLatestResponseBody400Message = getEpochsLatestResponseBody400Message,
                                                                                                                                                                                     getEpochsLatestResponseBody400StatusCode = getEpochsLatestResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsLatestResponseBody403 = GetEpochsLatestResponseBody403 {
  -- | error
  getEpochsLatestResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsLatestResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsLatestResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsLatestResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsLatestResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsLatestResponseBody403" (\obj -> ((GHC.Base.pure GetEpochsLatestResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsLatestResponseBody403' with all required fields.
mkGetEpochsLatestResponseBody403 :: Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsLatestResponseBody403StatusCode'
  -> GetEpochsLatestResponseBody403
mkGetEpochsLatestResponseBody403 getEpochsLatestResponseBody403Error getEpochsLatestResponseBody403Message getEpochsLatestResponseBody403StatusCode = GetEpochsLatestResponseBody403{getEpochsLatestResponseBody403Error = getEpochsLatestResponseBody403Error,
                                                                                                                                                                                     getEpochsLatestResponseBody403Message = getEpochsLatestResponseBody403Message,
                                                                                                                                                                                     getEpochsLatestResponseBody403StatusCode = getEpochsLatestResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsLatestResponseBody404 = GetEpochsLatestResponseBody404 {
  -- | error
  getEpochsLatestResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsLatestResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsLatestResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsLatestResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsLatestResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsLatestResponseBody404" (\obj -> ((GHC.Base.pure GetEpochsLatestResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsLatestResponseBody404' with all required fields.
mkGetEpochsLatestResponseBody404 :: Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsLatestResponseBody404StatusCode'
  -> GetEpochsLatestResponseBody404
mkGetEpochsLatestResponseBody404 getEpochsLatestResponseBody404Error getEpochsLatestResponseBody404Message getEpochsLatestResponseBody404StatusCode = GetEpochsLatestResponseBody404{getEpochsLatestResponseBody404Error = getEpochsLatestResponseBody404Error,
                                                                                                                                                                                     getEpochsLatestResponseBody404Message = getEpochsLatestResponseBody404Message,
                                                                                                                                                                                     getEpochsLatestResponseBody404StatusCode = getEpochsLatestResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsLatestResponseBody418 = GetEpochsLatestResponseBody418 {
  -- | error
  getEpochsLatestResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsLatestResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsLatestResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsLatestResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsLatestResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsLatestResponseBody418" (\obj -> ((GHC.Base.pure GetEpochsLatestResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsLatestResponseBody418' with all required fields.
mkGetEpochsLatestResponseBody418 :: Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsLatestResponseBody418StatusCode'
  -> GetEpochsLatestResponseBody418
mkGetEpochsLatestResponseBody418 getEpochsLatestResponseBody418Error getEpochsLatestResponseBody418Message getEpochsLatestResponseBody418StatusCode = GetEpochsLatestResponseBody418{getEpochsLatestResponseBody418Error = getEpochsLatestResponseBody418Error,
                                                                                                                                                                                     getEpochsLatestResponseBody418Message = getEpochsLatestResponseBody418Message,
                                                                                                                                                                                     getEpochsLatestResponseBody418StatusCode = getEpochsLatestResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsLatestResponseBody429 = GetEpochsLatestResponseBody429 {
  -- | error
  getEpochsLatestResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsLatestResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsLatestResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsLatestResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsLatestResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsLatestResponseBody429" (\obj -> ((GHC.Base.pure GetEpochsLatestResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsLatestResponseBody429' with all required fields.
mkGetEpochsLatestResponseBody429 :: Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsLatestResponseBody429StatusCode'
  -> GetEpochsLatestResponseBody429
mkGetEpochsLatestResponseBody429 getEpochsLatestResponseBody429Error getEpochsLatestResponseBody429Message getEpochsLatestResponseBody429StatusCode = GetEpochsLatestResponseBody429{getEpochsLatestResponseBody429Error = getEpochsLatestResponseBody429Error,
                                                                                                                                                                                     getEpochsLatestResponseBody429Message = getEpochsLatestResponseBody429Message,
                                                                                                                                                                                     getEpochsLatestResponseBody429StatusCode = getEpochsLatestResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsLatestResponseBody500 = GetEpochsLatestResponseBody500 {
  -- | error
  getEpochsLatestResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsLatestResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsLatestResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsLatestResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsLatestResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsLatestResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsLatestResponseBody500" (\obj -> ((GHC.Base.pure GetEpochsLatestResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsLatestResponseBody500' with all required fields.
mkGetEpochsLatestResponseBody500 :: Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsLatestResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsLatestResponseBody500StatusCode'
  -> GetEpochsLatestResponseBody500
mkGetEpochsLatestResponseBody500 getEpochsLatestResponseBody500Error getEpochsLatestResponseBody500Message getEpochsLatestResponseBody500StatusCode = GetEpochsLatestResponseBody500{getEpochsLatestResponseBody500Error = getEpochsLatestResponseBody500Error,
                                                                                                                                                                                     getEpochsLatestResponseBody500Message = getEpochsLatestResponseBody500Message,
                                                                                                                                                                                     getEpochsLatestResponseBody500StatusCode = getEpochsLatestResponseBody500StatusCode}
-- | > GET /epochs/latest
-- 
-- The same as 'getEpochsLatest' but accepts an explicit configuration.
getEpochsLatestWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response GetEpochsLatestResponse) -- ^ Monadic computation which returns the result of the operation
getEpochsLatestWithConfiguration config = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetEpochsLatestResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   EpochContent)
                                                                                                                                                                                    | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsLatestResponseBody400)
                                                                                                                                                                                    | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsLatestResponseBody403)
                                                                                                                                                                                    | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsLatestResponseBody404)
                                                                                                                                                                                    | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsLatestResponseBody418)
                                                                                                                                                                                    | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsLatestResponseBody429)
                                                                                                                                                                                    | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsLatestResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetEpochsLatestResponseBody500)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/epochs/latest") GHC.Base.mempty)
-- | > GET /epochs/latest
-- 
-- The same as 'getEpochsLatest' but returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochsLatestRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochsLatestRaw = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/epochs/latest") GHC.Base.mempty)
-- | > GET /epochs/latest
-- 
-- The same as 'getEpochsLatest' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochsLatestWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochsLatestWithConfigurationRaw config = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/epochs/latest") GHC.Base.mempty)
