-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTxs_Hash_MetadataCbor
module BlockfrostAPI.Operations.GetTxsHashMetadataCbor where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /txs/{hash}/metadata/cbor
-- 
-- Obtain the transaction metadata in CBOR.
getTxs_Hash_MetadataCbor :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetTxsHashMetadataCborResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_MetadataCbor hash = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTxsHashMetadataCborResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       TxContentMetadataCbor)
                                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashMetadataCborResponseBody400)
                                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashMetadataCborResponseBody403)
                                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashMetadataCborResponseBody404)
                                                                                                                                                                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashMetadataCborResponseBody418)
                                                                                                                                                                                 | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashMetadataCborResponseBody429)
                                                                                                                                                                                 | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashMetadataCborResponseBody500)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/metadata/cbor"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getTxs_Hash_MetadataCbor'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTxsHashMetadataCborResponseError' is used.
data GetTxsHashMetadataCborResponse =
   GetTxsHashMetadataCborResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTxsHashMetadataCborResponse200 TxContentMetadataCbor -- ^ Obtain information about stake pool retirements within a specific transaction.
  | GetTxsHashMetadataCborResponse400 GetTxsHashMetadataCborResponseBody400 -- ^ Bad request
  | GetTxsHashMetadataCborResponse403 GetTxsHashMetadataCborResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetTxsHashMetadataCborResponse404 GetTxsHashMetadataCborResponseBody404 -- ^ Component not found
  | GetTxsHashMetadataCborResponse418 GetTxsHashMetadataCborResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetTxsHashMetadataCborResponse429 GetTxsHashMetadataCborResponseBody429 -- ^ Usage limit reached
  | GetTxsHashMetadataCborResponse500 GetTxsHashMetadataCborResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataCborResponseBody400 = GetTxsHashMetadataCborResponseBody400 {
  -- | error
  getTxsHashMetadataCborResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataCborResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataCborResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataCborResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataCborResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataCborResponseBody400" (\obj -> ((GHC.Base.pure GetTxsHashMetadataCborResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataCborResponseBody400' with all required fields.
mkGetTxsHashMetadataCborResponseBody400 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataCborResponseBody400StatusCode'
  -> GetTxsHashMetadataCborResponseBody400
mkGetTxsHashMetadataCborResponseBody400 getTxsHashMetadataCborResponseBody400Error getTxsHashMetadataCborResponseBody400Message getTxsHashMetadataCborResponseBody400StatusCode = GetTxsHashMetadataCborResponseBody400{getTxsHashMetadataCborResponseBody400Error = getTxsHashMetadataCborResponseBody400Error,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody400Message = getTxsHashMetadataCborResponseBody400Message,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody400StatusCode = getTxsHashMetadataCborResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataCborResponseBody403 = GetTxsHashMetadataCborResponseBody403 {
  -- | error
  getTxsHashMetadataCborResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataCborResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataCborResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataCborResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataCborResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataCborResponseBody403" (\obj -> ((GHC.Base.pure GetTxsHashMetadataCborResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataCborResponseBody403' with all required fields.
mkGetTxsHashMetadataCborResponseBody403 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataCborResponseBody403StatusCode'
  -> GetTxsHashMetadataCborResponseBody403
mkGetTxsHashMetadataCborResponseBody403 getTxsHashMetadataCborResponseBody403Error getTxsHashMetadataCborResponseBody403Message getTxsHashMetadataCborResponseBody403StatusCode = GetTxsHashMetadataCborResponseBody403{getTxsHashMetadataCborResponseBody403Error = getTxsHashMetadataCborResponseBody403Error,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody403Message = getTxsHashMetadataCborResponseBody403Message,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody403StatusCode = getTxsHashMetadataCborResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataCborResponseBody404 = GetTxsHashMetadataCborResponseBody404 {
  -- | error
  getTxsHashMetadataCborResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataCborResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataCborResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataCborResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataCborResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataCborResponseBody404" (\obj -> ((GHC.Base.pure GetTxsHashMetadataCborResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataCborResponseBody404' with all required fields.
mkGetTxsHashMetadataCborResponseBody404 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataCborResponseBody404StatusCode'
  -> GetTxsHashMetadataCborResponseBody404
mkGetTxsHashMetadataCborResponseBody404 getTxsHashMetadataCborResponseBody404Error getTxsHashMetadataCborResponseBody404Message getTxsHashMetadataCborResponseBody404StatusCode = GetTxsHashMetadataCborResponseBody404{getTxsHashMetadataCborResponseBody404Error = getTxsHashMetadataCborResponseBody404Error,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody404Message = getTxsHashMetadataCborResponseBody404Message,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody404StatusCode = getTxsHashMetadataCborResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataCborResponseBody418 = GetTxsHashMetadataCborResponseBody418 {
  -- | error
  getTxsHashMetadataCborResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataCborResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataCborResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataCborResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataCborResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataCborResponseBody418" (\obj -> ((GHC.Base.pure GetTxsHashMetadataCborResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataCborResponseBody418' with all required fields.
mkGetTxsHashMetadataCborResponseBody418 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataCborResponseBody418StatusCode'
  -> GetTxsHashMetadataCborResponseBody418
mkGetTxsHashMetadataCborResponseBody418 getTxsHashMetadataCborResponseBody418Error getTxsHashMetadataCborResponseBody418Message getTxsHashMetadataCborResponseBody418StatusCode = GetTxsHashMetadataCborResponseBody418{getTxsHashMetadataCborResponseBody418Error = getTxsHashMetadataCborResponseBody418Error,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody418Message = getTxsHashMetadataCborResponseBody418Message,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody418StatusCode = getTxsHashMetadataCborResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataCborResponseBody429 = GetTxsHashMetadataCborResponseBody429 {
  -- | error
  getTxsHashMetadataCborResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataCborResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataCborResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataCborResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataCborResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataCborResponseBody429" (\obj -> ((GHC.Base.pure GetTxsHashMetadataCborResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataCborResponseBody429' with all required fields.
mkGetTxsHashMetadataCborResponseBody429 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataCborResponseBody429StatusCode'
  -> GetTxsHashMetadataCborResponseBody429
mkGetTxsHashMetadataCborResponseBody429 getTxsHashMetadataCborResponseBody429Error getTxsHashMetadataCborResponseBody429Message getTxsHashMetadataCborResponseBody429StatusCode = GetTxsHashMetadataCborResponseBody429{getTxsHashMetadataCborResponseBody429Error = getTxsHashMetadataCborResponseBody429Error,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody429Message = getTxsHashMetadataCborResponseBody429Message,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody429StatusCode = getTxsHashMetadataCborResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashMetadataCborResponseBody500 = GetTxsHashMetadataCborResponseBody500 {
  -- | error
  getTxsHashMetadataCborResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashMetadataCborResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashMetadataCborResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashMetadataCborResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashMetadataCborResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashMetadataCborResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashMetadataCborResponseBody500" (\obj -> ((GHC.Base.pure GetTxsHashMetadataCborResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashMetadataCborResponseBody500' with all required fields.
mkGetTxsHashMetadataCborResponseBody500 :: Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashMetadataCborResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashMetadataCborResponseBody500StatusCode'
  -> GetTxsHashMetadataCborResponseBody500
mkGetTxsHashMetadataCborResponseBody500 getTxsHashMetadataCborResponseBody500Error getTxsHashMetadataCborResponseBody500Message getTxsHashMetadataCborResponseBody500StatusCode = GetTxsHashMetadataCborResponseBody500{getTxsHashMetadataCborResponseBody500Error = getTxsHashMetadataCborResponseBody500Error,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody500Message = getTxsHashMetadataCborResponseBody500Message,
                                                                                                                                                                                                                        getTxsHashMetadataCborResponseBody500StatusCode = getTxsHashMetadataCborResponseBody500StatusCode}
-- | > GET /txs/{hash}/metadata/cbor
-- 
-- The same as 'getTxs_Hash_MetadataCbor' but accepts an explicit configuration.
getTxs_Hash_MetadataCborWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> m (Network.HTTP.Client.Types.Response GetTxsHashMetadataCborResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_MetadataCborWithConfiguration config
                                          hash = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetTxsHashMetadataCborResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                        TxContentMetadataCbor)
                                                                                                                                                                                                  | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetTxsHashMetadataCborResponseBody400)
                                                                                                                                                                                                  | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetTxsHashMetadataCborResponseBody403)
                                                                                                                                                                                                  | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetTxsHashMetadataCborResponseBody404)
                                                                                                                                                                                                  | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetTxsHashMetadataCborResponseBody418)
                                                                                                                                                                                                  | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetTxsHashMetadataCborResponseBody429)
                                                                                                                                                                                                  | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashMetadataCborResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetTxsHashMetadataCborResponseBody500)
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/metadata/cbor"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/metadata/cbor
-- 
-- The same as 'getTxs_Hash_MetadataCbor' but returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_MetadataCborRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_MetadataCborRaw hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/metadata/cbor"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/metadata/cbor
-- 
-- The same as 'getTxs_Hash_MetadataCbor' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_MetadataCborWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_MetadataCborWithConfigurationRaw config
                                             hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/metadata/cbor"))) GHC.Base.mempty)
