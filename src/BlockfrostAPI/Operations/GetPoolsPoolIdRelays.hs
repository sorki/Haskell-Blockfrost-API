-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPools_PoolId_Relays
module BlockfrostAPI.Operations.GetPoolsPoolIdRelays where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /pools/{pool_id}/relays
-- 
-- Relays of a stake pool.
getPools_PoolId_Relays :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetPoolsPoolIdRelaysResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_Relays poolId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdRelaysResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   PoolRelays)
                                                                                                                                                                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdRelaysResponseBody400)
                                                                                                                                                                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdRelaysResponseBody403)
                                                                                                                                                                               | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdRelaysResponseBody404)
                                                                                                                                                                               | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdRelaysResponseBody418)
                                                                                                                                                                               | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdRelaysResponseBody429)
                                                                                                                                                                               | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdRelaysResponseBody500)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ "/relays"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getPools_PoolId_Relays'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPoolsPoolIdRelaysResponseError' is used.
data GetPoolsPoolIdRelaysResponse =
   GetPoolsPoolIdRelaysResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPoolsPoolIdRelaysResponse200 PoolRelays -- ^ Return the pool relays information content.
  | GetPoolsPoolIdRelaysResponse400 GetPoolsPoolIdRelaysResponseBody400 -- ^ Bad request
  | GetPoolsPoolIdRelaysResponse403 GetPoolsPoolIdRelaysResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetPoolsPoolIdRelaysResponse404 GetPoolsPoolIdRelaysResponseBody404 -- ^ Component not found
  | GetPoolsPoolIdRelaysResponse418 GetPoolsPoolIdRelaysResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetPoolsPoolIdRelaysResponse429 GetPoolsPoolIdRelaysResponseBody429 -- ^ Usage limit reached
  | GetPoolsPoolIdRelaysResponse500 GetPoolsPoolIdRelaysResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdRelaysResponseBody400 = GetPoolsPoolIdRelaysResponseBody400 {
  -- | error
  getPoolsPoolIdRelaysResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdRelaysResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdRelaysResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdRelaysResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdRelaysResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdRelaysResponseBody400" (\obj -> ((GHC.Base.pure GetPoolsPoolIdRelaysResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdRelaysResponseBody400' with all required fields.
mkGetPoolsPoolIdRelaysResponseBody400 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdRelaysResponseBody400StatusCode'
  -> GetPoolsPoolIdRelaysResponseBody400
mkGetPoolsPoolIdRelaysResponseBody400 getPoolsPoolIdRelaysResponseBody400Error getPoolsPoolIdRelaysResponseBody400Message getPoolsPoolIdRelaysResponseBody400StatusCode = GetPoolsPoolIdRelaysResponseBody400{getPoolsPoolIdRelaysResponseBody400Error = getPoolsPoolIdRelaysResponseBody400Error,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody400Message = getPoolsPoolIdRelaysResponseBody400Message,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody400StatusCode = getPoolsPoolIdRelaysResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdRelaysResponseBody403 = GetPoolsPoolIdRelaysResponseBody403 {
  -- | error
  getPoolsPoolIdRelaysResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdRelaysResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdRelaysResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdRelaysResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdRelaysResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdRelaysResponseBody403" (\obj -> ((GHC.Base.pure GetPoolsPoolIdRelaysResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdRelaysResponseBody403' with all required fields.
mkGetPoolsPoolIdRelaysResponseBody403 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdRelaysResponseBody403StatusCode'
  -> GetPoolsPoolIdRelaysResponseBody403
mkGetPoolsPoolIdRelaysResponseBody403 getPoolsPoolIdRelaysResponseBody403Error getPoolsPoolIdRelaysResponseBody403Message getPoolsPoolIdRelaysResponseBody403StatusCode = GetPoolsPoolIdRelaysResponseBody403{getPoolsPoolIdRelaysResponseBody403Error = getPoolsPoolIdRelaysResponseBody403Error,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody403Message = getPoolsPoolIdRelaysResponseBody403Message,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody403StatusCode = getPoolsPoolIdRelaysResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdRelaysResponseBody404 = GetPoolsPoolIdRelaysResponseBody404 {
  -- | error
  getPoolsPoolIdRelaysResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdRelaysResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdRelaysResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdRelaysResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdRelaysResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdRelaysResponseBody404" (\obj -> ((GHC.Base.pure GetPoolsPoolIdRelaysResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdRelaysResponseBody404' with all required fields.
mkGetPoolsPoolIdRelaysResponseBody404 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdRelaysResponseBody404StatusCode'
  -> GetPoolsPoolIdRelaysResponseBody404
mkGetPoolsPoolIdRelaysResponseBody404 getPoolsPoolIdRelaysResponseBody404Error getPoolsPoolIdRelaysResponseBody404Message getPoolsPoolIdRelaysResponseBody404StatusCode = GetPoolsPoolIdRelaysResponseBody404{getPoolsPoolIdRelaysResponseBody404Error = getPoolsPoolIdRelaysResponseBody404Error,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody404Message = getPoolsPoolIdRelaysResponseBody404Message,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody404StatusCode = getPoolsPoolIdRelaysResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdRelaysResponseBody418 = GetPoolsPoolIdRelaysResponseBody418 {
  -- | error
  getPoolsPoolIdRelaysResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdRelaysResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdRelaysResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdRelaysResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdRelaysResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdRelaysResponseBody418" (\obj -> ((GHC.Base.pure GetPoolsPoolIdRelaysResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdRelaysResponseBody418' with all required fields.
mkGetPoolsPoolIdRelaysResponseBody418 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdRelaysResponseBody418StatusCode'
  -> GetPoolsPoolIdRelaysResponseBody418
mkGetPoolsPoolIdRelaysResponseBody418 getPoolsPoolIdRelaysResponseBody418Error getPoolsPoolIdRelaysResponseBody418Message getPoolsPoolIdRelaysResponseBody418StatusCode = GetPoolsPoolIdRelaysResponseBody418{getPoolsPoolIdRelaysResponseBody418Error = getPoolsPoolIdRelaysResponseBody418Error,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody418Message = getPoolsPoolIdRelaysResponseBody418Message,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody418StatusCode = getPoolsPoolIdRelaysResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdRelaysResponseBody429 = GetPoolsPoolIdRelaysResponseBody429 {
  -- | error
  getPoolsPoolIdRelaysResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdRelaysResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdRelaysResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdRelaysResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdRelaysResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdRelaysResponseBody429" (\obj -> ((GHC.Base.pure GetPoolsPoolIdRelaysResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdRelaysResponseBody429' with all required fields.
mkGetPoolsPoolIdRelaysResponseBody429 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdRelaysResponseBody429StatusCode'
  -> GetPoolsPoolIdRelaysResponseBody429
mkGetPoolsPoolIdRelaysResponseBody429 getPoolsPoolIdRelaysResponseBody429Error getPoolsPoolIdRelaysResponseBody429Message getPoolsPoolIdRelaysResponseBody429StatusCode = GetPoolsPoolIdRelaysResponseBody429{getPoolsPoolIdRelaysResponseBody429Error = getPoolsPoolIdRelaysResponseBody429Error,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody429Message = getPoolsPoolIdRelaysResponseBody429Message,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody429StatusCode = getPoolsPoolIdRelaysResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdRelaysResponseBody500 = GetPoolsPoolIdRelaysResponseBody500 {
  -- | error
  getPoolsPoolIdRelaysResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdRelaysResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdRelaysResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdRelaysResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdRelaysResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdRelaysResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdRelaysResponseBody500" (\obj -> ((GHC.Base.pure GetPoolsPoolIdRelaysResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdRelaysResponseBody500' with all required fields.
mkGetPoolsPoolIdRelaysResponseBody500 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdRelaysResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdRelaysResponseBody500StatusCode'
  -> GetPoolsPoolIdRelaysResponseBody500
mkGetPoolsPoolIdRelaysResponseBody500 getPoolsPoolIdRelaysResponseBody500Error getPoolsPoolIdRelaysResponseBody500Message getPoolsPoolIdRelaysResponseBody500StatusCode = GetPoolsPoolIdRelaysResponseBody500{getPoolsPoolIdRelaysResponseBody500Error = getPoolsPoolIdRelaysResponseBody500Error,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody500Message = getPoolsPoolIdRelaysResponseBody500Message,
                                                                                                                                                                                                              getPoolsPoolIdRelaysResponseBody500StatusCode = getPoolsPoolIdRelaysResponseBody500StatusCode}
-- | > GET /pools/{pool_id}/relays
-- 
-- The same as 'getPools_PoolId_Relays' but accepts an explicit configuration.
getPools_PoolId_RelaysWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> m (Network.HTTP.Client.Types.Response GetPoolsPoolIdRelaysResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_RelaysWithConfiguration config
                                        poolId = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdRelaysResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                    PoolRelays)
                                                                                                                                                                                                | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdRelaysResponseBody400)
                                                                                                                                                                                                | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdRelaysResponseBody403)
                                                                                                                                                                                                | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdRelaysResponseBody404)
                                                                                                                                                                                                | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdRelaysResponseBody418)
                                                                                                                                                                                                | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdRelaysResponseBody429)
                                                                                                                                                                                                | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdRelaysResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdRelaysResponseBody500)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ "/relays"))) GHC.Base.mempty)
-- | > GET /pools/{pool_id}/relays
-- 
-- The same as 'getPools_PoolId_Relays' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_RelaysRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_RelaysRaw poolId = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ "/relays"))) GHC.Base.mempty)
-- | > GET /pools/{pool_id}/relays
-- 
-- The same as 'getPools_PoolId_Relays' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_RelaysWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ pool_id: Bech32 or hexadecimal pool ID.
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_RelaysWithConfigurationRaw config
                                           poolId = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel poolId)) GHC.Base.++ "/relays"))) GHC.Base.mempty)
