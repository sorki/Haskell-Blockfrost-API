-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPools_PoolId_Delegators
module BlockfrostAPI.Operations.GetPoolsPoolIdDelegators where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /pools/{pool_id}/delegators
-- 
-- List of current stake pools delegators.
getPools_PoolId_Delegators :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsPoolIdDelegatorsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetPoolsPoolIdDelegatorsResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_Delegators parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdDelegatorsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   PoolDelegators)
                                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdDelegatorsResponseBody400)
                                                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdDelegatorsResponseBody403)
                                                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdDelegatorsResponseBody404)
                                                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdDelegatorsResponseBody418)
                                                                                                                                                                                           | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdDelegatorsResponseBody429)
                                                                                                                                                                                           | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetPoolsPoolIdDelegatorsResponseBody500)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdDelegatorsParametersPathPoolId parameters))) GHC.Base.++ "/delegators"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/pools\/{pool_id}\/delegators.GET.parameters@ in the specification.
-- 
-- 
data GetPoolsPoolIdDelegatorsParameters = GetPoolsPoolIdDelegatorsParameters {
  -- | pathPool_id: Represents the parameter named \'pool_id\'
  -- 
  -- Bech32 or hexadecimal pool ID.
  getPoolsPoolIdDelegatorsParametersPathPoolId :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getPoolsPoolIdDelegatorsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getPoolsPoolIdDelegatorsParametersQueryOrder :: (GHC.Maybe.Maybe GetPoolsPoolIdDelegatorsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getPoolsPoolIdDelegatorsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdDelegatorsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathPool_id" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsParametersPathPoolId obj : "queryCount" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathPool_id" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsParametersPathPoolId obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdDelegatorsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdDelegatorsParameters" (\obj -> (((GHC.Base.pure GetPoolsPoolIdDelegatorsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathPool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetPoolsPoolIdDelegatorsParameters' with all required fields.
mkGetPoolsPoolIdDelegatorsParameters :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsParametersPathPoolId'
  -> GetPoolsPoolIdDelegatorsParameters
mkGetPoolsPoolIdDelegatorsParameters getPoolsPoolIdDelegatorsParametersPathPoolId = GetPoolsPoolIdDelegatorsParameters{getPoolsPoolIdDelegatorsParametersPathPoolId = getPoolsPoolIdDelegatorsParametersPathPoolId,
                                                                                                                       getPoolsPoolIdDelegatorsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                       getPoolsPoolIdDelegatorsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                       getPoolsPoolIdDelegatorsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/pools\/{pool_id}\/delegators.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetPoolsPoolIdDelegatorsParametersQueryOrder' =
   GetPoolsPoolIdDelegatorsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetPoolsPoolIdDelegatorsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetPoolsPoolIdDelegatorsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetPoolsPoolIdDelegatorsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdDelegatorsParametersQueryOrder'
    where toJSON (GetPoolsPoolIdDelegatorsParametersQueryOrder'Other val) = val
          toJSON (GetPoolsPoolIdDelegatorsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetPoolsPoolIdDelegatorsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetPoolsPoolIdDelegatorsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdDelegatorsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetPoolsPoolIdDelegatorsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetPoolsPoolIdDelegatorsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetPoolsPoolIdDelegatorsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getPools_PoolId_Delegators'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPoolsPoolIdDelegatorsResponseError' is used.
data GetPoolsPoolIdDelegatorsResponse =
   GetPoolsPoolIdDelegatorsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPoolsPoolIdDelegatorsResponse200 PoolDelegators -- ^ Return the pool delegations.
  | GetPoolsPoolIdDelegatorsResponse400 GetPoolsPoolIdDelegatorsResponseBody400 -- ^ Bad request
  | GetPoolsPoolIdDelegatorsResponse403 GetPoolsPoolIdDelegatorsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetPoolsPoolIdDelegatorsResponse404 GetPoolsPoolIdDelegatorsResponseBody404 -- ^ Component not found
  | GetPoolsPoolIdDelegatorsResponse418 GetPoolsPoolIdDelegatorsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetPoolsPoolIdDelegatorsResponse429 GetPoolsPoolIdDelegatorsResponseBody429 -- ^ Usage limit reached
  | GetPoolsPoolIdDelegatorsResponse500 GetPoolsPoolIdDelegatorsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdDelegatorsResponseBody400 = GetPoolsPoolIdDelegatorsResponseBody400 {
  -- | error
  getPoolsPoolIdDelegatorsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdDelegatorsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdDelegatorsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdDelegatorsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdDelegatorsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdDelegatorsResponseBody400" (\obj -> ((GHC.Base.pure GetPoolsPoolIdDelegatorsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdDelegatorsResponseBody400' with all required fields.
mkGetPoolsPoolIdDelegatorsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdDelegatorsResponseBody400StatusCode'
  -> GetPoolsPoolIdDelegatorsResponseBody400
mkGetPoolsPoolIdDelegatorsResponseBody400 getPoolsPoolIdDelegatorsResponseBody400Error getPoolsPoolIdDelegatorsResponseBody400Message getPoolsPoolIdDelegatorsResponseBody400StatusCode = GetPoolsPoolIdDelegatorsResponseBody400{getPoolsPoolIdDelegatorsResponseBody400Error = getPoolsPoolIdDelegatorsResponseBody400Error,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody400Message = getPoolsPoolIdDelegatorsResponseBody400Message,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody400StatusCode = getPoolsPoolIdDelegatorsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdDelegatorsResponseBody403 = GetPoolsPoolIdDelegatorsResponseBody403 {
  -- | error
  getPoolsPoolIdDelegatorsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdDelegatorsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdDelegatorsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdDelegatorsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdDelegatorsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdDelegatorsResponseBody403" (\obj -> ((GHC.Base.pure GetPoolsPoolIdDelegatorsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdDelegatorsResponseBody403' with all required fields.
mkGetPoolsPoolIdDelegatorsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdDelegatorsResponseBody403StatusCode'
  -> GetPoolsPoolIdDelegatorsResponseBody403
mkGetPoolsPoolIdDelegatorsResponseBody403 getPoolsPoolIdDelegatorsResponseBody403Error getPoolsPoolIdDelegatorsResponseBody403Message getPoolsPoolIdDelegatorsResponseBody403StatusCode = GetPoolsPoolIdDelegatorsResponseBody403{getPoolsPoolIdDelegatorsResponseBody403Error = getPoolsPoolIdDelegatorsResponseBody403Error,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody403Message = getPoolsPoolIdDelegatorsResponseBody403Message,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody403StatusCode = getPoolsPoolIdDelegatorsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdDelegatorsResponseBody404 = GetPoolsPoolIdDelegatorsResponseBody404 {
  -- | error
  getPoolsPoolIdDelegatorsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdDelegatorsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdDelegatorsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdDelegatorsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdDelegatorsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdDelegatorsResponseBody404" (\obj -> ((GHC.Base.pure GetPoolsPoolIdDelegatorsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdDelegatorsResponseBody404' with all required fields.
mkGetPoolsPoolIdDelegatorsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdDelegatorsResponseBody404StatusCode'
  -> GetPoolsPoolIdDelegatorsResponseBody404
mkGetPoolsPoolIdDelegatorsResponseBody404 getPoolsPoolIdDelegatorsResponseBody404Error getPoolsPoolIdDelegatorsResponseBody404Message getPoolsPoolIdDelegatorsResponseBody404StatusCode = GetPoolsPoolIdDelegatorsResponseBody404{getPoolsPoolIdDelegatorsResponseBody404Error = getPoolsPoolIdDelegatorsResponseBody404Error,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody404Message = getPoolsPoolIdDelegatorsResponseBody404Message,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody404StatusCode = getPoolsPoolIdDelegatorsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdDelegatorsResponseBody418 = GetPoolsPoolIdDelegatorsResponseBody418 {
  -- | error
  getPoolsPoolIdDelegatorsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdDelegatorsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdDelegatorsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdDelegatorsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdDelegatorsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdDelegatorsResponseBody418" (\obj -> ((GHC.Base.pure GetPoolsPoolIdDelegatorsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdDelegatorsResponseBody418' with all required fields.
mkGetPoolsPoolIdDelegatorsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdDelegatorsResponseBody418StatusCode'
  -> GetPoolsPoolIdDelegatorsResponseBody418
mkGetPoolsPoolIdDelegatorsResponseBody418 getPoolsPoolIdDelegatorsResponseBody418Error getPoolsPoolIdDelegatorsResponseBody418Message getPoolsPoolIdDelegatorsResponseBody418StatusCode = GetPoolsPoolIdDelegatorsResponseBody418{getPoolsPoolIdDelegatorsResponseBody418Error = getPoolsPoolIdDelegatorsResponseBody418Error,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody418Message = getPoolsPoolIdDelegatorsResponseBody418Message,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody418StatusCode = getPoolsPoolIdDelegatorsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdDelegatorsResponseBody429 = GetPoolsPoolIdDelegatorsResponseBody429 {
  -- | error
  getPoolsPoolIdDelegatorsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdDelegatorsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdDelegatorsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdDelegatorsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdDelegatorsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdDelegatorsResponseBody429" (\obj -> ((GHC.Base.pure GetPoolsPoolIdDelegatorsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdDelegatorsResponseBody429' with all required fields.
mkGetPoolsPoolIdDelegatorsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdDelegatorsResponseBody429StatusCode'
  -> GetPoolsPoolIdDelegatorsResponseBody429
mkGetPoolsPoolIdDelegatorsResponseBody429 getPoolsPoolIdDelegatorsResponseBody429Error getPoolsPoolIdDelegatorsResponseBody429Message getPoolsPoolIdDelegatorsResponseBody429StatusCode = GetPoolsPoolIdDelegatorsResponseBody429{getPoolsPoolIdDelegatorsResponseBody429Error = getPoolsPoolIdDelegatorsResponseBody429Error,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody429Message = getPoolsPoolIdDelegatorsResponseBody429Message,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody429StatusCode = getPoolsPoolIdDelegatorsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdDelegatorsResponseBody500 = GetPoolsPoolIdDelegatorsResponseBody500 {
  -- | error
  getPoolsPoolIdDelegatorsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdDelegatorsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdDelegatorsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdDelegatorsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdDelegatorsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdDelegatorsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdDelegatorsResponseBody500" (\obj -> ((GHC.Base.pure GetPoolsPoolIdDelegatorsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdDelegatorsResponseBody500' with all required fields.
mkGetPoolsPoolIdDelegatorsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdDelegatorsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdDelegatorsResponseBody500StatusCode'
  -> GetPoolsPoolIdDelegatorsResponseBody500
mkGetPoolsPoolIdDelegatorsResponseBody500 getPoolsPoolIdDelegatorsResponseBody500Error getPoolsPoolIdDelegatorsResponseBody500Message getPoolsPoolIdDelegatorsResponseBody500StatusCode = GetPoolsPoolIdDelegatorsResponseBody500{getPoolsPoolIdDelegatorsResponseBody500Error = getPoolsPoolIdDelegatorsResponseBody500Error,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody500Message = getPoolsPoolIdDelegatorsResponseBody500Message,
                                                                                                                                                                                                                                  getPoolsPoolIdDelegatorsResponseBody500StatusCode = getPoolsPoolIdDelegatorsResponseBody500StatusCode}
-- | > GET /pools/{pool_id}/delegators
-- 
-- The same as 'getPools_PoolId_Delegators' but accepts an explicit configuration.
getPools_PoolId_DelegatorsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsPoolIdDelegatorsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetPoolsPoolIdDelegatorsResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_DelegatorsWithConfiguration config
                                            parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdDelegatorsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PoolDelegators)
                                                                                                                                                                                                            | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdDelegatorsResponseBody400)
                                                                                                                                                                                                            | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdDelegatorsResponseBody403)
                                                                                                                                                                                                            | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdDelegatorsResponseBody404)
                                                                                                                                                                                                            | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdDelegatorsResponseBody418)
                                                                                                                                                                                                            | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdDelegatorsResponseBody429)
                                                                                                                                                                                                            | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdDelegatorsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetPoolsPoolIdDelegatorsResponseBody500)
                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdDelegatorsParametersPathPoolId parameters))) GHC.Base.++ "/delegators"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/{pool_id}/delegators
-- 
-- The same as 'getPools_PoolId_Delegators' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_DelegatorsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsPoolIdDelegatorsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_DelegatorsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdDelegatorsParametersPathPoolId parameters))) GHC.Base.++ "/delegators"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/{pool_id}/delegators
-- 
-- The same as 'getPools_PoolId_Delegators' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_DelegatorsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsPoolIdDelegatorsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_DelegatorsWithConfigurationRaw config
                                               parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdDelegatorsParametersPathPoolId parameters))) GHC.Base.++ "/delegators"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdDelegatorsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
