-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getMetricsEndpoints
module BlockfrostAPI.Operations.GetMetricsEndpoints where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /metrics/endpoints
-- 
-- History of your Blockfrost usage metrics per endpoint in the past 30 days.
getMetricsEndpoints :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetMetricsEndpointsResponse) -- ^ Monadic computation which returns the result of the operation
getMetricsEndpoints = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetMetricsEndpointsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       MetricsEndpoints)
                                                                                                                                                                    | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetMetricsEndpointsResponseBody400)
                                                                                                                                                                    | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetMetricsEndpointsResponseBody403)
                                                                                                                                                                    | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetMetricsEndpointsResponseBody404)
                                                                                                                                                                    | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetMetricsEndpointsResponseBody418)
                                                                                                                                                                    | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetMetricsEndpointsResponseBody429)
                                                                                                                                                                    | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetMetricsEndpointsResponseBody500)
                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/metrics/endpoints") GHC.Base.mempty)
-- | Represents a response of the operation 'getMetricsEndpoints'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetMetricsEndpointsResponseError' is used.
data GetMetricsEndpointsResponse =
   GetMetricsEndpointsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetMetricsEndpointsResponse200 MetricsEndpoints -- ^ Return the last 30 days of metrics
  | GetMetricsEndpointsResponse400 GetMetricsEndpointsResponseBody400 -- ^ Bad request
  | GetMetricsEndpointsResponse403 GetMetricsEndpointsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetMetricsEndpointsResponse404 GetMetricsEndpointsResponseBody404 -- ^ Component not found
  | GetMetricsEndpointsResponse418 GetMetricsEndpointsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetMetricsEndpointsResponse429 GetMetricsEndpointsResponseBody429 -- ^ Usage limit reached
  | GetMetricsEndpointsResponse500 GetMetricsEndpointsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetricsEndpointsResponseBody400 = GetMetricsEndpointsResponseBody400 {
  -- | error
  getMetricsEndpointsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getMetricsEndpointsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetricsEndpointsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetricsEndpointsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetricsEndpointsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetricsEndpointsResponseBody400" (\obj -> ((GHC.Base.pure GetMetricsEndpointsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetricsEndpointsResponseBody400' with all required fields.
mkGetMetricsEndpointsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetricsEndpointsResponseBody400StatusCode'
  -> GetMetricsEndpointsResponseBody400
mkGetMetricsEndpointsResponseBody400 getMetricsEndpointsResponseBody400Error getMetricsEndpointsResponseBody400Message getMetricsEndpointsResponseBody400StatusCode = GetMetricsEndpointsResponseBody400{getMetricsEndpointsResponseBody400Error = getMetricsEndpointsResponseBody400Error,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody400Message = getMetricsEndpointsResponseBody400Message,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody400StatusCode = getMetricsEndpointsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetricsEndpointsResponseBody403 = GetMetricsEndpointsResponseBody403 {
  -- | error
  getMetricsEndpointsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getMetricsEndpointsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetricsEndpointsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetricsEndpointsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetricsEndpointsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetricsEndpointsResponseBody403" (\obj -> ((GHC.Base.pure GetMetricsEndpointsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetricsEndpointsResponseBody403' with all required fields.
mkGetMetricsEndpointsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetricsEndpointsResponseBody403StatusCode'
  -> GetMetricsEndpointsResponseBody403
mkGetMetricsEndpointsResponseBody403 getMetricsEndpointsResponseBody403Error getMetricsEndpointsResponseBody403Message getMetricsEndpointsResponseBody403StatusCode = GetMetricsEndpointsResponseBody403{getMetricsEndpointsResponseBody403Error = getMetricsEndpointsResponseBody403Error,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody403Message = getMetricsEndpointsResponseBody403Message,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody403StatusCode = getMetricsEndpointsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetricsEndpointsResponseBody404 = GetMetricsEndpointsResponseBody404 {
  -- | error
  getMetricsEndpointsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getMetricsEndpointsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetricsEndpointsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetricsEndpointsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetricsEndpointsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetricsEndpointsResponseBody404" (\obj -> ((GHC.Base.pure GetMetricsEndpointsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetricsEndpointsResponseBody404' with all required fields.
mkGetMetricsEndpointsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetricsEndpointsResponseBody404StatusCode'
  -> GetMetricsEndpointsResponseBody404
mkGetMetricsEndpointsResponseBody404 getMetricsEndpointsResponseBody404Error getMetricsEndpointsResponseBody404Message getMetricsEndpointsResponseBody404StatusCode = GetMetricsEndpointsResponseBody404{getMetricsEndpointsResponseBody404Error = getMetricsEndpointsResponseBody404Error,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody404Message = getMetricsEndpointsResponseBody404Message,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody404StatusCode = getMetricsEndpointsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetricsEndpointsResponseBody418 = GetMetricsEndpointsResponseBody418 {
  -- | error
  getMetricsEndpointsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getMetricsEndpointsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetricsEndpointsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetricsEndpointsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetricsEndpointsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetricsEndpointsResponseBody418" (\obj -> ((GHC.Base.pure GetMetricsEndpointsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetricsEndpointsResponseBody418' with all required fields.
mkGetMetricsEndpointsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetricsEndpointsResponseBody418StatusCode'
  -> GetMetricsEndpointsResponseBody418
mkGetMetricsEndpointsResponseBody418 getMetricsEndpointsResponseBody418Error getMetricsEndpointsResponseBody418Message getMetricsEndpointsResponseBody418StatusCode = GetMetricsEndpointsResponseBody418{getMetricsEndpointsResponseBody418Error = getMetricsEndpointsResponseBody418Error,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody418Message = getMetricsEndpointsResponseBody418Message,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody418StatusCode = getMetricsEndpointsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetricsEndpointsResponseBody429 = GetMetricsEndpointsResponseBody429 {
  -- | error
  getMetricsEndpointsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getMetricsEndpointsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetricsEndpointsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetricsEndpointsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetricsEndpointsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetricsEndpointsResponseBody429" (\obj -> ((GHC.Base.pure GetMetricsEndpointsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetricsEndpointsResponseBody429' with all required fields.
mkGetMetricsEndpointsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetricsEndpointsResponseBody429StatusCode'
  -> GetMetricsEndpointsResponseBody429
mkGetMetricsEndpointsResponseBody429 getMetricsEndpointsResponseBody429Error getMetricsEndpointsResponseBody429Message getMetricsEndpointsResponseBody429StatusCode = GetMetricsEndpointsResponseBody429{getMetricsEndpointsResponseBody429Error = getMetricsEndpointsResponseBody429Error,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody429Message = getMetricsEndpointsResponseBody429Message,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody429StatusCode = getMetricsEndpointsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetricsEndpointsResponseBody500 = GetMetricsEndpointsResponseBody500 {
  -- | error
  getMetricsEndpointsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getMetricsEndpointsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetricsEndpointsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetricsEndpointsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetricsEndpointsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetricsEndpointsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetricsEndpointsResponseBody500" (\obj -> ((GHC.Base.pure GetMetricsEndpointsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetricsEndpointsResponseBody500' with all required fields.
mkGetMetricsEndpointsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getMetricsEndpointsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetricsEndpointsResponseBody500StatusCode'
  -> GetMetricsEndpointsResponseBody500
mkGetMetricsEndpointsResponseBody500 getMetricsEndpointsResponseBody500Error getMetricsEndpointsResponseBody500Message getMetricsEndpointsResponseBody500StatusCode = GetMetricsEndpointsResponseBody500{getMetricsEndpointsResponseBody500Error = getMetricsEndpointsResponseBody500Error,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody500Message = getMetricsEndpointsResponseBody500Message,
                                                                                                                                                                                                         getMetricsEndpointsResponseBody500StatusCode = getMetricsEndpointsResponseBody500StatusCode}
-- | > GET /metrics/endpoints
-- 
-- The same as 'getMetricsEndpoints' but accepts an explicit configuration.
getMetricsEndpointsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response GetMetricsEndpointsResponse) -- ^ Monadic computation which returns the result of the operation
getMetricsEndpointsWithConfiguration config = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetMetricsEndpointsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                               MetricsEndpoints)
                                                                                                                                                                                            | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetMetricsEndpointsResponseBody400)
                                                                                                                                                                                            | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetMetricsEndpointsResponseBody403)
                                                                                                                                                                                            | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetMetricsEndpointsResponseBody404)
                                                                                                                                                                                            | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetMetricsEndpointsResponseBody418)
                                                                                                                                                                                            | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetMetricsEndpointsResponseBody429)
                                                                                                                                                                                            | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetMetricsEndpointsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetMetricsEndpointsResponseBody500)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/metrics/endpoints") GHC.Base.mempty)
-- | > GET /metrics/endpoints
-- 
-- The same as 'getMetricsEndpoints' but returns the raw 'Data.ByteString.Char8.ByteString'.
getMetricsEndpointsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getMetricsEndpointsRaw = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/metrics/endpoints") GHC.Base.mempty)
-- | > GET /metrics/endpoints
-- 
-- The same as 'getMetricsEndpoints' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getMetricsEndpointsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getMetricsEndpointsWithConfigurationRaw config = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/metrics/endpoints") GHC.Base.mempty)
