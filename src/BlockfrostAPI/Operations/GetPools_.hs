-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPools_
module BlockfrostAPI.Operations.GetPools_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /pools/
-- 
-- List of active stake pools.
getPools_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetPoolsResponse) -- ^ Monadic computation which returns the result of the operation
getPools_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPoolsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  PoolList)
                                                                                                                                                          | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  GetPoolsResponseBody400)
                                                                                                                                                          | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  GetPoolsResponseBody403)
                                                                                                                                                          | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  GetPoolsResponseBody404)
                                                                                                                                                          | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  GetPoolsResponseBody418)
                                                                                                                                                          | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  GetPoolsResponseBody429)
                                                                                                                                                          | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                  GetPoolsResponseBody500)
                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/pools\/.GET.parameters@ in the specification.
-- 
-- 
data GetPoolsParameters = GetPoolsParameters {
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The numbers of pools per page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  getPoolsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getPoolsParametersQueryOrder :: (GHC.Maybe.Maybe GetPoolsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getPoolsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryCount" Data.Aeson.Types.ToJSON..= getPoolsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getPoolsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getPoolsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryCount" Data.Aeson.Types.ToJSON..= getPoolsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getPoolsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getPoolsParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsParameters" (\obj -> ((GHC.Base.pure GetPoolsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetPoolsParameters' with all required fields.
mkGetPoolsParameters :: GetPoolsParameters
mkGetPoolsParameters = GetPoolsParameters{getPoolsParametersQueryCount = GHC.Maybe.Nothing,
                                          getPoolsParametersQueryOrder = GHC.Maybe.Nothing,
                                          getPoolsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/pools\/.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetPoolsParametersQueryOrder' =
   GetPoolsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetPoolsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetPoolsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetPoolsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsParametersQueryOrder'
    where toJSON (GetPoolsParametersQueryOrder'Other val) = val
          toJSON (GetPoolsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetPoolsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetPoolsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetPoolsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetPoolsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetPoolsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getPools_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPoolsResponseError' is used.
data GetPoolsResponse =
   GetPoolsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPoolsResponse200 PoolList -- ^ Return the list of pools.
  | GetPoolsResponse400 GetPoolsResponseBody400 -- ^ Bad request
  | GetPoolsResponse403 GetPoolsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetPoolsResponse404 GetPoolsResponseBody404 -- ^ Component not found
  | GetPoolsResponse418 GetPoolsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetPoolsResponse429 GetPoolsResponseBody429 -- ^ Usage limit reached
  | GetPoolsResponse500 GetPoolsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsResponseBody400 = GetPoolsResponseBody400 {
  -- | error
  getPoolsResponseBody400Error :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message
  , getPoolsResponseBody400Message :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_code
  , getPoolsResponseBody400StatusCode :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsResponseBody400" (\obj -> ((GHC.Base.pure GetPoolsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_code"))
-- | Create a new 'GetPoolsResponseBody400' with all required fields.
mkGetPoolsResponseBody400 :: GetPoolsResponseBody400
mkGetPoolsResponseBody400 = GetPoolsResponseBody400{getPoolsResponseBody400Error = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody400Message = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody400StatusCode = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsResponseBody403 = GetPoolsResponseBody403 {
  -- | error
  getPoolsResponseBody403Error :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message
  , getPoolsResponseBody403Message :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_code
  , getPoolsResponseBody403StatusCode :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsResponseBody403" (\obj -> ((GHC.Base.pure GetPoolsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_code"))
-- | Create a new 'GetPoolsResponseBody403' with all required fields.
mkGetPoolsResponseBody403 :: GetPoolsResponseBody403
mkGetPoolsResponseBody403 = GetPoolsResponseBody403{getPoolsResponseBody403Error = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody403Message = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody403StatusCode = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsResponseBody404 = GetPoolsResponseBody404 {
  -- | error
  getPoolsResponseBody404Error :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message
  , getPoolsResponseBody404Message :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_code
  , getPoolsResponseBody404StatusCode :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsResponseBody404" (\obj -> ((GHC.Base.pure GetPoolsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_code"))
-- | Create a new 'GetPoolsResponseBody404' with all required fields.
mkGetPoolsResponseBody404 :: GetPoolsResponseBody404
mkGetPoolsResponseBody404 = GetPoolsResponseBody404{getPoolsResponseBody404Error = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody404Message = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody404StatusCode = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsResponseBody418 = GetPoolsResponseBody418 {
  -- | error
  getPoolsResponseBody418Error :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message
  , getPoolsResponseBody418Message :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_code
  , getPoolsResponseBody418StatusCode :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsResponseBody418" (\obj -> ((GHC.Base.pure GetPoolsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_code"))
-- | Create a new 'GetPoolsResponseBody418' with all required fields.
mkGetPoolsResponseBody418 :: GetPoolsResponseBody418
mkGetPoolsResponseBody418 = GetPoolsResponseBody418{getPoolsResponseBody418Error = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody418Message = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody418StatusCode = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsResponseBody429 = GetPoolsResponseBody429 {
  -- | error
  getPoolsResponseBody429Error :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message
  , getPoolsResponseBody429Message :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_code
  , getPoolsResponseBody429StatusCode :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsResponseBody429" (\obj -> ((GHC.Base.pure GetPoolsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_code"))
-- | Create a new 'GetPoolsResponseBody429' with all required fields.
mkGetPoolsResponseBody429 :: GetPoolsResponseBody429
mkGetPoolsResponseBody429 = GetPoolsResponseBody429{getPoolsResponseBody429Error = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody429Message = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody429StatusCode = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsResponseBody500 = GetPoolsResponseBody500 {
  -- | error
  getPoolsResponseBody500Error :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message
  , getPoolsResponseBody500Message :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_code
  , getPoolsResponseBody500StatusCode :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsResponseBody500" (\obj -> ((GHC.Base.pure GetPoolsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_code"))
-- | Create a new 'GetPoolsResponseBody500' with all required fields.
mkGetPoolsResponseBody500 :: GetPoolsResponseBody500
mkGetPoolsResponseBody500 = GetPoolsResponseBody500{getPoolsResponseBody500Error = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody500Message = GHC.Maybe.Nothing,
                                                    getPoolsResponseBody500StatusCode = GHC.Maybe.Nothing}
-- | > GET /pools/
-- 
-- The same as 'getPools_' but accepts an explicit configuration.
getPools_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetPoolsResponse) -- ^ Monadic computation which returns the result of the operation
getPools_WithConfiguration config
                           parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetPoolsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   PoolList)
                                                                                                                                                                           | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetPoolsResponseBody400)
                                                                                                                                                                           | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetPoolsResponseBody403)
                                                                                                                                                                           | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetPoolsResponseBody404)
                                                                                                                                                                           | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetPoolsResponseBody418)
                                                                                                                                                                           | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetPoolsResponseBody429)
                                                                                                                                                                           | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetPoolsResponseBody500)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/
-- 
-- The same as 'getPools_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_Raw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                               BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/
-- 
-- The same as 'getPools_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_WithConfigurationRaw config
                              parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pools/") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
