-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getEpochs_Number_Previous
module BlockfrostAPI.Operations.GetEpochsNumberPrevious where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /epochs/{number}/previous
-- 
-- Return the list of epochs preceding a specific epoch.
getEpochs_Number_Previous :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberPreviousParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetEpochsNumberPreviousResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Previous parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberPreviousResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                EpochContentArray)
                                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetEpochsNumberPreviousResponseBody400)
                                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetEpochsNumberPreviousResponseBody403)
                                                                                                                                                                                         | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetEpochsNumberPreviousResponseBody404)
                                                                                                                                                                                         | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetEpochsNumberPreviousResponseBody418)
                                                                                                                                                                                         | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetEpochsNumberPreviousResponseBody429)
                                                                                                                                                                                         | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetEpochsNumberPreviousResponseBody500)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberPreviousParametersPathNumber parameters))) GHC.Base.++ "/previous"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberPreviousParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberPreviousParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/epochs\/{number}\/previous.GET.parameters@ in the specification.
-- 
-- 
data GetEpochsNumberPreviousParameters = GetEpochsNumberPreviousParameters {
  -- | pathNumber: Represents the parameter named \'number\'
  -- 
  -- Number of the epoch
  getEpochsNumberPreviousParametersPathNumber :: GHC.Integer.Type.Integer
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getEpochsNumberPreviousParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results
  , getEpochsNumberPreviousParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberPreviousParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousParametersPathNumber obj : "queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousParametersQueryCount obj : "queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousParametersPathNumber obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousParametersQueryCount obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberPreviousParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberPreviousParameters" (\obj -> ((GHC.Base.pure GetEpochsNumberPreviousParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNumber")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetEpochsNumberPreviousParameters' with all required fields.
mkGetEpochsNumberPreviousParameters :: GHC.Integer.Type.Integer -- ^ 'getEpochsNumberPreviousParametersPathNumber'
  -> GetEpochsNumberPreviousParameters
mkGetEpochsNumberPreviousParameters getEpochsNumberPreviousParametersPathNumber = GetEpochsNumberPreviousParameters{getEpochsNumberPreviousParametersPathNumber = getEpochsNumberPreviousParametersPathNumber,
                                                                                                                    getEpochsNumberPreviousParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                    getEpochsNumberPreviousParametersQueryPage = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getEpochs_Number_Previous'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetEpochsNumberPreviousResponseError' is used.
data GetEpochsNumberPreviousResponse =
   GetEpochsNumberPreviousResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetEpochsNumberPreviousResponse200 EpochContentArray -- ^ Return the epoch data
  | GetEpochsNumberPreviousResponse400 GetEpochsNumberPreviousResponseBody400 -- ^ Bad request
  | GetEpochsNumberPreviousResponse403 GetEpochsNumberPreviousResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetEpochsNumberPreviousResponse404 GetEpochsNumberPreviousResponseBody404 -- ^ Component not found
  | GetEpochsNumberPreviousResponse418 GetEpochsNumberPreviousResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetEpochsNumberPreviousResponse429 GetEpochsNumberPreviousResponseBody429 -- ^ Usage limit reached
  | GetEpochsNumberPreviousResponse500 GetEpochsNumberPreviousResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberPreviousResponseBody400 = GetEpochsNumberPreviousResponseBody400 {
  -- | error
  getEpochsNumberPreviousResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberPreviousResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberPreviousResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberPreviousResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberPreviousResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberPreviousResponseBody400" (\obj -> ((GHC.Base.pure GetEpochsNumberPreviousResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberPreviousResponseBody400' with all required fields.
mkGetEpochsNumberPreviousResponseBody400 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberPreviousResponseBody400StatusCode'
  -> GetEpochsNumberPreviousResponseBody400
mkGetEpochsNumberPreviousResponseBody400 getEpochsNumberPreviousResponseBody400Error getEpochsNumberPreviousResponseBody400Message getEpochsNumberPreviousResponseBody400StatusCode = GetEpochsNumberPreviousResponseBody400{getEpochsNumberPreviousResponseBody400Error = getEpochsNumberPreviousResponseBody400Error,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody400Message = getEpochsNumberPreviousResponseBody400Message,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody400StatusCode = getEpochsNumberPreviousResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberPreviousResponseBody403 = GetEpochsNumberPreviousResponseBody403 {
  -- | error
  getEpochsNumberPreviousResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberPreviousResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberPreviousResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberPreviousResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberPreviousResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberPreviousResponseBody403" (\obj -> ((GHC.Base.pure GetEpochsNumberPreviousResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberPreviousResponseBody403' with all required fields.
mkGetEpochsNumberPreviousResponseBody403 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberPreviousResponseBody403StatusCode'
  -> GetEpochsNumberPreviousResponseBody403
mkGetEpochsNumberPreviousResponseBody403 getEpochsNumberPreviousResponseBody403Error getEpochsNumberPreviousResponseBody403Message getEpochsNumberPreviousResponseBody403StatusCode = GetEpochsNumberPreviousResponseBody403{getEpochsNumberPreviousResponseBody403Error = getEpochsNumberPreviousResponseBody403Error,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody403Message = getEpochsNumberPreviousResponseBody403Message,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody403StatusCode = getEpochsNumberPreviousResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberPreviousResponseBody404 = GetEpochsNumberPreviousResponseBody404 {
  -- | error
  getEpochsNumberPreviousResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberPreviousResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberPreviousResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberPreviousResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberPreviousResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberPreviousResponseBody404" (\obj -> ((GHC.Base.pure GetEpochsNumberPreviousResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberPreviousResponseBody404' with all required fields.
mkGetEpochsNumberPreviousResponseBody404 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberPreviousResponseBody404StatusCode'
  -> GetEpochsNumberPreviousResponseBody404
mkGetEpochsNumberPreviousResponseBody404 getEpochsNumberPreviousResponseBody404Error getEpochsNumberPreviousResponseBody404Message getEpochsNumberPreviousResponseBody404StatusCode = GetEpochsNumberPreviousResponseBody404{getEpochsNumberPreviousResponseBody404Error = getEpochsNumberPreviousResponseBody404Error,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody404Message = getEpochsNumberPreviousResponseBody404Message,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody404StatusCode = getEpochsNumberPreviousResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberPreviousResponseBody418 = GetEpochsNumberPreviousResponseBody418 {
  -- | error
  getEpochsNumberPreviousResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberPreviousResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberPreviousResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberPreviousResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberPreviousResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberPreviousResponseBody418" (\obj -> ((GHC.Base.pure GetEpochsNumberPreviousResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberPreviousResponseBody418' with all required fields.
mkGetEpochsNumberPreviousResponseBody418 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberPreviousResponseBody418StatusCode'
  -> GetEpochsNumberPreviousResponseBody418
mkGetEpochsNumberPreviousResponseBody418 getEpochsNumberPreviousResponseBody418Error getEpochsNumberPreviousResponseBody418Message getEpochsNumberPreviousResponseBody418StatusCode = GetEpochsNumberPreviousResponseBody418{getEpochsNumberPreviousResponseBody418Error = getEpochsNumberPreviousResponseBody418Error,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody418Message = getEpochsNumberPreviousResponseBody418Message,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody418StatusCode = getEpochsNumberPreviousResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberPreviousResponseBody429 = GetEpochsNumberPreviousResponseBody429 {
  -- | error
  getEpochsNumberPreviousResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberPreviousResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberPreviousResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberPreviousResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberPreviousResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberPreviousResponseBody429" (\obj -> ((GHC.Base.pure GetEpochsNumberPreviousResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberPreviousResponseBody429' with all required fields.
mkGetEpochsNumberPreviousResponseBody429 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberPreviousResponseBody429StatusCode'
  -> GetEpochsNumberPreviousResponseBody429
mkGetEpochsNumberPreviousResponseBody429 getEpochsNumberPreviousResponseBody429Error getEpochsNumberPreviousResponseBody429Message getEpochsNumberPreviousResponseBody429StatusCode = GetEpochsNumberPreviousResponseBody429{getEpochsNumberPreviousResponseBody429Error = getEpochsNumberPreviousResponseBody429Error,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody429Message = getEpochsNumberPreviousResponseBody429Message,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody429StatusCode = getEpochsNumberPreviousResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberPreviousResponseBody500 = GetEpochsNumberPreviousResponseBody500 {
  -- | error
  getEpochsNumberPreviousResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberPreviousResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberPreviousResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberPreviousResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberPreviousResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberPreviousResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberPreviousResponseBody500" (\obj -> ((GHC.Base.pure GetEpochsNumberPreviousResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberPreviousResponseBody500' with all required fields.
mkGetEpochsNumberPreviousResponseBody500 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberPreviousResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberPreviousResponseBody500StatusCode'
  -> GetEpochsNumberPreviousResponseBody500
mkGetEpochsNumberPreviousResponseBody500 getEpochsNumberPreviousResponseBody500Error getEpochsNumberPreviousResponseBody500Message getEpochsNumberPreviousResponseBody500StatusCode = GetEpochsNumberPreviousResponseBody500{getEpochsNumberPreviousResponseBody500Error = getEpochsNumberPreviousResponseBody500Error,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody500Message = getEpochsNumberPreviousResponseBody500Message,
                                                                                                                                                                                                                             getEpochsNumberPreviousResponseBody500StatusCode = getEpochsNumberPreviousResponseBody500StatusCode}
-- | > GET /epochs/{number}/previous
-- 
-- The same as 'getEpochs_Number_Previous' but accepts an explicit configuration.
getEpochs_Number_PreviousWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberPreviousParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetEpochsNumberPreviousResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_PreviousWithConfiguration config
                                           parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberPreviousResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 EpochContentArray)
                                                                                                                                                                                                          | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetEpochsNumberPreviousResponseBody400)
                                                                                                                                                                                                          | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetEpochsNumberPreviousResponseBody403)
                                                                                                                                                                                                          | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetEpochsNumberPreviousResponseBody404)
                                                                                                                                                                                                          | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetEpochsNumberPreviousResponseBody418)
                                                                                                                                                                                                          | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetEpochsNumberPreviousResponseBody429)
                                                                                                                                                                                                          | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberPreviousResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetEpochsNumberPreviousResponseBody500)
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberPreviousParametersPathNumber parameters))) GHC.Base.++ "/previous"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberPreviousParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberPreviousParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/previous
-- 
-- The same as 'getEpochs_Number_Previous' but returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_PreviousRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberPreviousParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_PreviousRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberPreviousParametersPathNumber parameters))) GHC.Base.++ "/previous"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberPreviousParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberPreviousParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/previous
-- 
-- The same as 'getEpochs_Number_Previous' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_PreviousWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberPreviousParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_PreviousWithConfigurationRaw config
                                              parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberPreviousParametersPathNumber parameters))) GHC.Base.++ "/previous"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberPreviousParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberPreviousParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
