-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTxs_Hash_Stakes
module BlockfrostAPI.Operations.GetTxsHashStakes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /txs/{hash}/stakes
-- 
-- Obtain information about (de)registration of stake addresses within a transaction.
getTxs_Hash_Stakes :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetTxsHashStakesResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_Stakes hash = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTxsHashStakesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     ([TxContentStakeAddr]))
                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashStakesResponseBody400)
                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashStakesResponseBody403)
                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashStakesResponseBody404)
                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashStakesResponseBody418)
                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashStakesResponseBody429)
                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     GetTxsHashStakesResponseBody500)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/stakes"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getTxs_Hash_Stakes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTxsHashStakesResponseError' is used.
data GetTxsHashStakesResponse =
   GetTxsHashStakesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTxsHashStakesResponse200 ([TxContentStakeAddr]) -- ^ Obtain information about (de)registration of stake addresses within a transaction. 
  | GetTxsHashStakesResponse400 GetTxsHashStakesResponseBody400 -- ^ Bad request
  | GetTxsHashStakesResponse403 GetTxsHashStakesResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetTxsHashStakesResponse404 GetTxsHashStakesResponseBody404 -- ^ Component not found
  | GetTxsHashStakesResponse418 GetTxsHashStakesResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetTxsHashStakesResponse429 GetTxsHashStakesResponseBody429 -- ^ Usage limit reached
  | GetTxsHashStakesResponse500 GetTxsHashStakesResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashStakesResponseBody400 = GetTxsHashStakesResponseBody400 {
  -- | error
  getTxsHashStakesResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashStakesResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashStakesResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashStakesResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashStakesResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashStakesResponseBody400" (\obj -> ((GHC.Base.pure GetTxsHashStakesResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashStakesResponseBody400' with all required fields.
mkGetTxsHashStakesResponseBody400 :: Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashStakesResponseBody400StatusCode'
  -> GetTxsHashStakesResponseBody400
mkGetTxsHashStakesResponseBody400 getTxsHashStakesResponseBody400Error getTxsHashStakesResponseBody400Message getTxsHashStakesResponseBody400StatusCode = GetTxsHashStakesResponseBody400{getTxsHashStakesResponseBody400Error = getTxsHashStakesResponseBody400Error,
                                                                                                                                                                                          getTxsHashStakesResponseBody400Message = getTxsHashStakesResponseBody400Message,
                                                                                                                                                                                          getTxsHashStakesResponseBody400StatusCode = getTxsHashStakesResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashStakesResponseBody403 = GetTxsHashStakesResponseBody403 {
  -- | error
  getTxsHashStakesResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashStakesResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashStakesResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashStakesResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashStakesResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashStakesResponseBody403" (\obj -> ((GHC.Base.pure GetTxsHashStakesResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashStakesResponseBody403' with all required fields.
mkGetTxsHashStakesResponseBody403 :: Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashStakesResponseBody403StatusCode'
  -> GetTxsHashStakesResponseBody403
mkGetTxsHashStakesResponseBody403 getTxsHashStakesResponseBody403Error getTxsHashStakesResponseBody403Message getTxsHashStakesResponseBody403StatusCode = GetTxsHashStakesResponseBody403{getTxsHashStakesResponseBody403Error = getTxsHashStakesResponseBody403Error,
                                                                                                                                                                                          getTxsHashStakesResponseBody403Message = getTxsHashStakesResponseBody403Message,
                                                                                                                                                                                          getTxsHashStakesResponseBody403StatusCode = getTxsHashStakesResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashStakesResponseBody404 = GetTxsHashStakesResponseBody404 {
  -- | error
  getTxsHashStakesResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashStakesResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashStakesResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashStakesResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashStakesResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashStakesResponseBody404" (\obj -> ((GHC.Base.pure GetTxsHashStakesResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashStakesResponseBody404' with all required fields.
mkGetTxsHashStakesResponseBody404 :: Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashStakesResponseBody404StatusCode'
  -> GetTxsHashStakesResponseBody404
mkGetTxsHashStakesResponseBody404 getTxsHashStakesResponseBody404Error getTxsHashStakesResponseBody404Message getTxsHashStakesResponseBody404StatusCode = GetTxsHashStakesResponseBody404{getTxsHashStakesResponseBody404Error = getTxsHashStakesResponseBody404Error,
                                                                                                                                                                                          getTxsHashStakesResponseBody404Message = getTxsHashStakesResponseBody404Message,
                                                                                                                                                                                          getTxsHashStakesResponseBody404StatusCode = getTxsHashStakesResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashStakesResponseBody418 = GetTxsHashStakesResponseBody418 {
  -- | error
  getTxsHashStakesResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashStakesResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashStakesResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashStakesResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashStakesResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashStakesResponseBody418" (\obj -> ((GHC.Base.pure GetTxsHashStakesResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashStakesResponseBody418' with all required fields.
mkGetTxsHashStakesResponseBody418 :: Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashStakesResponseBody418StatusCode'
  -> GetTxsHashStakesResponseBody418
mkGetTxsHashStakesResponseBody418 getTxsHashStakesResponseBody418Error getTxsHashStakesResponseBody418Message getTxsHashStakesResponseBody418StatusCode = GetTxsHashStakesResponseBody418{getTxsHashStakesResponseBody418Error = getTxsHashStakesResponseBody418Error,
                                                                                                                                                                                          getTxsHashStakesResponseBody418Message = getTxsHashStakesResponseBody418Message,
                                                                                                                                                                                          getTxsHashStakesResponseBody418StatusCode = getTxsHashStakesResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashStakesResponseBody429 = GetTxsHashStakesResponseBody429 {
  -- | error
  getTxsHashStakesResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashStakesResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashStakesResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashStakesResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashStakesResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashStakesResponseBody429" (\obj -> ((GHC.Base.pure GetTxsHashStakesResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashStakesResponseBody429' with all required fields.
mkGetTxsHashStakesResponseBody429 :: Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashStakesResponseBody429StatusCode'
  -> GetTxsHashStakesResponseBody429
mkGetTxsHashStakesResponseBody429 getTxsHashStakesResponseBody429Error getTxsHashStakesResponseBody429Message getTxsHashStakesResponseBody429StatusCode = GetTxsHashStakesResponseBody429{getTxsHashStakesResponseBody429Error = getTxsHashStakesResponseBody429Error,
                                                                                                                                                                                          getTxsHashStakesResponseBody429Message = getTxsHashStakesResponseBody429Message,
                                                                                                                                                                                          getTxsHashStakesResponseBody429StatusCode = getTxsHashStakesResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashStakesResponseBody500 = GetTxsHashStakesResponseBody500 {
  -- | error
  getTxsHashStakesResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashStakesResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashStakesResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashStakesResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashStakesResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashStakesResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashStakesResponseBody500" (\obj -> ((GHC.Base.pure GetTxsHashStakesResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashStakesResponseBody500' with all required fields.
mkGetTxsHashStakesResponseBody500 :: Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashStakesResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashStakesResponseBody500StatusCode'
  -> GetTxsHashStakesResponseBody500
mkGetTxsHashStakesResponseBody500 getTxsHashStakesResponseBody500Error getTxsHashStakesResponseBody500Message getTxsHashStakesResponseBody500StatusCode = GetTxsHashStakesResponseBody500{getTxsHashStakesResponseBody500Error = getTxsHashStakesResponseBody500Error,
                                                                                                                                                                                          getTxsHashStakesResponseBody500Message = getTxsHashStakesResponseBody500Message,
                                                                                                                                                                                          getTxsHashStakesResponseBody500StatusCode = getTxsHashStakesResponseBody500StatusCode}
-- | > GET /txs/{hash}/stakes
-- 
-- The same as 'getTxs_Hash_Stakes' but accepts an explicit configuration.
getTxs_Hash_StakesWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> m (Network.HTTP.Client.Types.Response GetTxsHashStakesResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_StakesWithConfiguration config
                                    hash = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetTxsHashStakesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                      ([TxContentStakeAddr]))
                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetTxsHashStakesResponseBody400)
                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetTxsHashStakesResponseBody403)
                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetTxsHashStakesResponseBody404)
                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetTxsHashStakesResponseBody418)
                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetTxsHashStakesResponseBody429)
                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashStakesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetTxsHashStakesResponseBody500)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/stakes"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/stakes
-- 
-- The same as 'getTxs_Hash_Stakes' but returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_StakesRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_StakesRaw hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/stakes"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/stakes
-- 
-- The same as 'getTxs_Hash_Stakes' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_StakesWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_StakesWithConfigurationRaw config
                                       hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/stakes"))) GHC.Base.mempty)
