-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccounts_StakeAddress_Mirs
module BlockfrostAPI.Operations.GetAccountsStakeAddressMirs where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /accounts/{stake_address}/mirs
-- 
-- Obtain information about the MIRs of a specific account.
getAccounts_StakeAddress_Mirs :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressMirsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressMirsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_Mirs parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressMirsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            AccountMirContents)
                                                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAccountsStakeAddressMirsResponseBody400)
                                                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAccountsStakeAddressMirsResponseBody403)
                                                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAccountsStakeAddressMirsResponseBody404)
                                                                                                                                                                                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAccountsStakeAddressMirsResponseBody418)
                                                                                                                                                                                                 | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAccountsStakeAddressMirsResponseBody429)
                                                                                                                                                                                                 | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetAccountsStakeAddressMirsResponseBody500)
                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressMirsParametersPathStakeAddress parameters))) GHC.Base.++ "/mirs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/accounts\/{stake_address}\/mirs.GET.parameters@ in the specification.
-- 
-- 
data GetAccountsStakeAddressMirsParameters = GetAccountsStakeAddressMirsParameters {
  -- | pathStake_address: Represents the parameter named \'stake_address\'
  -- 
  -- Bech32 stake address.
  getAccountsStakeAddressMirsParametersPathStakeAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAccountsStakeAddressMirsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAccountsStakeAddressMirsParametersQueryOrder :: (GHC.Maybe.Maybe GetAccountsStakeAddressMirsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAccountsStakeAddressMirsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressMirsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsParametersPathStakeAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathStake_address" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsParametersPathStakeAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressMirsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressMirsParameters" (\obj -> (((GHC.Base.pure GetAccountsStakeAddressMirsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathStake_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAccountsStakeAddressMirsParameters' with all required fields.
mkGetAccountsStakeAddressMirsParameters :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsParametersPathStakeAddress'
  -> GetAccountsStakeAddressMirsParameters
mkGetAccountsStakeAddressMirsParameters getAccountsStakeAddressMirsParametersPathStakeAddress = GetAccountsStakeAddressMirsParameters{getAccountsStakeAddressMirsParametersPathStakeAddress = getAccountsStakeAddressMirsParametersPathStakeAddress,
                                                                                                                                      getAccountsStakeAddressMirsParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                      getAccountsStakeAddressMirsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                      getAccountsStakeAddressMirsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/accounts\/{stake_address}\/mirs.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAccountsStakeAddressMirsParametersQueryOrder' =
   GetAccountsStakeAddressMirsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAccountsStakeAddressMirsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAccountsStakeAddressMirsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAccountsStakeAddressMirsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressMirsParametersQueryOrder'
    where toJSON (GetAccountsStakeAddressMirsParametersQueryOrder'Other val) = val
          toJSON (GetAccountsStakeAddressMirsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAccountsStakeAddressMirsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAccountsStakeAddressMirsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressMirsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAccountsStakeAddressMirsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAccountsStakeAddressMirsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAccountsStakeAddressMirsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAccounts_StakeAddress_Mirs'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountsStakeAddressMirsResponseError' is used.
data GetAccountsStakeAddressMirsResponse =
   GetAccountsStakeAddressMirsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountsStakeAddressMirsResponse200 AccountMirContents -- ^ Return the account MIR content.
  | GetAccountsStakeAddressMirsResponse400 GetAccountsStakeAddressMirsResponseBody400 -- ^ Bad request
  | GetAccountsStakeAddressMirsResponse403 GetAccountsStakeAddressMirsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAccountsStakeAddressMirsResponse404 GetAccountsStakeAddressMirsResponseBody404 -- ^ Component not found
  | GetAccountsStakeAddressMirsResponse418 GetAccountsStakeAddressMirsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAccountsStakeAddressMirsResponse429 GetAccountsStakeAddressMirsResponseBody429 -- ^ Usage limit reached
  | GetAccountsStakeAddressMirsResponse500 GetAccountsStakeAddressMirsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressMirsResponseBody400 = GetAccountsStakeAddressMirsResponseBody400 {
  -- | error
  getAccountsStakeAddressMirsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressMirsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressMirsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressMirsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressMirsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressMirsResponseBody400" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressMirsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressMirsResponseBody400' with all required fields.
mkGetAccountsStakeAddressMirsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressMirsResponseBody400StatusCode'
  -> GetAccountsStakeAddressMirsResponseBody400
mkGetAccountsStakeAddressMirsResponseBody400 getAccountsStakeAddressMirsResponseBody400Error getAccountsStakeAddressMirsResponseBody400Message getAccountsStakeAddressMirsResponseBody400StatusCode = GetAccountsStakeAddressMirsResponseBody400{getAccountsStakeAddressMirsResponseBody400Error = getAccountsStakeAddressMirsResponseBody400Error,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody400Message = getAccountsStakeAddressMirsResponseBody400Message,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody400StatusCode = getAccountsStakeAddressMirsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressMirsResponseBody403 = GetAccountsStakeAddressMirsResponseBody403 {
  -- | error
  getAccountsStakeAddressMirsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressMirsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressMirsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressMirsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressMirsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressMirsResponseBody403" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressMirsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressMirsResponseBody403' with all required fields.
mkGetAccountsStakeAddressMirsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressMirsResponseBody403StatusCode'
  -> GetAccountsStakeAddressMirsResponseBody403
mkGetAccountsStakeAddressMirsResponseBody403 getAccountsStakeAddressMirsResponseBody403Error getAccountsStakeAddressMirsResponseBody403Message getAccountsStakeAddressMirsResponseBody403StatusCode = GetAccountsStakeAddressMirsResponseBody403{getAccountsStakeAddressMirsResponseBody403Error = getAccountsStakeAddressMirsResponseBody403Error,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody403Message = getAccountsStakeAddressMirsResponseBody403Message,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody403StatusCode = getAccountsStakeAddressMirsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressMirsResponseBody404 = GetAccountsStakeAddressMirsResponseBody404 {
  -- | error
  getAccountsStakeAddressMirsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressMirsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressMirsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressMirsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressMirsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressMirsResponseBody404" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressMirsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressMirsResponseBody404' with all required fields.
mkGetAccountsStakeAddressMirsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressMirsResponseBody404StatusCode'
  -> GetAccountsStakeAddressMirsResponseBody404
mkGetAccountsStakeAddressMirsResponseBody404 getAccountsStakeAddressMirsResponseBody404Error getAccountsStakeAddressMirsResponseBody404Message getAccountsStakeAddressMirsResponseBody404StatusCode = GetAccountsStakeAddressMirsResponseBody404{getAccountsStakeAddressMirsResponseBody404Error = getAccountsStakeAddressMirsResponseBody404Error,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody404Message = getAccountsStakeAddressMirsResponseBody404Message,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody404StatusCode = getAccountsStakeAddressMirsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressMirsResponseBody418 = GetAccountsStakeAddressMirsResponseBody418 {
  -- | error
  getAccountsStakeAddressMirsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressMirsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressMirsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressMirsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressMirsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressMirsResponseBody418" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressMirsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressMirsResponseBody418' with all required fields.
mkGetAccountsStakeAddressMirsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressMirsResponseBody418StatusCode'
  -> GetAccountsStakeAddressMirsResponseBody418
mkGetAccountsStakeAddressMirsResponseBody418 getAccountsStakeAddressMirsResponseBody418Error getAccountsStakeAddressMirsResponseBody418Message getAccountsStakeAddressMirsResponseBody418StatusCode = GetAccountsStakeAddressMirsResponseBody418{getAccountsStakeAddressMirsResponseBody418Error = getAccountsStakeAddressMirsResponseBody418Error,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody418Message = getAccountsStakeAddressMirsResponseBody418Message,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody418StatusCode = getAccountsStakeAddressMirsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressMirsResponseBody429 = GetAccountsStakeAddressMirsResponseBody429 {
  -- | error
  getAccountsStakeAddressMirsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressMirsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressMirsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressMirsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressMirsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressMirsResponseBody429" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressMirsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressMirsResponseBody429' with all required fields.
mkGetAccountsStakeAddressMirsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressMirsResponseBody429StatusCode'
  -> GetAccountsStakeAddressMirsResponseBody429
mkGetAccountsStakeAddressMirsResponseBody429 getAccountsStakeAddressMirsResponseBody429Error getAccountsStakeAddressMirsResponseBody429Message getAccountsStakeAddressMirsResponseBody429StatusCode = GetAccountsStakeAddressMirsResponseBody429{getAccountsStakeAddressMirsResponseBody429Error = getAccountsStakeAddressMirsResponseBody429Error,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody429Message = getAccountsStakeAddressMirsResponseBody429Message,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody429StatusCode = getAccountsStakeAddressMirsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountsStakeAddressMirsResponseBody500 = GetAccountsStakeAddressMirsResponseBody500 {
  -- | error
  getAccountsStakeAddressMirsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAccountsStakeAddressMirsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAccountsStakeAddressMirsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsStakeAddressMirsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAccountsStakeAddressMirsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsStakeAddressMirsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsStakeAddressMirsResponseBody500" (\obj -> ((GHC.Base.pure GetAccountsStakeAddressMirsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAccountsStakeAddressMirsResponseBody500' with all required fields.
mkGetAccountsStakeAddressMirsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAccountsStakeAddressMirsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAccountsStakeAddressMirsResponseBody500StatusCode'
  -> GetAccountsStakeAddressMirsResponseBody500
mkGetAccountsStakeAddressMirsResponseBody500 getAccountsStakeAddressMirsResponseBody500Error getAccountsStakeAddressMirsResponseBody500Message getAccountsStakeAddressMirsResponseBody500StatusCode = GetAccountsStakeAddressMirsResponseBody500{getAccountsStakeAddressMirsResponseBody500Error = getAccountsStakeAddressMirsResponseBody500Error,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody500Message = getAccountsStakeAddressMirsResponseBody500Message,
                                                                                                                                                                                                                                                 getAccountsStakeAddressMirsResponseBody500StatusCode = getAccountsStakeAddressMirsResponseBody500StatusCode}
-- | > GET /accounts/{stake_address}/mirs
-- 
-- The same as 'getAccounts_StakeAddress_Mirs' but accepts an explicit configuration.
getAccounts_StakeAddress_MirsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressMirsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAccountsStakeAddressMirsResponse) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_MirsWithConfiguration config
                                               parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAccountsStakeAddressMirsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AccountMirContents)
                                                                                                                                                                                                                  | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetAccountsStakeAddressMirsResponseBody400)
                                                                                                                                                                                                                  | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetAccountsStakeAddressMirsResponseBody403)
                                                                                                                                                                                                                  | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetAccountsStakeAddressMirsResponseBody404)
                                                                                                                                                                                                                  | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetAccountsStakeAddressMirsResponseBody418)
                                                                                                                                                                                                                  | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetAccountsStakeAddressMirsResponseBody429)
                                                                                                                                                                                                                  | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountsStakeAddressMirsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetAccountsStakeAddressMirsResponseBody500)
                                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressMirsParametersPathStakeAddress parameters))) GHC.Base.++ "/mirs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/mirs
-- 
-- The same as 'getAccounts_StakeAddress_Mirs' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_MirsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAccountsStakeAddressMirsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_MirsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressMirsParametersPathStakeAddress parameters))) GHC.Base.++ "/mirs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /accounts/{stake_address}/mirs
-- 
-- The same as 'getAccounts_StakeAddress_Mirs' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAccounts_StakeAddress_MirsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAccountsStakeAddressMirsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccounts_StakeAddress_MirsWithConfigurationRaw config
                                                  parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAccountsStakeAddressMirsParametersPathStakeAddress parameters))) GHC.Base.++ "/mirs"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsStakeAddressMirsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
