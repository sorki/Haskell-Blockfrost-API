-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAddresses_Address_Utxos
module BlockfrostAPI.Operations.GetAddressesAddressUtxos where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /addresses/{address}/utxos
-- 
-- UTXOs of the address.
getAddresses_Address_Utxos :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAddressesAddressUtxosParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAddressesAddressUtxosResponse) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_Utxos parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAddressesAddressUtxosResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   AddressUtxoContent)
                                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressUtxosResponseBody400)
                                                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressUtxosResponseBody403)
                                                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressUtxosResponseBody404)
                                                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressUtxosResponseBody418)
                                                                                                                                                                                           | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressUtxosResponseBody429)
                                                                                                                                                                                           | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetAddressesAddressUtxosResponseBody500)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressUtxosParametersPathAddress parameters))) GHC.Base.++ "/utxos"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/addresses\/{address}\/utxos.GET.parameters@ in the specification.
-- 
-- 
data GetAddressesAddressUtxosParameters = GetAddressesAddressUtxosParameters {
  -- | pathAddress: Represents the parameter named \'address\'
  -- 
  -- Bech32 address.
  getAddressesAddressUtxosParametersPathAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getAddressesAddressUtxosParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- Ordered by tx index in the block.
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getAddressesAddressUtxosParametersQueryOrder :: (GHC.Maybe.Maybe GetAddressesAddressUtxosParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getAddressesAddressUtxosParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressUtxosParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAddress" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosParametersPathAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAddress" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosParametersPathAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressUtxosParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressUtxosParameters" (\obj -> (((GHC.Base.pure GetAddressesAddressUtxosParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetAddressesAddressUtxosParameters' with all required fields.
mkGetAddressesAddressUtxosParameters :: Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosParametersPathAddress'
  -> GetAddressesAddressUtxosParameters
mkGetAddressesAddressUtxosParameters getAddressesAddressUtxosParametersPathAddress = GetAddressesAddressUtxosParameters{getAddressesAddressUtxosParametersPathAddress = getAddressesAddressUtxosParametersPathAddress,
                                                                                                                        getAddressesAddressUtxosParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                        getAddressesAddressUtxosParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                        getAddressesAddressUtxosParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/addresses\/{address}\/utxos.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- Ordered by tx index in the block.
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetAddressesAddressUtxosParametersQueryOrder' =
   GetAddressesAddressUtxosParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetAddressesAddressUtxosParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetAddressesAddressUtxosParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetAddressesAddressUtxosParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressUtxosParametersQueryOrder'
    where toJSON (GetAddressesAddressUtxosParametersQueryOrder'Other val) = val
          toJSON (GetAddressesAddressUtxosParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetAddressesAddressUtxosParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetAddressesAddressUtxosParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressUtxosParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetAddressesAddressUtxosParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetAddressesAddressUtxosParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetAddressesAddressUtxosParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getAddresses_Address_Utxos'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAddressesAddressUtxosResponseError' is used.
data GetAddressesAddressUtxosResponse =
   GetAddressesAddressUtxosResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAddressesAddressUtxosResponse200 AddressUtxoContent -- ^ Return the address content
  | GetAddressesAddressUtxosResponse400 GetAddressesAddressUtxosResponseBody400 -- ^ Bad request
  | GetAddressesAddressUtxosResponse403 GetAddressesAddressUtxosResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetAddressesAddressUtxosResponse404 GetAddressesAddressUtxosResponseBody404 -- ^ Component not found
  | GetAddressesAddressUtxosResponse418 GetAddressesAddressUtxosResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetAddressesAddressUtxosResponse429 GetAddressesAddressUtxosResponseBody429 -- ^ Usage limit reached
  | GetAddressesAddressUtxosResponse500 GetAddressesAddressUtxosResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressUtxosResponseBody400 = GetAddressesAddressUtxosResponseBody400 {
  -- | error
  getAddressesAddressUtxosResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressUtxosResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressUtxosResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressUtxosResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressUtxosResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressUtxosResponseBody400" (\obj -> ((GHC.Base.pure GetAddressesAddressUtxosResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressUtxosResponseBody400' with all required fields.
mkGetAddressesAddressUtxosResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressUtxosResponseBody400StatusCode'
  -> GetAddressesAddressUtxosResponseBody400
mkGetAddressesAddressUtxosResponseBody400 getAddressesAddressUtxosResponseBody400Error getAddressesAddressUtxosResponseBody400Message getAddressesAddressUtxosResponseBody400StatusCode = GetAddressesAddressUtxosResponseBody400{getAddressesAddressUtxosResponseBody400Error = getAddressesAddressUtxosResponseBody400Error,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody400Message = getAddressesAddressUtxosResponseBody400Message,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody400StatusCode = getAddressesAddressUtxosResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressUtxosResponseBody403 = GetAddressesAddressUtxosResponseBody403 {
  -- | error
  getAddressesAddressUtxosResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressUtxosResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressUtxosResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressUtxosResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressUtxosResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressUtxosResponseBody403" (\obj -> ((GHC.Base.pure GetAddressesAddressUtxosResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressUtxosResponseBody403' with all required fields.
mkGetAddressesAddressUtxosResponseBody403 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressUtxosResponseBody403StatusCode'
  -> GetAddressesAddressUtxosResponseBody403
mkGetAddressesAddressUtxosResponseBody403 getAddressesAddressUtxosResponseBody403Error getAddressesAddressUtxosResponseBody403Message getAddressesAddressUtxosResponseBody403StatusCode = GetAddressesAddressUtxosResponseBody403{getAddressesAddressUtxosResponseBody403Error = getAddressesAddressUtxosResponseBody403Error,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody403Message = getAddressesAddressUtxosResponseBody403Message,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody403StatusCode = getAddressesAddressUtxosResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressUtxosResponseBody404 = GetAddressesAddressUtxosResponseBody404 {
  -- | error
  getAddressesAddressUtxosResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressUtxosResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressUtxosResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressUtxosResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressUtxosResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressUtxosResponseBody404" (\obj -> ((GHC.Base.pure GetAddressesAddressUtxosResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressUtxosResponseBody404' with all required fields.
mkGetAddressesAddressUtxosResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressUtxosResponseBody404StatusCode'
  -> GetAddressesAddressUtxosResponseBody404
mkGetAddressesAddressUtxosResponseBody404 getAddressesAddressUtxosResponseBody404Error getAddressesAddressUtxosResponseBody404Message getAddressesAddressUtxosResponseBody404StatusCode = GetAddressesAddressUtxosResponseBody404{getAddressesAddressUtxosResponseBody404Error = getAddressesAddressUtxosResponseBody404Error,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody404Message = getAddressesAddressUtxosResponseBody404Message,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody404StatusCode = getAddressesAddressUtxosResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressUtxosResponseBody418 = GetAddressesAddressUtxosResponseBody418 {
  -- | error
  getAddressesAddressUtxosResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressUtxosResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressUtxosResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressUtxosResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressUtxosResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressUtxosResponseBody418" (\obj -> ((GHC.Base.pure GetAddressesAddressUtxosResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressUtxosResponseBody418' with all required fields.
mkGetAddressesAddressUtxosResponseBody418 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressUtxosResponseBody418StatusCode'
  -> GetAddressesAddressUtxosResponseBody418
mkGetAddressesAddressUtxosResponseBody418 getAddressesAddressUtxosResponseBody418Error getAddressesAddressUtxosResponseBody418Message getAddressesAddressUtxosResponseBody418StatusCode = GetAddressesAddressUtxosResponseBody418{getAddressesAddressUtxosResponseBody418Error = getAddressesAddressUtxosResponseBody418Error,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody418Message = getAddressesAddressUtxosResponseBody418Message,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody418StatusCode = getAddressesAddressUtxosResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressUtxosResponseBody429 = GetAddressesAddressUtxosResponseBody429 {
  -- | error
  getAddressesAddressUtxosResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressUtxosResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressUtxosResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressUtxosResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressUtxosResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressUtxosResponseBody429" (\obj -> ((GHC.Base.pure GetAddressesAddressUtxosResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressUtxosResponseBody429' with all required fields.
mkGetAddressesAddressUtxosResponseBody429 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressUtxosResponseBody429StatusCode'
  -> GetAddressesAddressUtxosResponseBody429
mkGetAddressesAddressUtxosResponseBody429 getAddressesAddressUtxosResponseBody429Error getAddressesAddressUtxosResponseBody429Message getAddressesAddressUtxosResponseBody429StatusCode = GetAddressesAddressUtxosResponseBody429{getAddressesAddressUtxosResponseBody429Error = getAddressesAddressUtxosResponseBody429Error,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody429Message = getAddressesAddressUtxosResponseBody429Message,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody429StatusCode = getAddressesAddressUtxosResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAddressesAddressUtxosResponseBody500 = GetAddressesAddressUtxosResponseBody500 {
  -- | error
  getAddressesAddressUtxosResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getAddressesAddressUtxosResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getAddressesAddressUtxosResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAddressesAddressUtxosResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getAddressesAddressUtxosResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAddressesAddressUtxosResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAddressesAddressUtxosResponseBody500" (\obj -> ((GHC.Base.pure GetAddressesAddressUtxosResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetAddressesAddressUtxosResponseBody500' with all required fields.
mkGetAddressesAddressUtxosResponseBody500 :: Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getAddressesAddressUtxosResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getAddressesAddressUtxosResponseBody500StatusCode'
  -> GetAddressesAddressUtxosResponseBody500
mkGetAddressesAddressUtxosResponseBody500 getAddressesAddressUtxosResponseBody500Error getAddressesAddressUtxosResponseBody500Message getAddressesAddressUtxosResponseBody500StatusCode = GetAddressesAddressUtxosResponseBody500{getAddressesAddressUtxosResponseBody500Error = getAddressesAddressUtxosResponseBody500Error,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody500Message = getAddressesAddressUtxosResponseBody500Message,
                                                                                                                                                                                                                                  getAddressesAddressUtxosResponseBody500StatusCode = getAddressesAddressUtxosResponseBody500StatusCode}
-- | > GET /addresses/{address}/utxos
-- 
-- The same as 'getAddresses_Address_Utxos' but accepts an explicit configuration.
getAddresses_Address_UtxosWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAddressesAddressUtxosParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetAddressesAddressUtxosResponse) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_UtxosWithConfiguration config
                                            parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetAddressesAddressUtxosResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    AddressUtxoContent)
                                                                                                                                                                                                            | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetAddressesAddressUtxosResponseBody400)
                                                                                                                                                                                                            | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetAddressesAddressUtxosResponseBody403)
                                                                                                                                                                                                            | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetAddressesAddressUtxosResponseBody404)
                                                                                                                                                                                                            | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetAddressesAddressUtxosResponseBody418)
                                                                                                                                                                                                            | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetAddressesAddressUtxosResponseBody429)
                                                                                                                                                                                                            | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetAddressesAddressUtxosResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetAddressesAddressUtxosResponseBody500)
                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressUtxosParametersPathAddress parameters))) GHC.Base.++ "/utxos"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /addresses/{address}/utxos
-- 
-- The same as 'getAddresses_Address_Utxos' but returns the raw 'Data.ByteString.Char8.ByteString'.
getAddresses_Address_UtxosRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetAddressesAddressUtxosParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_UtxosRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressUtxosParametersPathAddress parameters))) GHC.Base.++ "/utxos"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /addresses/{address}/utxos
-- 
-- The same as 'getAddresses_Address_Utxos' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getAddresses_Address_UtxosWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetAddressesAddressUtxosParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getAddresses_Address_UtxosWithConfigurationRaw config
                                               parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/addresses/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getAddressesAddressUtxosParametersPathAddress parameters))) GHC.Base.++ "/utxos"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAddressesAddressUtxosParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
