-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getMetadataTxsLabels_Label_Cbor
module BlockfrostAPI.Operations.GetMetadataTxsLabelsLabelCbor where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /metadata/txs/labels/{label}/cbor
-- 
-- Transaction metadata per label.
getMetadataTxsLabels_Label_Cbor :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetMetadataTxsLabelsLabelCborParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetMetadataTxsLabelsLabelCborResponse) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabels_Label_Cbor parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetMetadataTxsLabelsLabelCborResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  TxMetadataLabelCbor)
                                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetMetadataTxsLabelsLabelCborResponseBody400)
                                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetMetadataTxsLabelsLabelCborResponseBody403)
                                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetMetadataTxsLabelsLabelCborResponseBody404)
                                                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetMetadataTxsLabelsLabelCborResponseBody418)
                                                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetMetadataTxsLabelsLabelCborResponseBody429)
                                                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetMetadataTxsLabelsLabelCborResponseBody500)
                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/metadata/txs/labels/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getMetadataTxsLabelsLabelCborParametersPathLabel parameters))) GHC.Base.++ "/cbor"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/metadata\/txs\/labels\/{label}\/cbor.GET.parameters@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelCborParameters = GetMetadataTxsLabelsLabelCborParameters {
  -- | pathLabel: Represents the parameter named \'label\'
  -- 
  -- Metadata label
  getMetadataTxsLabelsLabelCborParametersPathLabel :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getMetadataTxsLabelsLabelCborParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getMetadataTxsLabelsLabelCborParametersQueryOrder :: (GHC.Maybe.Maybe GetMetadataTxsLabelsLabelCborParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getMetadataTxsLabelsLabelCborParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelCborParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathLabel" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborParametersPathLabel obj : "queryCount" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathLabel" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborParametersPathLabel obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelCborParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelCborParameters" (\obj -> (((GHC.Base.pure GetMetadataTxsLabelsLabelCborParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathLabel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetMetadataTxsLabelsLabelCborParameters' with all required fields.
mkGetMetadataTxsLabelsLabelCborParameters :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborParametersPathLabel'
  -> GetMetadataTxsLabelsLabelCborParameters
mkGetMetadataTxsLabelsLabelCborParameters getMetadataTxsLabelsLabelCborParametersPathLabel = GetMetadataTxsLabelsLabelCborParameters{getMetadataTxsLabelsLabelCborParametersPathLabel = getMetadataTxsLabelsLabelCborParametersPathLabel,
                                                                                                                                     getMetadataTxsLabelsLabelCborParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                     getMetadataTxsLabelsLabelCborParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                     getMetadataTxsLabelsLabelCborParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/metadata\/txs\/labels\/{label}\/cbor.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetMetadataTxsLabelsLabelCborParametersQueryOrder' =
   GetMetadataTxsLabelsLabelCborParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetMetadataTxsLabelsLabelCborParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetMetadataTxsLabelsLabelCborParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetMetadataTxsLabelsLabelCborParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelCborParametersQueryOrder'
    where toJSON (GetMetadataTxsLabelsLabelCborParametersQueryOrder'Other val) = val
          toJSON (GetMetadataTxsLabelsLabelCborParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetMetadataTxsLabelsLabelCborParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetMetadataTxsLabelsLabelCborParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelCborParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetMetadataTxsLabelsLabelCborParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetMetadataTxsLabelsLabelCborParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetMetadataTxsLabelsLabelCborParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getMetadataTxsLabels_Label_Cbor'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetMetadataTxsLabelsLabelCborResponseError' is used.
data GetMetadataTxsLabelsLabelCborResponse =
   GetMetadataTxsLabelsLabelCborResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetMetadataTxsLabelsLabelCborResponse200 TxMetadataLabelCbor -- ^ Return the account delegations content in CBOR
  | GetMetadataTxsLabelsLabelCborResponse400 GetMetadataTxsLabelsLabelCborResponseBody400 -- ^ Bad request
  | GetMetadataTxsLabelsLabelCborResponse403 GetMetadataTxsLabelsLabelCborResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetMetadataTxsLabelsLabelCborResponse404 GetMetadataTxsLabelsLabelCborResponseBody404 -- ^ Component not found
  | GetMetadataTxsLabelsLabelCborResponse418 GetMetadataTxsLabelsLabelCborResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetMetadataTxsLabelsLabelCborResponse429 GetMetadataTxsLabelsLabelCborResponseBody429 -- ^ Usage limit reached
  | GetMetadataTxsLabelsLabelCborResponse500 GetMetadataTxsLabelsLabelCborResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelCborResponseBody400 = GetMetadataTxsLabelsLabelCborResponseBody400 {
  -- | error
  getMetadataTxsLabelsLabelCborResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelCborResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelCborResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelCborResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelCborResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelCborResponseBody400" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelCborResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelCborResponseBody400' with all required fields.
mkGetMetadataTxsLabelsLabelCborResponseBody400 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelCborResponseBody400StatusCode'
  -> GetMetadataTxsLabelsLabelCborResponseBody400
mkGetMetadataTxsLabelsLabelCborResponseBody400 getMetadataTxsLabelsLabelCborResponseBody400Error getMetadataTxsLabelsLabelCborResponseBody400Message getMetadataTxsLabelsLabelCborResponseBody400StatusCode = GetMetadataTxsLabelsLabelCborResponseBody400{getMetadataTxsLabelsLabelCborResponseBody400Error = getMetadataTxsLabelsLabelCborResponseBody400Error,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody400Message = getMetadataTxsLabelsLabelCborResponseBody400Message,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody400StatusCode = getMetadataTxsLabelsLabelCborResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelCborResponseBody403 = GetMetadataTxsLabelsLabelCborResponseBody403 {
  -- | error
  getMetadataTxsLabelsLabelCborResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelCborResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelCborResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelCborResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelCborResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelCborResponseBody403" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelCborResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelCborResponseBody403' with all required fields.
mkGetMetadataTxsLabelsLabelCborResponseBody403 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelCborResponseBody403StatusCode'
  -> GetMetadataTxsLabelsLabelCborResponseBody403
mkGetMetadataTxsLabelsLabelCborResponseBody403 getMetadataTxsLabelsLabelCborResponseBody403Error getMetadataTxsLabelsLabelCborResponseBody403Message getMetadataTxsLabelsLabelCborResponseBody403StatusCode = GetMetadataTxsLabelsLabelCborResponseBody403{getMetadataTxsLabelsLabelCborResponseBody403Error = getMetadataTxsLabelsLabelCborResponseBody403Error,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody403Message = getMetadataTxsLabelsLabelCborResponseBody403Message,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody403StatusCode = getMetadataTxsLabelsLabelCborResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelCborResponseBody404 = GetMetadataTxsLabelsLabelCborResponseBody404 {
  -- | error
  getMetadataTxsLabelsLabelCborResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelCborResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelCborResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelCborResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelCborResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelCborResponseBody404" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelCborResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelCborResponseBody404' with all required fields.
mkGetMetadataTxsLabelsLabelCborResponseBody404 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelCborResponseBody404StatusCode'
  -> GetMetadataTxsLabelsLabelCborResponseBody404
mkGetMetadataTxsLabelsLabelCborResponseBody404 getMetadataTxsLabelsLabelCborResponseBody404Error getMetadataTxsLabelsLabelCborResponseBody404Message getMetadataTxsLabelsLabelCborResponseBody404StatusCode = GetMetadataTxsLabelsLabelCborResponseBody404{getMetadataTxsLabelsLabelCborResponseBody404Error = getMetadataTxsLabelsLabelCborResponseBody404Error,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody404Message = getMetadataTxsLabelsLabelCborResponseBody404Message,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody404StatusCode = getMetadataTxsLabelsLabelCborResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelCborResponseBody418 = GetMetadataTxsLabelsLabelCborResponseBody418 {
  -- | error
  getMetadataTxsLabelsLabelCborResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelCborResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelCborResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelCborResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelCborResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelCborResponseBody418" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelCborResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelCborResponseBody418' with all required fields.
mkGetMetadataTxsLabelsLabelCborResponseBody418 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelCborResponseBody418StatusCode'
  -> GetMetadataTxsLabelsLabelCborResponseBody418
mkGetMetadataTxsLabelsLabelCborResponseBody418 getMetadataTxsLabelsLabelCborResponseBody418Error getMetadataTxsLabelsLabelCborResponseBody418Message getMetadataTxsLabelsLabelCborResponseBody418StatusCode = GetMetadataTxsLabelsLabelCborResponseBody418{getMetadataTxsLabelsLabelCborResponseBody418Error = getMetadataTxsLabelsLabelCborResponseBody418Error,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody418Message = getMetadataTxsLabelsLabelCborResponseBody418Message,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody418StatusCode = getMetadataTxsLabelsLabelCborResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelCborResponseBody429 = GetMetadataTxsLabelsLabelCborResponseBody429 {
  -- | error
  getMetadataTxsLabelsLabelCborResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelCborResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelCborResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelCborResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelCborResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelCborResponseBody429" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelCborResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelCborResponseBody429' with all required fields.
mkGetMetadataTxsLabelsLabelCborResponseBody429 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelCborResponseBody429StatusCode'
  -> GetMetadataTxsLabelsLabelCborResponseBody429
mkGetMetadataTxsLabelsLabelCborResponseBody429 getMetadataTxsLabelsLabelCborResponseBody429Error getMetadataTxsLabelsLabelCborResponseBody429Message getMetadataTxsLabelsLabelCborResponseBody429StatusCode = GetMetadataTxsLabelsLabelCborResponseBody429{getMetadataTxsLabelsLabelCborResponseBody429Error = getMetadataTxsLabelsLabelCborResponseBody429Error,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody429Message = getMetadataTxsLabelsLabelCborResponseBody429Message,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody429StatusCode = getMetadataTxsLabelsLabelCborResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsLabelCborResponseBody500 = GetMetadataTxsLabelsLabelCborResponseBody500 {
  -- | error
  getMetadataTxsLabelsLabelCborResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsLabelCborResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsLabelCborResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsLabelCborResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsLabelCborResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsLabelCborResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsLabelCborResponseBody500" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsLabelCborResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsLabelCborResponseBody500' with all required fields.
mkGetMetadataTxsLabelsLabelCborResponseBody500 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsLabelCborResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsLabelCborResponseBody500StatusCode'
  -> GetMetadataTxsLabelsLabelCborResponseBody500
mkGetMetadataTxsLabelsLabelCborResponseBody500 getMetadataTxsLabelsLabelCborResponseBody500Error getMetadataTxsLabelsLabelCborResponseBody500Message getMetadataTxsLabelsLabelCborResponseBody500StatusCode = GetMetadataTxsLabelsLabelCborResponseBody500{getMetadataTxsLabelsLabelCborResponseBody500Error = getMetadataTxsLabelsLabelCborResponseBody500Error,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody500Message = getMetadataTxsLabelsLabelCborResponseBody500Message,
                                                                                                                                                                                                                                                           getMetadataTxsLabelsLabelCborResponseBody500StatusCode = getMetadataTxsLabelsLabelCborResponseBody500StatusCode}
-- | > GET /metadata/txs/labels/{label}/cbor
-- 
-- The same as 'getMetadataTxsLabels_Label_Cbor' but accepts an explicit configuration.
getMetadataTxsLabels_Label_CborWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetMetadataTxsLabelsLabelCborParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetMetadataTxsLabelsLabelCborResponse) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabels_Label_CborWithConfiguration config
                                                 parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetMetadataTxsLabelsLabelCborResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   TxMetadataLabelCbor)
                                                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsLabelCborResponseBody400)
                                                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsLabelCborResponseBody403)
                                                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsLabelCborResponseBody404)
                                                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsLabelCborResponseBody418)
                                                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsLabelCborResponseBody429)
                                                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsLabelCborResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsLabelCborResponseBody500)
                                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/metadata/txs/labels/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getMetadataTxsLabelsLabelCborParametersPathLabel parameters))) GHC.Base.++ "/cbor"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /metadata/txs/labels/{label}/cbor
-- 
-- The same as 'getMetadataTxsLabels_Label_Cbor' but returns the raw 'Data.ByteString.Char8.ByteString'.
getMetadataTxsLabels_Label_CborRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetMetadataTxsLabelsLabelCborParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabels_Label_CborRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/metadata/txs/labels/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getMetadataTxsLabelsLabelCborParametersPathLabel parameters))) GHC.Base.++ "/cbor"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /metadata/txs/labels/{label}/cbor
-- 
-- The same as 'getMetadataTxsLabels_Label_Cbor' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getMetadataTxsLabels_Label_CborWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetMetadataTxsLabelsLabelCborParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabels_Label_CborWithConfigurationRaw config
                                                    parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/metadata/txs/labels/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getMetadataTxsLabelsLabelCborParametersPathLabel parameters))) GHC.Base.++ "/cbor"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsLabelCborParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
