-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBlocksEpoch_EpochNumber_Slot_SlotNumber_
module BlockfrostAPI.Operations.GetBlocksEpochEpochNumberSlotSlotNumber_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /blocks/epoch/{epoch_number}/slot/{slot_number}
-- 
-- Return the content of a requested block for a specific slot in an epoch
getBlocksEpoch_EpochNumber_Slot_SlotNumber_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetBlocksEpochEpochNumberSlotSlotNumberParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetBlocksEpochEpochNumberSlotSlotNumberResponse) -- ^ Monadic computation which returns the result of the operation
getBlocksEpoch_EpochNumber_Slot_SlotNumber_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBlocksEpochEpochNumberSlotSlotNumberResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockContent)
                                                                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400)
                                                                                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403)
                                                                                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404)
                                                                                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418)
                                                                                                                                                                                                                           | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429)
                                                                                                                                                                                                                           | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500)
                                                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/epoch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber parameters))) GHC.Base.++ ("/slot/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/blocks\/epoch\/{epoch_number}\/slot\/{slot_number}.GET.parameters@ in the specification.
-- 
-- 
data GetBlocksEpochEpochNumberSlotSlotNumberParameters = GetBlocksEpochEpochNumberSlotSlotNumberParameters {
  -- | pathEpoch_number: Represents the parameter named \'epoch_number\'
  -- 
  -- Epoch for specific epoch slot.
  getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber :: GHC.Integer.Type.Integer
  -- | pathSlot_number: Represents the parameter named \'slot_number\'
  -- 
  -- Slot position for requested block.
  , getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksEpochEpochNumberSlotSlotNumberParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathEpoch_number" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber obj : "pathSlot_number" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathEpoch_number" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber obj) GHC.Base.<> ("pathSlot_number" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksEpochEpochNumberSlotSlotNumberParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksEpochEpochNumberSlotSlotNumberParameters" (\obj -> (GHC.Base.pure GetBlocksEpochEpochNumberSlotSlotNumberParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathEpoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathSlot_number"))
-- | Create a new 'GetBlocksEpochEpochNumberSlotSlotNumberParameters' with all required fields.
mkGetBlocksEpochEpochNumberSlotSlotNumberParameters :: GHC.Integer.Type.Integer -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber'
  -> GetBlocksEpochEpochNumberSlotSlotNumberParameters
mkGetBlocksEpochEpochNumberSlotSlotNumberParameters getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber = GetBlocksEpochEpochNumberSlotSlotNumberParameters{getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber = getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber,
                                                                                                                                                                                                                                         getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber = getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber}
-- | Represents a response of the operation 'getBlocksEpoch_EpochNumber_Slot_SlotNumber_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBlocksEpochEpochNumberSlotSlotNumberResponseError' is used.
data GetBlocksEpochEpochNumberSlotSlotNumberResponse =
   GetBlocksEpochEpochNumberSlotSlotNumberResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBlocksEpochEpochNumberSlotSlotNumberResponse200 BlockContent -- ^ Return the contents of the block
  | GetBlocksEpochEpochNumberSlotSlotNumberResponse400 GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400 -- ^ Bad request
  | GetBlocksEpochEpochNumberSlotSlotNumberResponse403 GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetBlocksEpochEpochNumberSlotSlotNumberResponse404 GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404 -- ^ Component not found
  | GetBlocksEpochEpochNumberSlotSlotNumberResponse418 GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetBlocksEpochEpochNumberSlotSlotNumberResponse429 GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429 -- ^ Usage limit reached
  | GetBlocksEpochEpochNumberSlotSlotNumberResponse500 GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400 = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400 {
  -- | error
  getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400" (\obj -> ((GHC.Base.pure GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400' with all required fields.
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody400 :: Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody400StatusCode'
  -> GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody400 getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Error getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Message getBlocksEpochEpochNumberSlotSlotNumberResponseBody400StatusCode = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody400{getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Error = getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Error,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Message = getBlocksEpochEpochNumberSlotSlotNumberResponseBody400Message,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody400StatusCode = getBlocksEpochEpochNumberSlotSlotNumberResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403 = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403 {
  -- | error
  getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403" (\obj -> ((GHC.Base.pure GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403' with all required fields.
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody403 :: Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody403StatusCode'
  -> GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody403 getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Error getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Message getBlocksEpochEpochNumberSlotSlotNumberResponseBody403StatusCode = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody403{getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Error = getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Error,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Message = getBlocksEpochEpochNumberSlotSlotNumberResponseBody403Message,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody403StatusCode = getBlocksEpochEpochNumberSlotSlotNumberResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404 = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404 {
  -- | error
  getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404" (\obj -> ((GHC.Base.pure GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404' with all required fields.
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody404 :: Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody404StatusCode'
  -> GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody404 getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Error getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Message getBlocksEpochEpochNumberSlotSlotNumberResponseBody404StatusCode = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody404{getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Error = getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Error,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Message = getBlocksEpochEpochNumberSlotSlotNumberResponseBody404Message,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody404StatusCode = getBlocksEpochEpochNumberSlotSlotNumberResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418 = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418 {
  -- | error
  getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418" (\obj -> ((GHC.Base.pure GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418' with all required fields.
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody418 :: Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody418StatusCode'
  -> GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody418 getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Error getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Message getBlocksEpochEpochNumberSlotSlotNumberResponseBody418StatusCode = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418{getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Error = getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Error,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Message = getBlocksEpochEpochNumberSlotSlotNumberResponseBody418Message,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody418StatusCode = getBlocksEpochEpochNumberSlotSlotNumberResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429 = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429 {
  -- | error
  getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429" (\obj -> ((GHC.Base.pure GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429' with all required fields.
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody429 :: Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody429StatusCode'
  -> GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody429 getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Error getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Message getBlocksEpochEpochNumberSlotSlotNumberResponseBody429StatusCode = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody429{getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Error = getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Error,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Message = getBlocksEpochEpochNumberSlotSlotNumberResponseBody429Message,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody429StatusCode = getBlocksEpochEpochNumberSlotSlotNumberResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500 = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500 {
  -- | error
  getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksEpochEpochNumberSlotSlotNumberResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksEpochEpochNumberSlotSlotNumberResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500" (\obj -> ((GHC.Base.pure GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500' with all required fields.
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody500 :: Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksEpochEpochNumberSlotSlotNumberResponseBody500StatusCode'
  -> GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500
mkGetBlocksEpochEpochNumberSlotSlotNumberResponseBody500 getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Error getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Message getBlocksEpochEpochNumberSlotSlotNumberResponseBody500StatusCode = GetBlocksEpochEpochNumberSlotSlotNumberResponseBody500{getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Error = getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Error,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Message = getBlocksEpochEpochNumberSlotSlotNumberResponseBody500Message,
                                                                                                                                                                                                                                                                                                             getBlocksEpochEpochNumberSlotSlotNumberResponseBody500StatusCode = getBlocksEpochEpochNumberSlotSlotNumberResponseBody500StatusCode}
-- | > GET /blocks/epoch/{epoch_number}/slot/{slot_number}
-- 
-- The same as 'getBlocksEpoch_EpochNumber_Slot_SlotNumber_' but accepts an explicit configuration.
getBlocksEpoch_EpochNumber_Slot_SlotNumber_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetBlocksEpochEpochNumberSlotSlotNumberParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetBlocksEpochEpochNumberSlotSlotNumberResponse) -- ^ Monadic computation which returns the result of the operation
getBlocksEpoch_EpochNumber_Slot_SlotNumber_WithConfiguration config
                                                             parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetBlocksEpochEpochNumberSlotSlotNumberResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
lockContent)
                                                                                                                                                                                                                                            | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
etBlocksEpochEpochNumberSlotSlotNumberResponseBody400)
                                                                                                                                                                                                                                            | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
etBlocksEpochEpochNumberSlotSlotNumberResponseBody403)
                                                                                                                                                                                                                                            | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
etBlocksEpochEpochNumberSlotSlotNumberResponseBody404)
                                                                                                                                                                                                                                            | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksEpochEpochNumberSlotSlotNumberResponseBody418)
                                                                                                                                                                                                                                            | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
etBlocksEpochEpochNumberSlotSlotNumberResponseBody429)
                                                                                                                                                                                                                                            | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksEpochEpochNumberSlotSlotNumberResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
etBlocksEpochEpochNumberSlotSlotNumberResponseBody500)
                                                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/epoch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber parameters))) GHC.Base.++ ("/slot/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | > GET /blocks/epoch/{epoch_number}/slot/{slot_number}
-- 
-- The same as 'getBlocksEpoch_EpochNumber_Slot_SlotNumber_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocksEpoch_EpochNumber_Slot_SlotNumber_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetBlocksEpochEpochNumberSlotSlotNumberParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocksEpoch_EpochNumber_Slot_SlotNumber_Raw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/epoch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber parameters))) GHC.Base.++ ("/slot/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | > GET /blocks/epoch/{epoch_number}/slot/{slot_number}
-- 
-- The same as 'getBlocksEpoch_EpochNumber_Slot_SlotNumber_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocksEpoch_EpochNumber_Slot_SlotNumber_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetBlocksEpochEpochNumberSlotSlotNumberParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocksEpoch_EpochNumber_Slot_SlotNumber_WithConfigurationRaw config
                                                                parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/blocks/epoch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksEpochEpochNumberSlotSlotNumberParametersPathEpochNumber parameters))) GHC.Base.++ ("/slot/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getBlocksEpochEpochNumberSlotSlotNumberParametersPathSlotNumber parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
