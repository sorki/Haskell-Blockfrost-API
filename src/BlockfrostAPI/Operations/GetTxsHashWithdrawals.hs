-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTxs_Hash_Withdrawals
module BlockfrostAPI.Operations.GetTxsHashWithdrawals where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /txs/{hash}/withdrawals
-- 
-- Obtain information about withdrawals of a specific transaction.
getTxs_Hash_Withdrawals :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetTxsHashWithdrawalsResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_Withdrawals hash = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTxsHashWithdrawalsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    ([TxContentWithdrawals]))
                                                                                                                                                                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashWithdrawalsResponseBody400)
                                                                                                                                                                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashWithdrawalsResponseBody403)
                                                                                                                                                                               | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashWithdrawalsResponseBody404)
                                                                                                                                                                               | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashWithdrawalsResponseBody418)
                                                                                                                                                                               | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashWithdrawalsResponseBody429)
                                                                                                                                                                               | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashWithdrawalsResponseBody500)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/withdrawals"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getTxs_Hash_Withdrawals'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTxsHashWithdrawalsResponseError' is used.
data GetTxsHashWithdrawalsResponse =
   GetTxsHashWithdrawalsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTxsHashWithdrawalsResponse200 ([TxContentWithdrawals]) -- ^ Obtain information about withdrawals of a specific transaction.
  | GetTxsHashWithdrawalsResponse400 GetTxsHashWithdrawalsResponseBody400 -- ^ Bad request
  | GetTxsHashWithdrawalsResponse403 GetTxsHashWithdrawalsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetTxsHashWithdrawalsResponse404 GetTxsHashWithdrawalsResponseBody404 -- ^ Component not found
  | GetTxsHashWithdrawalsResponse418 GetTxsHashWithdrawalsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetTxsHashWithdrawalsResponse429 GetTxsHashWithdrawalsResponseBody429 -- ^ Usage limit reached
  | GetTxsHashWithdrawalsResponse500 GetTxsHashWithdrawalsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashWithdrawalsResponseBody400 = GetTxsHashWithdrawalsResponseBody400 {
  -- | error
  getTxsHashWithdrawalsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashWithdrawalsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashWithdrawalsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashWithdrawalsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashWithdrawalsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashWithdrawalsResponseBody400" (\obj -> ((GHC.Base.pure GetTxsHashWithdrawalsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashWithdrawalsResponseBody400' with all required fields.
mkGetTxsHashWithdrawalsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashWithdrawalsResponseBody400StatusCode'
  -> GetTxsHashWithdrawalsResponseBody400
mkGetTxsHashWithdrawalsResponseBody400 getTxsHashWithdrawalsResponseBody400Error getTxsHashWithdrawalsResponseBody400Message getTxsHashWithdrawalsResponseBody400StatusCode = GetTxsHashWithdrawalsResponseBody400{getTxsHashWithdrawalsResponseBody400Error = getTxsHashWithdrawalsResponseBody400Error,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody400Message = getTxsHashWithdrawalsResponseBody400Message,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody400StatusCode = getTxsHashWithdrawalsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashWithdrawalsResponseBody403 = GetTxsHashWithdrawalsResponseBody403 {
  -- | error
  getTxsHashWithdrawalsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashWithdrawalsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashWithdrawalsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashWithdrawalsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashWithdrawalsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashWithdrawalsResponseBody403" (\obj -> ((GHC.Base.pure GetTxsHashWithdrawalsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashWithdrawalsResponseBody403' with all required fields.
mkGetTxsHashWithdrawalsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashWithdrawalsResponseBody403StatusCode'
  -> GetTxsHashWithdrawalsResponseBody403
mkGetTxsHashWithdrawalsResponseBody403 getTxsHashWithdrawalsResponseBody403Error getTxsHashWithdrawalsResponseBody403Message getTxsHashWithdrawalsResponseBody403StatusCode = GetTxsHashWithdrawalsResponseBody403{getTxsHashWithdrawalsResponseBody403Error = getTxsHashWithdrawalsResponseBody403Error,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody403Message = getTxsHashWithdrawalsResponseBody403Message,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody403StatusCode = getTxsHashWithdrawalsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashWithdrawalsResponseBody404 = GetTxsHashWithdrawalsResponseBody404 {
  -- | error
  getTxsHashWithdrawalsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashWithdrawalsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashWithdrawalsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashWithdrawalsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashWithdrawalsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashWithdrawalsResponseBody404" (\obj -> ((GHC.Base.pure GetTxsHashWithdrawalsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashWithdrawalsResponseBody404' with all required fields.
mkGetTxsHashWithdrawalsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashWithdrawalsResponseBody404StatusCode'
  -> GetTxsHashWithdrawalsResponseBody404
mkGetTxsHashWithdrawalsResponseBody404 getTxsHashWithdrawalsResponseBody404Error getTxsHashWithdrawalsResponseBody404Message getTxsHashWithdrawalsResponseBody404StatusCode = GetTxsHashWithdrawalsResponseBody404{getTxsHashWithdrawalsResponseBody404Error = getTxsHashWithdrawalsResponseBody404Error,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody404Message = getTxsHashWithdrawalsResponseBody404Message,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody404StatusCode = getTxsHashWithdrawalsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashWithdrawalsResponseBody418 = GetTxsHashWithdrawalsResponseBody418 {
  -- | error
  getTxsHashWithdrawalsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashWithdrawalsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashWithdrawalsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashWithdrawalsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashWithdrawalsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashWithdrawalsResponseBody418" (\obj -> ((GHC.Base.pure GetTxsHashWithdrawalsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashWithdrawalsResponseBody418' with all required fields.
mkGetTxsHashWithdrawalsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashWithdrawalsResponseBody418StatusCode'
  -> GetTxsHashWithdrawalsResponseBody418
mkGetTxsHashWithdrawalsResponseBody418 getTxsHashWithdrawalsResponseBody418Error getTxsHashWithdrawalsResponseBody418Message getTxsHashWithdrawalsResponseBody418StatusCode = GetTxsHashWithdrawalsResponseBody418{getTxsHashWithdrawalsResponseBody418Error = getTxsHashWithdrawalsResponseBody418Error,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody418Message = getTxsHashWithdrawalsResponseBody418Message,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody418StatusCode = getTxsHashWithdrawalsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashWithdrawalsResponseBody429 = GetTxsHashWithdrawalsResponseBody429 {
  -- | error
  getTxsHashWithdrawalsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashWithdrawalsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashWithdrawalsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashWithdrawalsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashWithdrawalsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashWithdrawalsResponseBody429" (\obj -> ((GHC.Base.pure GetTxsHashWithdrawalsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashWithdrawalsResponseBody429' with all required fields.
mkGetTxsHashWithdrawalsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashWithdrawalsResponseBody429StatusCode'
  -> GetTxsHashWithdrawalsResponseBody429
mkGetTxsHashWithdrawalsResponseBody429 getTxsHashWithdrawalsResponseBody429Error getTxsHashWithdrawalsResponseBody429Message getTxsHashWithdrawalsResponseBody429StatusCode = GetTxsHashWithdrawalsResponseBody429{getTxsHashWithdrawalsResponseBody429Error = getTxsHashWithdrawalsResponseBody429Error,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody429Message = getTxsHashWithdrawalsResponseBody429Message,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody429StatusCode = getTxsHashWithdrawalsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashWithdrawalsResponseBody500 = GetTxsHashWithdrawalsResponseBody500 {
  -- | error
  getTxsHashWithdrawalsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashWithdrawalsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashWithdrawalsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashWithdrawalsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashWithdrawalsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashWithdrawalsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashWithdrawalsResponseBody500" (\obj -> ((GHC.Base.pure GetTxsHashWithdrawalsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashWithdrawalsResponseBody500' with all required fields.
mkGetTxsHashWithdrawalsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashWithdrawalsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashWithdrawalsResponseBody500StatusCode'
  -> GetTxsHashWithdrawalsResponseBody500
mkGetTxsHashWithdrawalsResponseBody500 getTxsHashWithdrawalsResponseBody500Error getTxsHashWithdrawalsResponseBody500Message getTxsHashWithdrawalsResponseBody500StatusCode = GetTxsHashWithdrawalsResponseBody500{getTxsHashWithdrawalsResponseBody500Error = getTxsHashWithdrawalsResponseBody500Error,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody500Message = getTxsHashWithdrawalsResponseBody500Message,
                                                                                                                                                                                                                   getTxsHashWithdrawalsResponseBody500StatusCode = getTxsHashWithdrawalsResponseBody500StatusCode}
-- | > GET /txs/{hash}/withdrawals
-- 
-- The same as 'getTxs_Hash_Withdrawals' but accepts an explicit configuration.
getTxs_Hash_WithdrawalsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> m (Network.HTTP.Client.Types.Response GetTxsHashWithdrawalsResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_WithdrawalsWithConfiguration config
                                         hash = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetTxsHashWithdrawalsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     ([TxContentWithdrawals]))
                                                                                                                                                                                                | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashWithdrawalsResponseBody400)
                                                                                                                                                                                                | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashWithdrawalsResponseBody403)
                                                                                                                                                                                                | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashWithdrawalsResponseBody404)
                                                                                                                                                                                                | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashWithdrawalsResponseBody418)
                                                                                                                                                                                                | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashWithdrawalsResponseBody429)
                                                                                                                                                                                                | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashWithdrawalsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashWithdrawalsResponseBody500)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/withdrawals"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/withdrawals
-- 
-- The same as 'getTxs_Hash_Withdrawals' but returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_WithdrawalsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_WithdrawalsRaw hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/withdrawals"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/withdrawals
-- 
-- The same as 'getTxs_Hash_Withdrawals' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_WithdrawalsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction.
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_WithdrawalsWithConfigurationRaw config
                                            hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/withdrawals"))) GHC.Base.mempty)
