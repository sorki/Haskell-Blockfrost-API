-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getIpfsGateway_IPFSPath_
module BlockfrostAPI.Operations.GetIpfsGatewayIPFSPath_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /ipfs/gateway/{IPFS_path}
-- 
-- Retrieve an object from the IFPS gateway (useful if you do not want to rely on a public gateway, such as \`ipfs.blockfrost.dev\`).
getIpfsGateway_IPFSPath_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ IPFS_path
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetIpfsGatewayIPFSPathResponse) -- ^ Monadic computation which returns the result of the operation
getIpfsGateway_IPFSPath_ iPFSPath = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetIpfsGatewayIPFSPathResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetIpfsGatewayIPFSPathResponse200
                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsGatewayIPFSPathResponseBody400)
                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsGatewayIPFSPathResponseBody403)
                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsGatewayIPFSPathResponseBody404)
                                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsGatewayIPFSPathResponseBody418)
                                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsGatewayIPFSPathResponseBody429)
                                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetIpfsGatewayIPFSPathResponseBody500)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/ipfs/gateway/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getIpfsGateway_IPFSPath_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetIpfsGatewayIPFSPathResponseError' is used.
data GetIpfsGatewayIPFSPathResponse =
   GetIpfsGatewayIPFSPathResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetIpfsGatewayIPFSPathResponse200 -- ^ Returns the object content
  | GetIpfsGatewayIPFSPathResponse400 GetIpfsGatewayIPFSPathResponseBody400 -- ^ Bad request
  | GetIpfsGatewayIPFSPathResponse403 GetIpfsGatewayIPFSPathResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetIpfsGatewayIPFSPathResponse404 GetIpfsGatewayIPFSPathResponseBody404 -- ^ Component not found
  | GetIpfsGatewayIPFSPathResponse418 GetIpfsGatewayIPFSPathResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetIpfsGatewayIPFSPathResponse429 GetIpfsGatewayIPFSPathResponseBody429 -- ^ Usage limit reached
  | GetIpfsGatewayIPFSPathResponse500 GetIpfsGatewayIPFSPathResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsGatewayIPFSPathResponseBody400 = GetIpfsGatewayIPFSPathResponseBody400 {
  -- | error
  getIpfsGatewayIPFSPathResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsGatewayIPFSPathResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsGatewayIPFSPathResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsGatewayIPFSPathResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsGatewayIPFSPathResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsGatewayIPFSPathResponseBody400" (\obj -> ((GHC.Base.pure GetIpfsGatewayIPFSPathResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsGatewayIPFSPathResponseBody400' with all required fields.
mkGetIpfsGatewayIPFSPathResponseBody400 :: Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsGatewayIPFSPathResponseBody400StatusCode'
  -> GetIpfsGatewayIPFSPathResponseBody400
mkGetIpfsGatewayIPFSPathResponseBody400 getIpfsGatewayIPFSPathResponseBody400Error getIpfsGatewayIPFSPathResponseBody400Message getIpfsGatewayIPFSPathResponseBody400StatusCode = GetIpfsGatewayIPFSPathResponseBody400{getIpfsGatewayIPFSPathResponseBody400Error = getIpfsGatewayIPFSPathResponseBody400Error,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody400Message = getIpfsGatewayIPFSPathResponseBody400Message,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody400StatusCode = getIpfsGatewayIPFSPathResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsGatewayIPFSPathResponseBody403 = GetIpfsGatewayIPFSPathResponseBody403 {
  -- | error
  getIpfsGatewayIPFSPathResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsGatewayIPFSPathResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsGatewayIPFSPathResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsGatewayIPFSPathResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsGatewayIPFSPathResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsGatewayIPFSPathResponseBody403" (\obj -> ((GHC.Base.pure GetIpfsGatewayIPFSPathResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsGatewayIPFSPathResponseBody403' with all required fields.
mkGetIpfsGatewayIPFSPathResponseBody403 :: Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsGatewayIPFSPathResponseBody403StatusCode'
  -> GetIpfsGatewayIPFSPathResponseBody403
mkGetIpfsGatewayIPFSPathResponseBody403 getIpfsGatewayIPFSPathResponseBody403Error getIpfsGatewayIPFSPathResponseBody403Message getIpfsGatewayIPFSPathResponseBody403StatusCode = GetIpfsGatewayIPFSPathResponseBody403{getIpfsGatewayIPFSPathResponseBody403Error = getIpfsGatewayIPFSPathResponseBody403Error,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody403Message = getIpfsGatewayIPFSPathResponseBody403Message,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody403StatusCode = getIpfsGatewayIPFSPathResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsGatewayIPFSPathResponseBody404 = GetIpfsGatewayIPFSPathResponseBody404 {
  -- | error
  getIpfsGatewayIPFSPathResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsGatewayIPFSPathResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsGatewayIPFSPathResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsGatewayIPFSPathResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsGatewayIPFSPathResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsGatewayIPFSPathResponseBody404" (\obj -> ((GHC.Base.pure GetIpfsGatewayIPFSPathResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsGatewayIPFSPathResponseBody404' with all required fields.
mkGetIpfsGatewayIPFSPathResponseBody404 :: Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsGatewayIPFSPathResponseBody404StatusCode'
  -> GetIpfsGatewayIPFSPathResponseBody404
mkGetIpfsGatewayIPFSPathResponseBody404 getIpfsGatewayIPFSPathResponseBody404Error getIpfsGatewayIPFSPathResponseBody404Message getIpfsGatewayIPFSPathResponseBody404StatusCode = GetIpfsGatewayIPFSPathResponseBody404{getIpfsGatewayIPFSPathResponseBody404Error = getIpfsGatewayIPFSPathResponseBody404Error,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody404Message = getIpfsGatewayIPFSPathResponseBody404Message,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody404StatusCode = getIpfsGatewayIPFSPathResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsGatewayIPFSPathResponseBody418 = GetIpfsGatewayIPFSPathResponseBody418 {
  -- | error
  getIpfsGatewayIPFSPathResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsGatewayIPFSPathResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsGatewayIPFSPathResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsGatewayIPFSPathResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsGatewayIPFSPathResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsGatewayIPFSPathResponseBody418" (\obj -> ((GHC.Base.pure GetIpfsGatewayIPFSPathResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsGatewayIPFSPathResponseBody418' with all required fields.
mkGetIpfsGatewayIPFSPathResponseBody418 :: Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsGatewayIPFSPathResponseBody418StatusCode'
  -> GetIpfsGatewayIPFSPathResponseBody418
mkGetIpfsGatewayIPFSPathResponseBody418 getIpfsGatewayIPFSPathResponseBody418Error getIpfsGatewayIPFSPathResponseBody418Message getIpfsGatewayIPFSPathResponseBody418StatusCode = GetIpfsGatewayIPFSPathResponseBody418{getIpfsGatewayIPFSPathResponseBody418Error = getIpfsGatewayIPFSPathResponseBody418Error,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody418Message = getIpfsGatewayIPFSPathResponseBody418Message,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody418StatusCode = getIpfsGatewayIPFSPathResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsGatewayIPFSPathResponseBody429 = GetIpfsGatewayIPFSPathResponseBody429 {
  -- | error
  getIpfsGatewayIPFSPathResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsGatewayIPFSPathResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsGatewayIPFSPathResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsGatewayIPFSPathResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsGatewayIPFSPathResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsGatewayIPFSPathResponseBody429" (\obj -> ((GHC.Base.pure GetIpfsGatewayIPFSPathResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsGatewayIPFSPathResponseBody429' with all required fields.
mkGetIpfsGatewayIPFSPathResponseBody429 :: Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsGatewayIPFSPathResponseBody429StatusCode'
  -> GetIpfsGatewayIPFSPathResponseBody429
mkGetIpfsGatewayIPFSPathResponseBody429 getIpfsGatewayIPFSPathResponseBody429Error getIpfsGatewayIPFSPathResponseBody429Message getIpfsGatewayIPFSPathResponseBody429StatusCode = GetIpfsGatewayIPFSPathResponseBody429{getIpfsGatewayIPFSPathResponseBody429Error = getIpfsGatewayIPFSPathResponseBody429Error,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody429Message = getIpfsGatewayIPFSPathResponseBody429Message,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody429StatusCode = getIpfsGatewayIPFSPathResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIpfsGatewayIPFSPathResponseBody500 = GetIpfsGatewayIPFSPathResponseBody500 {
  -- | error
  getIpfsGatewayIPFSPathResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getIpfsGatewayIPFSPathResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getIpfsGatewayIPFSPathResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIpfsGatewayIPFSPathResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getIpfsGatewayIPFSPathResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIpfsGatewayIPFSPathResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIpfsGatewayIPFSPathResponseBody500" (\obj -> ((GHC.Base.pure GetIpfsGatewayIPFSPathResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetIpfsGatewayIPFSPathResponseBody500' with all required fields.
mkGetIpfsGatewayIPFSPathResponseBody500 :: Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getIpfsGatewayIPFSPathResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getIpfsGatewayIPFSPathResponseBody500StatusCode'
  -> GetIpfsGatewayIPFSPathResponseBody500
mkGetIpfsGatewayIPFSPathResponseBody500 getIpfsGatewayIPFSPathResponseBody500Error getIpfsGatewayIPFSPathResponseBody500Message getIpfsGatewayIPFSPathResponseBody500StatusCode = GetIpfsGatewayIPFSPathResponseBody500{getIpfsGatewayIPFSPathResponseBody500Error = getIpfsGatewayIPFSPathResponseBody500Error,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody500Message = getIpfsGatewayIPFSPathResponseBody500Message,
                                                                                                                                                                                                                        getIpfsGatewayIPFSPathResponseBody500StatusCode = getIpfsGatewayIPFSPathResponseBody500StatusCode}
-- | > GET /ipfs/gateway/{IPFS_path}
-- 
-- The same as 'getIpfsGateway_IPFSPath_' but accepts an explicit configuration.
getIpfsGateway_IPFSPath_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ IPFS_path
  -> m (Network.HTTP.Client.Types.Response GetIpfsGatewayIPFSPathResponse) -- ^ Monadic computation which returns the result of the operation
getIpfsGateway_IPFSPath_WithConfiguration config
                                          iPFSPath = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetIpfsGatewayIPFSPathResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetIpfsGatewayIPFSPathResponse200
                                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsGatewayIPFSPathResponseBody400)
                                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsGatewayIPFSPathResponseBody403)
                                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsGatewayIPFSPathResponseBody404)
                                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsGatewayIPFSPathResponseBody418)
                                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsGatewayIPFSPathResponseBody429)
                                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetIpfsGatewayIPFSPathResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetIpfsGatewayIPFSPathResponseBody500)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/ipfs/gateway/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /ipfs/gateway/{IPFS_path}
-- 
-- The same as 'getIpfsGateway_IPFSPath_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getIpfsGateway_IPFSPath_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ IPFS_path
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getIpfsGateway_IPFSPath_Raw iPFSPath = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/ipfs/gateway/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /ipfs/gateway/{IPFS_path}
-- 
-- The same as 'getIpfsGateway_IPFSPath_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getIpfsGateway_IPFSPath_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ IPFS_path
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getIpfsGateway_IPFSPath_WithConfigurationRaw config
                                             iPFSPath = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/ipfs/gateway/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
