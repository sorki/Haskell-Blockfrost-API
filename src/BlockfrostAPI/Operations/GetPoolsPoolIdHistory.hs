-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPools_PoolId_History
module BlockfrostAPI.Operations.GetPoolsPoolIdHistory where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /pools/{pool_id}/history
-- 
-- History of stake pool parameters over epochs.
getPools_PoolId_History :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsPoolIdHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetPoolsPoolIdHistoryResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_History parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdHistoryResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          PoolHistories)
                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdHistoryResponseBody400)
                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdHistoryResponseBody403)
                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdHistoryResponseBody404)
                                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdHistoryResponseBody418)
                                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdHistoryResponseBody429)
                                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdHistoryResponseBody500)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdHistoryParametersPathPoolId parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/pools\/{pool_id}\/history.GET.parameters@ in the specification.
-- 
-- 
data GetPoolsPoolIdHistoryParameters = GetPoolsPoolIdHistoryParameters {
  -- | pathPool_id: Represents the parameter named \'pool_id\'
  -- 
  -- Bech32 or hexadecimal pool ID.
  getPoolsPoolIdHistoryParametersPathPoolId :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getPoolsPoolIdHistoryParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getPoolsPoolIdHistoryParametersQueryOrder :: (GHC.Maybe.Maybe GetPoolsPoolIdHistoryParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results
  , getPoolsPoolIdHistoryParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdHistoryParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathPool_id" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryParametersPathPoolId obj : "queryCount" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathPool_id" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryParametersPathPoolId obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdHistoryParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdHistoryParameters" (\obj -> (((GHC.Base.pure GetPoolsPoolIdHistoryParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathPool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetPoolsPoolIdHistoryParameters' with all required fields.
mkGetPoolsPoolIdHistoryParameters :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryParametersPathPoolId'
  -> GetPoolsPoolIdHistoryParameters
mkGetPoolsPoolIdHistoryParameters getPoolsPoolIdHistoryParametersPathPoolId = GetPoolsPoolIdHistoryParameters{getPoolsPoolIdHistoryParametersPathPoolId = getPoolsPoolIdHistoryParametersPathPoolId,
                                                                                                              getPoolsPoolIdHistoryParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                              getPoolsPoolIdHistoryParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                              getPoolsPoolIdHistoryParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/pools\/{pool_id}\/history.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetPoolsPoolIdHistoryParametersQueryOrder' =
   GetPoolsPoolIdHistoryParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetPoolsPoolIdHistoryParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetPoolsPoolIdHistoryParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetPoolsPoolIdHistoryParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdHistoryParametersQueryOrder'
    where toJSON (GetPoolsPoolIdHistoryParametersQueryOrder'Other val) = val
          toJSON (GetPoolsPoolIdHistoryParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetPoolsPoolIdHistoryParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetPoolsPoolIdHistoryParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdHistoryParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetPoolsPoolIdHistoryParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetPoolsPoolIdHistoryParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetPoolsPoolIdHistoryParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getPools_PoolId_History'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPoolsPoolIdHistoryResponseError' is used.
data GetPoolsPoolIdHistoryResponse =
   GetPoolsPoolIdHistoryResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPoolsPoolIdHistoryResponse200 PoolHistories -- ^ Return the pool information content.
  | GetPoolsPoolIdHistoryResponse400 GetPoolsPoolIdHistoryResponseBody400 -- ^ Bad request
  | GetPoolsPoolIdHistoryResponse403 GetPoolsPoolIdHistoryResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetPoolsPoolIdHistoryResponse404 GetPoolsPoolIdHistoryResponseBody404 -- ^ Component not found
  | GetPoolsPoolIdHistoryResponse418 GetPoolsPoolIdHistoryResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetPoolsPoolIdHistoryResponse429 GetPoolsPoolIdHistoryResponseBody429 -- ^ Usage limit reached
  | GetPoolsPoolIdHistoryResponse500 GetPoolsPoolIdHistoryResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdHistoryResponseBody400 = GetPoolsPoolIdHistoryResponseBody400 {
  -- | error
  getPoolsPoolIdHistoryResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdHistoryResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdHistoryResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdHistoryResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdHistoryResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdHistoryResponseBody400" (\obj -> ((GHC.Base.pure GetPoolsPoolIdHistoryResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdHistoryResponseBody400' with all required fields.
mkGetPoolsPoolIdHistoryResponseBody400 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdHistoryResponseBody400StatusCode'
  -> GetPoolsPoolIdHistoryResponseBody400
mkGetPoolsPoolIdHistoryResponseBody400 getPoolsPoolIdHistoryResponseBody400Error getPoolsPoolIdHistoryResponseBody400Message getPoolsPoolIdHistoryResponseBody400StatusCode = GetPoolsPoolIdHistoryResponseBody400{getPoolsPoolIdHistoryResponseBody400Error = getPoolsPoolIdHistoryResponseBody400Error,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody400Message = getPoolsPoolIdHistoryResponseBody400Message,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody400StatusCode = getPoolsPoolIdHistoryResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdHistoryResponseBody403 = GetPoolsPoolIdHistoryResponseBody403 {
  -- | error
  getPoolsPoolIdHistoryResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdHistoryResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdHistoryResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdHistoryResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdHistoryResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdHistoryResponseBody403" (\obj -> ((GHC.Base.pure GetPoolsPoolIdHistoryResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdHistoryResponseBody403' with all required fields.
mkGetPoolsPoolIdHistoryResponseBody403 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdHistoryResponseBody403StatusCode'
  -> GetPoolsPoolIdHistoryResponseBody403
mkGetPoolsPoolIdHistoryResponseBody403 getPoolsPoolIdHistoryResponseBody403Error getPoolsPoolIdHistoryResponseBody403Message getPoolsPoolIdHistoryResponseBody403StatusCode = GetPoolsPoolIdHistoryResponseBody403{getPoolsPoolIdHistoryResponseBody403Error = getPoolsPoolIdHistoryResponseBody403Error,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody403Message = getPoolsPoolIdHistoryResponseBody403Message,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody403StatusCode = getPoolsPoolIdHistoryResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdHistoryResponseBody404 = GetPoolsPoolIdHistoryResponseBody404 {
  -- | error
  getPoolsPoolIdHistoryResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdHistoryResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdHistoryResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdHistoryResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdHistoryResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdHistoryResponseBody404" (\obj -> ((GHC.Base.pure GetPoolsPoolIdHistoryResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdHistoryResponseBody404' with all required fields.
mkGetPoolsPoolIdHistoryResponseBody404 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdHistoryResponseBody404StatusCode'
  -> GetPoolsPoolIdHistoryResponseBody404
mkGetPoolsPoolIdHistoryResponseBody404 getPoolsPoolIdHistoryResponseBody404Error getPoolsPoolIdHistoryResponseBody404Message getPoolsPoolIdHistoryResponseBody404StatusCode = GetPoolsPoolIdHistoryResponseBody404{getPoolsPoolIdHistoryResponseBody404Error = getPoolsPoolIdHistoryResponseBody404Error,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody404Message = getPoolsPoolIdHistoryResponseBody404Message,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody404StatusCode = getPoolsPoolIdHistoryResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdHistoryResponseBody418 = GetPoolsPoolIdHistoryResponseBody418 {
  -- | error
  getPoolsPoolIdHistoryResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdHistoryResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdHistoryResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdHistoryResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdHistoryResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdHistoryResponseBody418" (\obj -> ((GHC.Base.pure GetPoolsPoolIdHistoryResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdHistoryResponseBody418' with all required fields.
mkGetPoolsPoolIdHistoryResponseBody418 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdHistoryResponseBody418StatusCode'
  -> GetPoolsPoolIdHistoryResponseBody418
mkGetPoolsPoolIdHistoryResponseBody418 getPoolsPoolIdHistoryResponseBody418Error getPoolsPoolIdHistoryResponseBody418Message getPoolsPoolIdHistoryResponseBody418StatusCode = GetPoolsPoolIdHistoryResponseBody418{getPoolsPoolIdHistoryResponseBody418Error = getPoolsPoolIdHistoryResponseBody418Error,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody418Message = getPoolsPoolIdHistoryResponseBody418Message,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody418StatusCode = getPoolsPoolIdHistoryResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdHistoryResponseBody429 = GetPoolsPoolIdHistoryResponseBody429 {
  -- | error
  getPoolsPoolIdHistoryResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdHistoryResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdHistoryResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdHistoryResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdHistoryResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdHistoryResponseBody429" (\obj -> ((GHC.Base.pure GetPoolsPoolIdHistoryResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdHistoryResponseBody429' with all required fields.
mkGetPoolsPoolIdHistoryResponseBody429 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdHistoryResponseBody429StatusCode'
  -> GetPoolsPoolIdHistoryResponseBody429
mkGetPoolsPoolIdHistoryResponseBody429 getPoolsPoolIdHistoryResponseBody429Error getPoolsPoolIdHistoryResponseBody429Message getPoolsPoolIdHistoryResponseBody429StatusCode = GetPoolsPoolIdHistoryResponseBody429{getPoolsPoolIdHistoryResponseBody429Error = getPoolsPoolIdHistoryResponseBody429Error,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody429Message = getPoolsPoolIdHistoryResponseBody429Message,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody429StatusCode = getPoolsPoolIdHistoryResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdHistoryResponseBody500 = GetPoolsPoolIdHistoryResponseBody500 {
  -- | error
  getPoolsPoolIdHistoryResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdHistoryResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdHistoryResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdHistoryResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdHistoryResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdHistoryResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdHistoryResponseBody500" (\obj -> ((GHC.Base.pure GetPoolsPoolIdHistoryResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdHistoryResponseBody500' with all required fields.
mkGetPoolsPoolIdHistoryResponseBody500 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdHistoryResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdHistoryResponseBody500StatusCode'
  -> GetPoolsPoolIdHistoryResponseBody500
mkGetPoolsPoolIdHistoryResponseBody500 getPoolsPoolIdHistoryResponseBody500Error getPoolsPoolIdHistoryResponseBody500Message getPoolsPoolIdHistoryResponseBody500StatusCode = GetPoolsPoolIdHistoryResponseBody500{getPoolsPoolIdHistoryResponseBody500Error = getPoolsPoolIdHistoryResponseBody500Error,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody500Message = getPoolsPoolIdHistoryResponseBody500Message,
                                                                                                                                                                                                                   getPoolsPoolIdHistoryResponseBody500StatusCode = getPoolsPoolIdHistoryResponseBody500StatusCode}
-- | > GET /pools/{pool_id}/history
-- 
-- The same as 'getPools_PoolId_History' but accepts an explicit configuration.
getPools_PoolId_HistoryWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsPoolIdHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetPoolsPoolIdHistoryResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_HistoryWithConfiguration config
                                         parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdHistoryResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           PoolHistories)
                                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdHistoryResponseBody400)
                                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdHistoryResponseBody403)
                                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdHistoryResponseBody404)
                                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdHistoryResponseBody418)
                                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdHistoryResponseBody429)
                                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdHistoryResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdHistoryResponseBody500)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdHistoryParametersPathPoolId parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/{pool_id}/history
-- 
-- The same as 'getPools_PoolId_History' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_HistoryRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsPoolIdHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_HistoryRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdHistoryParametersPathPoolId parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/{pool_id}/history
-- 
-- The same as 'getPools_PoolId_History' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_HistoryWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsPoolIdHistoryParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_HistoryWithConfigurationRaw config
                                            parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdHistoryParametersPathPoolId parameters))) GHC.Base.++ "/history"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdHistoryParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
