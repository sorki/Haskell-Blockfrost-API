-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getNutlink_Address_Tickers
module BlockfrostAPI.Operations.GetNutlinkAddressTickers where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /nutlink/{address}/tickers
-- 
-- List tickers for a specific metadata oracle
getNutlink_Address_Tickers :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetNutlinkAddressTickersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetNutlinkAddressTickersResponse) -- ^ Monadic computation which returns the result of the operation
getNutlink_Address_Tickers parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetNutlinkAddressTickersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   NutlinkAddressTickers)
                                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkAddressTickersResponseBody400)
                                                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkAddressTickersResponseBody403)
                                                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkAddressTickersResponseBody404)
                                                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkAddressTickersResponseBody418)
                                                                                                                                                                                           | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkAddressTickersResponseBody429)
                                                                                                                                                                                           | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GetNutlinkAddressTickersResponseBody500)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersParametersPathAddress parameters))) GHC.Base.++ "/tickers"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/nutlink\/{address}\/tickers.GET.parameters@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersParameters = GetNutlinkAddressTickersParameters {
  -- | pathAddress: Represents the parameter named \'address\'
  -- 
  -- Address of a metadata oracle
  getNutlinkAddressTickersParametersPathAddress :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getNutlinkAddressTickersParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getNutlinkAddressTickersParametersQueryOrder :: (GHC.Maybe.Maybe GetNutlinkAddressTickersParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getNutlinkAddressTickersParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAddress" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersParametersPathAddress obj : "queryCount" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAddress" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersParametersPathAddress obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersParameters" (\obj -> (((GHC.Base.pure GetNutlinkAddressTickersParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetNutlinkAddressTickersParameters' with all required fields.
mkGetNutlinkAddressTickersParameters :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersParametersPathAddress'
  -> GetNutlinkAddressTickersParameters
mkGetNutlinkAddressTickersParameters getNutlinkAddressTickersParametersPathAddress = GetNutlinkAddressTickersParameters{getNutlinkAddressTickersParametersPathAddress = getNutlinkAddressTickersParametersPathAddress,
                                                                                                                        getNutlinkAddressTickersParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                        getNutlinkAddressTickersParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                        getNutlinkAddressTickersParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/nutlink\/{address}\/tickers.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetNutlinkAddressTickersParametersQueryOrder' =
   GetNutlinkAddressTickersParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetNutlinkAddressTickersParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetNutlinkAddressTickersParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetNutlinkAddressTickersParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersParametersQueryOrder'
    where toJSON (GetNutlinkAddressTickersParametersQueryOrder'Other val) = val
          toJSON (GetNutlinkAddressTickersParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetNutlinkAddressTickersParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetNutlinkAddressTickersParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetNutlinkAddressTickersParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetNutlinkAddressTickersParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetNutlinkAddressTickersParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getNutlink_Address_Tickers'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetNutlinkAddressTickersResponseError' is used.
data GetNutlinkAddressTickersResponse =
   GetNutlinkAddressTickersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetNutlinkAddressTickersResponse200 NutlinkAddressTickers -- ^ Return the tickers provided by the metadata oracle
  | GetNutlinkAddressTickersResponse400 GetNutlinkAddressTickersResponseBody400 -- ^ Bad request
  | GetNutlinkAddressTickersResponse403 GetNutlinkAddressTickersResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetNutlinkAddressTickersResponse404 GetNutlinkAddressTickersResponseBody404 -- ^ Component not found
  | GetNutlinkAddressTickersResponse418 GetNutlinkAddressTickersResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetNutlinkAddressTickersResponse429 GetNutlinkAddressTickersResponseBody429 -- ^ Usage limit reached
  | GetNutlinkAddressTickersResponse500 GetNutlinkAddressTickersResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersResponseBody400 = GetNutlinkAddressTickersResponseBody400 {
  -- | error
  getNutlinkAddressTickersResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersResponseBody400" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersResponseBody400' with all required fields.
mkGetNutlinkAddressTickersResponseBody400 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersResponseBody400StatusCode'
  -> GetNutlinkAddressTickersResponseBody400
mkGetNutlinkAddressTickersResponseBody400 getNutlinkAddressTickersResponseBody400Error getNutlinkAddressTickersResponseBody400Message getNutlinkAddressTickersResponseBody400StatusCode = GetNutlinkAddressTickersResponseBody400{getNutlinkAddressTickersResponseBody400Error = getNutlinkAddressTickersResponseBody400Error,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody400Message = getNutlinkAddressTickersResponseBody400Message,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody400StatusCode = getNutlinkAddressTickersResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersResponseBody403 = GetNutlinkAddressTickersResponseBody403 {
  -- | error
  getNutlinkAddressTickersResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersResponseBody403" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersResponseBody403' with all required fields.
mkGetNutlinkAddressTickersResponseBody403 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersResponseBody403StatusCode'
  -> GetNutlinkAddressTickersResponseBody403
mkGetNutlinkAddressTickersResponseBody403 getNutlinkAddressTickersResponseBody403Error getNutlinkAddressTickersResponseBody403Message getNutlinkAddressTickersResponseBody403StatusCode = GetNutlinkAddressTickersResponseBody403{getNutlinkAddressTickersResponseBody403Error = getNutlinkAddressTickersResponseBody403Error,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody403Message = getNutlinkAddressTickersResponseBody403Message,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody403StatusCode = getNutlinkAddressTickersResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersResponseBody404 = GetNutlinkAddressTickersResponseBody404 {
  -- | error
  getNutlinkAddressTickersResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersResponseBody404" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersResponseBody404' with all required fields.
mkGetNutlinkAddressTickersResponseBody404 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersResponseBody404StatusCode'
  -> GetNutlinkAddressTickersResponseBody404
mkGetNutlinkAddressTickersResponseBody404 getNutlinkAddressTickersResponseBody404Error getNutlinkAddressTickersResponseBody404Message getNutlinkAddressTickersResponseBody404StatusCode = GetNutlinkAddressTickersResponseBody404{getNutlinkAddressTickersResponseBody404Error = getNutlinkAddressTickersResponseBody404Error,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody404Message = getNutlinkAddressTickersResponseBody404Message,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody404StatusCode = getNutlinkAddressTickersResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersResponseBody418 = GetNutlinkAddressTickersResponseBody418 {
  -- | error
  getNutlinkAddressTickersResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersResponseBody418" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersResponseBody418' with all required fields.
mkGetNutlinkAddressTickersResponseBody418 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersResponseBody418StatusCode'
  -> GetNutlinkAddressTickersResponseBody418
mkGetNutlinkAddressTickersResponseBody418 getNutlinkAddressTickersResponseBody418Error getNutlinkAddressTickersResponseBody418Message getNutlinkAddressTickersResponseBody418StatusCode = GetNutlinkAddressTickersResponseBody418{getNutlinkAddressTickersResponseBody418Error = getNutlinkAddressTickersResponseBody418Error,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody418Message = getNutlinkAddressTickersResponseBody418Message,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody418StatusCode = getNutlinkAddressTickersResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersResponseBody429 = GetNutlinkAddressTickersResponseBody429 {
  -- | error
  getNutlinkAddressTickersResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersResponseBody429" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersResponseBody429' with all required fields.
mkGetNutlinkAddressTickersResponseBody429 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersResponseBody429StatusCode'
  -> GetNutlinkAddressTickersResponseBody429
mkGetNutlinkAddressTickersResponseBody429 getNutlinkAddressTickersResponseBody429Error getNutlinkAddressTickersResponseBody429Message getNutlinkAddressTickersResponseBody429StatusCode = GetNutlinkAddressTickersResponseBody429{getNutlinkAddressTickersResponseBody429Error = getNutlinkAddressTickersResponseBody429Error,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody429Message = getNutlinkAddressTickersResponseBody429Message,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody429StatusCode = getNutlinkAddressTickersResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersResponseBody500 = GetNutlinkAddressTickersResponseBody500 {
  -- | error
  getNutlinkAddressTickersResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersResponseBody500" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersResponseBody500' with all required fields.
mkGetNutlinkAddressTickersResponseBody500 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersResponseBody500StatusCode'
  -> GetNutlinkAddressTickersResponseBody500
mkGetNutlinkAddressTickersResponseBody500 getNutlinkAddressTickersResponseBody500Error getNutlinkAddressTickersResponseBody500Message getNutlinkAddressTickersResponseBody500StatusCode = GetNutlinkAddressTickersResponseBody500{getNutlinkAddressTickersResponseBody500Error = getNutlinkAddressTickersResponseBody500Error,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody500Message = getNutlinkAddressTickersResponseBody500Message,
                                                                                                                                                                                                                                  getNutlinkAddressTickersResponseBody500StatusCode = getNutlinkAddressTickersResponseBody500StatusCode}
-- | > GET /nutlink/{address}/tickers
-- 
-- The same as 'getNutlink_Address_Tickers' but accepts an explicit configuration.
getNutlink_Address_TickersWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetNutlinkAddressTickersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetNutlinkAddressTickersResponse) -- ^ Monadic computation which returns the result of the operation
getNutlink_Address_TickersWithConfiguration config
                                            parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetNutlinkAddressTickersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    NutlinkAddressTickers)
                                                                                                                                                                                                            | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetNutlinkAddressTickersResponseBody400)
                                                                                                                                                                                                            | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetNutlinkAddressTickersResponseBody403)
                                                                                                                                                                                                            | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetNutlinkAddressTickersResponseBody404)
                                                                                                                                                                                                            | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetNutlinkAddressTickersResponseBody418)
                                                                                                                                                                                                            | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetNutlinkAddressTickersResponseBody429)
                                                                                                                                                                                                            | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetNutlinkAddressTickersResponseBody500)
                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersParametersPathAddress parameters))) GHC.Base.++ "/tickers"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /nutlink/{address}/tickers
-- 
-- The same as 'getNutlink_Address_Tickers' but returns the raw 'Data.ByteString.Char8.ByteString'.
getNutlink_Address_TickersRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetNutlinkAddressTickersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getNutlink_Address_TickersRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersParametersPathAddress parameters))) GHC.Base.++ "/tickers"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /nutlink/{address}/tickers
-- 
-- The same as 'getNutlink_Address_Tickers' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getNutlink_Address_TickersWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetNutlinkAddressTickersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getNutlink_Address_TickersWithConfigurationRaw config
                                               parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersParametersPathAddress parameters))) GHC.Base.++ "/tickers"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
