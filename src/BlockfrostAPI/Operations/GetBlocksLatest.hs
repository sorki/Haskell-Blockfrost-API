-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBlocksLatest
module BlockfrostAPI.Operations.GetBlocksLatest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /blocks/latest
-- 
-- Return the latest block available to the backends, also known as the
-- tip of the blockchain.
getBlocksLatest :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetBlocksLatestResponse) -- ^ Monadic computation which returns the result of the operation
getBlocksLatest = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBlocksLatestResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           BlockContent)
                                                                                                                                                            | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetBlocksLatestResponseBody400)
                                                                                                                                                            | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetBlocksLatestResponseBody403)
                                                                                                                                                            | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetBlocksLatestResponseBody404)
                                                                                                                                                            | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetBlocksLatestResponseBody418)
                                                                                                                                                            | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetBlocksLatestResponseBody429)
                                                                                                                                                            | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           GetBlocksLatestResponseBody500)
                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/blocks/latest") GHC.Base.mempty)
-- | Represents a response of the operation 'getBlocksLatest'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBlocksLatestResponseError' is used.
data GetBlocksLatestResponse =
   GetBlocksLatestResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBlocksLatestResponse200 BlockContent -- ^ Return the contents of the latest block.
  | GetBlocksLatestResponse400 GetBlocksLatestResponseBody400 -- ^ Bad request
  | GetBlocksLatestResponse403 GetBlocksLatestResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetBlocksLatestResponse404 GetBlocksLatestResponseBody404 -- ^ Component not found
  | GetBlocksLatestResponse418 GetBlocksLatestResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetBlocksLatestResponse429 GetBlocksLatestResponseBody429 -- ^ Usage limit reached
  | GetBlocksLatestResponse500 GetBlocksLatestResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestResponseBody400 = GetBlocksLatestResponseBody400 {
  -- | error
  getBlocksLatestResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestResponseBody400" (\obj -> ((GHC.Base.pure GetBlocksLatestResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestResponseBody400' with all required fields.
mkGetBlocksLatestResponseBody400 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestResponseBody400StatusCode'
  -> GetBlocksLatestResponseBody400
mkGetBlocksLatestResponseBody400 getBlocksLatestResponseBody400Error getBlocksLatestResponseBody400Message getBlocksLatestResponseBody400StatusCode = GetBlocksLatestResponseBody400{getBlocksLatestResponseBody400Error = getBlocksLatestResponseBody400Error,
                                                                                                                                                                                     getBlocksLatestResponseBody400Message = getBlocksLatestResponseBody400Message,
                                                                                                                                                                                     getBlocksLatestResponseBody400StatusCode = getBlocksLatestResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestResponseBody403 = GetBlocksLatestResponseBody403 {
  -- | error
  getBlocksLatestResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestResponseBody403" (\obj -> ((GHC.Base.pure GetBlocksLatestResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestResponseBody403' with all required fields.
mkGetBlocksLatestResponseBody403 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestResponseBody403StatusCode'
  -> GetBlocksLatestResponseBody403
mkGetBlocksLatestResponseBody403 getBlocksLatestResponseBody403Error getBlocksLatestResponseBody403Message getBlocksLatestResponseBody403StatusCode = GetBlocksLatestResponseBody403{getBlocksLatestResponseBody403Error = getBlocksLatestResponseBody403Error,
                                                                                                                                                                                     getBlocksLatestResponseBody403Message = getBlocksLatestResponseBody403Message,
                                                                                                                                                                                     getBlocksLatestResponseBody403StatusCode = getBlocksLatestResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestResponseBody404 = GetBlocksLatestResponseBody404 {
  -- | error
  getBlocksLatestResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestResponseBody404" (\obj -> ((GHC.Base.pure GetBlocksLatestResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestResponseBody404' with all required fields.
mkGetBlocksLatestResponseBody404 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestResponseBody404StatusCode'
  -> GetBlocksLatestResponseBody404
mkGetBlocksLatestResponseBody404 getBlocksLatestResponseBody404Error getBlocksLatestResponseBody404Message getBlocksLatestResponseBody404StatusCode = GetBlocksLatestResponseBody404{getBlocksLatestResponseBody404Error = getBlocksLatestResponseBody404Error,
                                                                                                                                                                                     getBlocksLatestResponseBody404Message = getBlocksLatestResponseBody404Message,
                                                                                                                                                                                     getBlocksLatestResponseBody404StatusCode = getBlocksLatestResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestResponseBody418 = GetBlocksLatestResponseBody418 {
  -- | error
  getBlocksLatestResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestResponseBody418" (\obj -> ((GHC.Base.pure GetBlocksLatestResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestResponseBody418' with all required fields.
mkGetBlocksLatestResponseBody418 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestResponseBody418StatusCode'
  -> GetBlocksLatestResponseBody418
mkGetBlocksLatestResponseBody418 getBlocksLatestResponseBody418Error getBlocksLatestResponseBody418Message getBlocksLatestResponseBody418StatusCode = GetBlocksLatestResponseBody418{getBlocksLatestResponseBody418Error = getBlocksLatestResponseBody418Error,
                                                                                                                                                                                     getBlocksLatestResponseBody418Message = getBlocksLatestResponseBody418Message,
                                                                                                                                                                                     getBlocksLatestResponseBody418StatusCode = getBlocksLatestResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestResponseBody429 = GetBlocksLatestResponseBody429 {
  -- | error
  getBlocksLatestResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestResponseBody429" (\obj -> ((GHC.Base.pure GetBlocksLatestResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestResponseBody429' with all required fields.
mkGetBlocksLatestResponseBody429 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestResponseBody429StatusCode'
  -> GetBlocksLatestResponseBody429
mkGetBlocksLatestResponseBody429 getBlocksLatestResponseBody429Error getBlocksLatestResponseBody429Message getBlocksLatestResponseBody429StatusCode = GetBlocksLatestResponseBody429{getBlocksLatestResponseBody429Error = getBlocksLatestResponseBody429Error,
                                                                                                                                                                                     getBlocksLatestResponseBody429Message = getBlocksLatestResponseBody429Message,
                                                                                                                                                                                     getBlocksLatestResponseBody429StatusCode = getBlocksLatestResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestResponseBody500 = GetBlocksLatestResponseBody500 {
  -- | error
  getBlocksLatestResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getBlocksLatestResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getBlocksLatestResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getBlocksLatestResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestResponseBody500" (\obj -> ((GHC.Base.pure GetBlocksLatestResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetBlocksLatestResponseBody500' with all required fields.
mkGetBlocksLatestResponseBody500 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getBlocksLatestResponseBody500StatusCode'
  -> GetBlocksLatestResponseBody500
mkGetBlocksLatestResponseBody500 getBlocksLatestResponseBody500Error getBlocksLatestResponseBody500Message getBlocksLatestResponseBody500StatusCode = GetBlocksLatestResponseBody500{getBlocksLatestResponseBody500Error = getBlocksLatestResponseBody500Error,
                                                                                                                                                                                     getBlocksLatestResponseBody500Message = getBlocksLatestResponseBody500Message,
                                                                                                                                                                                     getBlocksLatestResponseBody500StatusCode = getBlocksLatestResponseBody500StatusCode}
-- | > GET /blocks/latest
-- 
-- The same as 'getBlocksLatest' but accepts an explicit configuration.
getBlocksLatestWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response GetBlocksLatestResponse) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestWithConfiguration config = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetBlocksLatestResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   BlockContent)
                                                                                                                                                                                    | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksLatestResponseBody400)
                                                                                                                                                                                    | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksLatestResponseBody403)
                                                                                                                                                                                    | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksLatestResponseBody404)
                                                                                                                                                                                    | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksLatestResponseBody418)
                                                                                                                                                                                    | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksLatestResponseBody429)
                                                                                                                                                                                    | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksLatestResponseBody500)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/blocks/latest") GHC.Base.mempty)
-- | > GET /blocks/latest
-- 
-- The same as 'getBlocksLatest' but returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocksLatestRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestRaw = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/blocks/latest") GHC.Base.mempty)
-- | > GET /blocks/latest
-- 
-- The same as 'getBlocksLatest' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getBlocksLatestWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestWithConfigurationRaw config = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/blocks/latest") GHC.Base.mempty)
