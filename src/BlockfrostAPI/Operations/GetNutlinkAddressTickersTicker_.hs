-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getNutlink_Address_Tickers_Ticker_
module BlockfrostAPI.Operations.GetNutlinkAddressTickersTicker_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /nutlink/{address}/tickers/{ticker}
-- 
-- List of records of a specific ticker
getNutlink_Address_Tickers_Ticker_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetNutlinkAddressTickersTickerParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetNutlinkAddressTickersTickerResponse) -- ^ Monadic computation which returns the result of the operation
getNutlink_Address_Tickers_Ticker_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetNutlinkAddressTickersTickerResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       NutlinkAddressTicker)
                                                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetNutlinkAddressTickersTickerResponseBody400)
                                                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetNutlinkAddressTickersTickerResponseBody403)
                                                                                                                                                                                                         | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetNutlinkAddressTickersTickerResponseBody404)
                                                                                                                                                                                                         | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetNutlinkAddressTickersTickerResponseBody418)
                                                                                                                                                                                                         | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetNutlinkAddressTickersTickerResponseBody429)
                                                                                                                                                                                                         | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetNutlinkAddressTickersTickerResponseBody500)
                                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersTickerParametersPathAddress parameters))) GHC.Base.++ ("/tickers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersTickerParametersPathTicker parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/nutlink\/{address}\/tickers\/{ticker}.GET.parameters@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersTickerParameters = GetNutlinkAddressTickersTickerParameters {
  -- | pathAddress: Represents the parameter named \'address\'
  -- 
  -- Address of a metadata oracle
  getNutlinkAddressTickersTickerParametersPathAddress :: Data.Text.Internal.Text
  -- | pathTicker: Represents the parameter named \'ticker\'
  -- 
  -- Ticker for the pool record
  , getNutlinkAddressTickersTickerParametersPathTicker :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getNutlinkAddressTickersTickerParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getNutlinkAddressTickersTickerParametersQueryOrder :: (GHC.Maybe.Maybe GetNutlinkAddressTickersTickerParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getNutlinkAddressTickersTickerParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersTickerParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAddress" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerParametersPathAddress obj : "pathTicker" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerParametersPathTicker obj : "queryCount" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAddress" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerParametersPathAddress obj) GHC.Base.<> (("pathTicker" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerParametersPathTicker obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerParametersQueryPage obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersTickerParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersTickerParameters" (\obj -> ((((GHC.Base.pure GetNutlinkAddressTickersTickerParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathTicker")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetNutlinkAddressTickersTickerParameters' with all required fields.
mkGetNutlinkAddressTickersTickerParameters :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerParametersPathAddress'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerParametersPathTicker'
  -> GetNutlinkAddressTickersTickerParameters
mkGetNutlinkAddressTickersTickerParameters getNutlinkAddressTickersTickerParametersPathAddress getNutlinkAddressTickersTickerParametersPathTicker = GetNutlinkAddressTickersTickerParameters{getNutlinkAddressTickersTickerParametersPathAddress = getNutlinkAddressTickersTickerParametersPathAddress,
                                                                                                                                                                                             getNutlinkAddressTickersTickerParametersPathTicker = getNutlinkAddressTickersTickerParametersPathTicker,
                                                                                                                                                                                             getNutlinkAddressTickersTickerParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                                                                                                             getNutlinkAddressTickersTickerParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                                                                                                             getNutlinkAddressTickersTickerParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/nutlink\/{address}\/tickers\/{ticker}.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetNutlinkAddressTickersTickerParametersQueryOrder' =
   GetNutlinkAddressTickersTickerParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetNutlinkAddressTickersTickerParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetNutlinkAddressTickersTickerParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetNutlinkAddressTickersTickerParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersTickerParametersQueryOrder'
    where toJSON (GetNutlinkAddressTickersTickerParametersQueryOrder'Other val) = val
          toJSON (GetNutlinkAddressTickersTickerParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetNutlinkAddressTickersTickerParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetNutlinkAddressTickersTickerParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersTickerParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetNutlinkAddressTickersTickerParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetNutlinkAddressTickersTickerParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetNutlinkAddressTickersTickerParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getNutlink_Address_Tickers_Ticker_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetNutlinkAddressTickersTickerResponseError' is used.
data GetNutlinkAddressTickersTickerResponse =
   GetNutlinkAddressTickersTickerResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetNutlinkAddressTickersTickerResponse200 NutlinkAddressTicker -- ^ Return the tickers provided by the metadata oracle
  | GetNutlinkAddressTickersTickerResponse400 GetNutlinkAddressTickersTickerResponseBody400 -- ^ Bad request
  | GetNutlinkAddressTickersTickerResponse403 GetNutlinkAddressTickersTickerResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetNutlinkAddressTickersTickerResponse404 GetNutlinkAddressTickersTickerResponseBody404 -- ^ Component not found
  | GetNutlinkAddressTickersTickerResponse418 GetNutlinkAddressTickersTickerResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetNutlinkAddressTickersTickerResponse429 GetNutlinkAddressTickersTickerResponseBody429 -- ^ Usage limit reached
  | GetNutlinkAddressTickersTickerResponse500 GetNutlinkAddressTickersTickerResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersTickerResponseBody400 = GetNutlinkAddressTickersTickerResponseBody400 {
  -- | error
  getNutlinkAddressTickersTickerResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersTickerResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersTickerResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersTickerResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersTickerResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersTickerResponseBody400" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersTickerResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersTickerResponseBody400' with all required fields.
mkGetNutlinkAddressTickersTickerResponseBody400 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersTickerResponseBody400StatusCode'
  -> GetNutlinkAddressTickersTickerResponseBody400
mkGetNutlinkAddressTickersTickerResponseBody400 getNutlinkAddressTickersTickerResponseBody400Error getNutlinkAddressTickersTickerResponseBody400Message getNutlinkAddressTickersTickerResponseBody400StatusCode = GetNutlinkAddressTickersTickerResponseBody400{getNutlinkAddressTickersTickerResponseBody400Error = getNutlinkAddressTickersTickerResponseBody400Error,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody400Message = getNutlinkAddressTickersTickerResponseBody400Message,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody400StatusCode = getNutlinkAddressTickersTickerResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersTickerResponseBody403 = GetNutlinkAddressTickersTickerResponseBody403 {
  -- | error
  getNutlinkAddressTickersTickerResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersTickerResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersTickerResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersTickerResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersTickerResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersTickerResponseBody403" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersTickerResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersTickerResponseBody403' with all required fields.
mkGetNutlinkAddressTickersTickerResponseBody403 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersTickerResponseBody403StatusCode'
  -> GetNutlinkAddressTickersTickerResponseBody403
mkGetNutlinkAddressTickersTickerResponseBody403 getNutlinkAddressTickersTickerResponseBody403Error getNutlinkAddressTickersTickerResponseBody403Message getNutlinkAddressTickersTickerResponseBody403StatusCode = GetNutlinkAddressTickersTickerResponseBody403{getNutlinkAddressTickersTickerResponseBody403Error = getNutlinkAddressTickersTickerResponseBody403Error,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody403Message = getNutlinkAddressTickersTickerResponseBody403Message,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody403StatusCode = getNutlinkAddressTickersTickerResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersTickerResponseBody404 = GetNutlinkAddressTickersTickerResponseBody404 {
  -- | error
  getNutlinkAddressTickersTickerResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersTickerResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersTickerResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersTickerResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersTickerResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersTickerResponseBody404" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersTickerResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersTickerResponseBody404' with all required fields.
mkGetNutlinkAddressTickersTickerResponseBody404 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersTickerResponseBody404StatusCode'
  -> GetNutlinkAddressTickersTickerResponseBody404
mkGetNutlinkAddressTickersTickerResponseBody404 getNutlinkAddressTickersTickerResponseBody404Error getNutlinkAddressTickersTickerResponseBody404Message getNutlinkAddressTickersTickerResponseBody404StatusCode = GetNutlinkAddressTickersTickerResponseBody404{getNutlinkAddressTickersTickerResponseBody404Error = getNutlinkAddressTickersTickerResponseBody404Error,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody404Message = getNutlinkAddressTickersTickerResponseBody404Message,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody404StatusCode = getNutlinkAddressTickersTickerResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersTickerResponseBody418 = GetNutlinkAddressTickersTickerResponseBody418 {
  -- | error
  getNutlinkAddressTickersTickerResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersTickerResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersTickerResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersTickerResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersTickerResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersTickerResponseBody418" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersTickerResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersTickerResponseBody418' with all required fields.
mkGetNutlinkAddressTickersTickerResponseBody418 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersTickerResponseBody418StatusCode'
  -> GetNutlinkAddressTickersTickerResponseBody418
mkGetNutlinkAddressTickersTickerResponseBody418 getNutlinkAddressTickersTickerResponseBody418Error getNutlinkAddressTickersTickerResponseBody418Message getNutlinkAddressTickersTickerResponseBody418StatusCode = GetNutlinkAddressTickersTickerResponseBody418{getNutlinkAddressTickersTickerResponseBody418Error = getNutlinkAddressTickersTickerResponseBody418Error,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody418Message = getNutlinkAddressTickersTickerResponseBody418Message,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody418StatusCode = getNutlinkAddressTickersTickerResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersTickerResponseBody429 = GetNutlinkAddressTickersTickerResponseBody429 {
  -- | error
  getNutlinkAddressTickersTickerResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersTickerResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersTickerResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersTickerResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersTickerResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersTickerResponseBody429" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersTickerResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersTickerResponseBody429' with all required fields.
mkGetNutlinkAddressTickersTickerResponseBody429 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersTickerResponseBody429StatusCode'
  -> GetNutlinkAddressTickersTickerResponseBody429
mkGetNutlinkAddressTickersTickerResponseBody429 getNutlinkAddressTickersTickerResponseBody429Error getNutlinkAddressTickersTickerResponseBody429Message getNutlinkAddressTickersTickerResponseBody429StatusCode = GetNutlinkAddressTickersTickerResponseBody429{getNutlinkAddressTickersTickerResponseBody429Error = getNutlinkAddressTickersTickerResponseBody429Error,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody429Message = getNutlinkAddressTickersTickerResponseBody429Message,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody429StatusCode = getNutlinkAddressTickersTickerResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNutlinkAddressTickersTickerResponseBody500 = GetNutlinkAddressTickersTickerResponseBody500 {
  -- | error
  getNutlinkAddressTickersTickerResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getNutlinkAddressTickersTickerResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getNutlinkAddressTickersTickerResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNutlinkAddressTickersTickerResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getNutlinkAddressTickersTickerResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNutlinkAddressTickersTickerResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNutlinkAddressTickersTickerResponseBody500" (\obj -> ((GHC.Base.pure GetNutlinkAddressTickersTickerResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetNutlinkAddressTickersTickerResponseBody500' with all required fields.
mkGetNutlinkAddressTickersTickerResponseBody500 :: Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getNutlinkAddressTickersTickerResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getNutlinkAddressTickersTickerResponseBody500StatusCode'
  -> GetNutlinkAddressTickersTickerResponseBody500
mkGetNutlinkAddressTickersTickerResponseBody500 getNutlinkAddressTickersTickerResponseBody500Error getNutlinkAddressTickersTickerResponseBody500Message getNutlinkAddressTickersTickerResponseBody500StatusCode = GetNutlinkAddressTickersTickerResponseBody500{getNutlinkAddressTickersTickerResponseBody500Error = getNutlinkAddressTickersTickerResponseBody500Error,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody500Message = getNutlinkAddressTickersTickerResponseBody500Message,
                                                                                                                                                                                                                                                                getNutlinkAddressTickersTickerResponseBody500StatusCode = getNutlinkAddressTickersTickerResponseBody500StatusCode}
-- | > GET /nutlink/{address}/tickers/{ticker}
-- 
-- The same as 'getNutlink_Address_Tickers_Ticker_' but accepts an explicit configuration.
getNutlink_Address_Tickers_Ticker_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetNutlinkAddressTickersTickerParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetNutlinkAddressTickersTickerResponse) -- ^ Monadic computation which returns the result of the operation
getNutlink_Address_Tickers_Ticker_WithConfiguration config
                                                    parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetNutlinkAddressTickersTickerResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        NutlinkAddressTicker)
                                                                                                                                                                                                                          | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetNutlinkAddressTickersTickerResponseBody400)
                                                                                                                                                                                                                          | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetNutlinkAddressTickersTickerResponseBody403)
                                                                                                                                                                                                                          | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetNutlinkAddressTickersTickerResponseBody404)
                                                                                                                                                                                                                          | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetNutlinkAddressTickersTickerResponseBody418)
                                                                                                                                                                                                                          | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetNutlinkAddressTickersTickerResponseBody429)
                                                                                                                                                                                                                          | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetNutlinkAddressTickersTickerResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetNutlinkAddressTickersTickerResponseBody500)
                                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersTickerParametersPathAddress parameters))) GHC.Base.++ ("/tickers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersTickerParametersPathTicker parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /nutlink/{address}/tickers/{ticker}
-- 
-- The same as 'getNutlink_Address_Tickers_Ticker_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getNutlink_Address_Tickers_Ticker_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetNutlinkAddressTickersTickerParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getNutlink_Address_Tickers_Ticker_Raw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersTickerParametersPathAddress parameters))) GHC.Base.++ ("/tickers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersTickerParametersPathTicker parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /nutlink/{address}/tickers/{ticker}
-- 
-- The same as 'getNutlink_Address_Tickers_Ticker_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getNutlink_Address_Tickers_Ticker_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetNutlinkAddressTickersTickerParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getNutlink_Address_Tickers_Ticker_WithConfigurationRaw config
                                                       parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/nutlink/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersTickerParametersPathAddress parameters))) GHC.Base.++ ("/tickers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getNutlinkAddressTickersTickerParametersPathTicker parameters))) GHC.Base.++ ""))))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getNutlinkAddressTickersTickerParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
