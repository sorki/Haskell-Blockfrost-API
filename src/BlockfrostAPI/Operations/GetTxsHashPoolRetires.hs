-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTxs_Hash_PoolRetires
module BlockfrostAPI.Operations.GetTxsHashPoolRetires where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /txs/{hash}/pool_retires
-- 
-- Obtain information about stake pool retirements within a specific transaction.
getTxs_Hash_PoolRetires :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetTxsHashPoolRetiresResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_PoolRetires hash = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTxsHashPoolRetiresResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    ([TxContentPoolRetires]))
                                                                                                                                                                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashPoolRetiresResponseBody400)
                                                                                                                                                                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashPoolRetiresResponseBody403)
                                                                                                                                                                               | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashPoolRetiresResponseBody404)
                                                                                                                                                                               | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashPoolRetiresResponseBody418)
                                                                                                                                                                               | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashPoolRetiresResponseBody429)
                                                                                                                                                                               | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetTxsHashPoolRetiresResponseBody500)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/pool_retires"))) GHC.Base.mempty)
-- | Represents a response of the operation 'getTxs_Hash_PoolRetires'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTxsHashPoolRetiresResponseError' is used.
data GetTxsHashPoolRetiresResponse =
   GetTxsHashPoolRetiresResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTxsHashPoolRetiresResponse200 ([TxContentPoolRetires]) -- ^ Obtain information about stake pool retirements within a specific transaction. 
  | GetTxsHashPoolRetiresResponse400 GetTxsHashPoolRetiresResponseBody400 -- ^ Bad request
  | GetTxsHashPoolRetiresResponse403 GetTxsHashPoolRetiresResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetTxsHashPoolRetiresResponse404 GetTxsHashPoolRetiresResponseBody404 -- ^ Component not found
  | GetTxsHashPoolRetiresResponse418 GetTxsHashPoolRetiresResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetTxsHashPoolRetiresResponse429 GetTxsHashPoolRetiresResponseBody429 -- ^ Usage limit reached
  | GetTxsHashPoolRetiresResponse500 GetTxsHashPoolRetiresResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashPoolRetiresResponseBody400 = GetTxsHashPoolRetiresResponseBody400 {
  -- | error
  getTxsHashPoolRetiresResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashPoolRetiresResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashPoolRetiresResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashPoolRetiresResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashPoolRetiresResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashPoolRetiresResponseBody400" (\obj -> ((GHC.Base.pure GetTxsHashPoolRetiresResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashPoolRetiresResponseBody400' with all required fields.
mkGetTxsHashPoolRetiresResponseBody400 :: Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashPoolRetiresResponseBody400StatusCode'
  -> GetTxsHashPoolRetiresResponseBody400
mkGetTxsHashPoolRetiresResponseBody400 getTxsHashPoolRetiresResponseBody400Error getTxsHashPoolRetiresResponseBody400Message getTxsHashPoolRetiresResponseBody400StatusCode = GetTxsHashPoolRetiresResponseBody400{getTxsHashPoolRetiresResponseBody400Error = getTxsHashPoolRetiresResponseBody400Error,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody400Message = getTxsHashPoolRetiresResponseBody400Message,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody400StatusCode = getTxsHashPoolRetiresResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashPoolRetiresResponseBody403 = GetTxsHashPoolRetiresResponseBody403 {
  -- | error
  getTxsHashPoolRetiresResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashPoolRetiresResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashPoolRetiresResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashPoolRetiresResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashPoolRetiresResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashPoolRetiresResponseBody403" (\obj -> ((GHC.Base.pure GetTxsHashPoolRetiresResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashPoolRetiresResponseBody403' with all required fields.
mkGetTxsHashPoolRetiresResponseBody403 :: Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashPoolRetiresResponseBody403StatusCode'
  -> GetTxsHashPoolRetiresResponseBody403
mkGetTxsHashPoolRetiresResponseBody403 getTxsHashPoolRetiresResponseBody403Error getTxsHashPoolRetiresResponseBody403Message getTxsHashPoolRetiresResponseBody403StatusCode = GetTxsHashPoolRetiresResponseBody403{getTxsHashPoolRetiresResponseBody403Error = getTxsHashPoolRetiresResponseBody403Error,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody403Message = getTxsHashPoolRetiresResponseBody403Message,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody403StatusCode = getTxsHashPoolRetiresResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashPoolRetiresResponseBody404 = GetTxsHashPoolRetiresResponseBody404 {
  -- | error
  getTxsHashPoolRetiresResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashPoolRetiresResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashPoolRetiresResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashPoolRetiresResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashPoolRetiresResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashPoolRetiresResponseBody404" (\obj -> ((GHC.Base.pure GetTxsHashPoolRetiresResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashPoolRetiresResponseBody404' with all required fields.
mkGetTxsHashPoolRetiresResponseBody404 :: Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashPoolRetiresResponseBody404StatusCode'
  -> GetTxsHashPoolRetiresResponseBody404
mkGetTxsHashPoolRetiresResponseBody404 getTxsHashPoolRetiresResponseBody404Error getTxsHashPoolRetiresResponseBody404Message getTxsHashPoolRetiresResponseBody404StatusCode = GetTxsHashPoolRetiresResponseBody404{getTxsHashPoolRetiresResponseBody404Error = getTxsHashPoolRetiresResponseBody404Error,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody404Message = getTxsHashPoolRetiresResponseBody404Message,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody404StatusCode = getTxsHashPoolRetiresResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashPoolRetiresResponseBody418 = GetTxsHashPoolRetiresResponseBody418 {
  -- | error
  getTxsHashPoolRetiresResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashPoolRetiresResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashPoolRetiresResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashPoolRetiresResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashPoolRetiresResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashPoolRetiresResponseBody418" (\obj -> ((GHC.Base.pure GetTxsHashPoolRetiresResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashPoolRetiresResponseBody418' with all required fields.
mkGetTxsHashPoolRetiresResponseBody418 :: Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashPoolRetiresResponseBody418StatusCode'
  -> GetTxsHashPoolRetiresResponseBody418
mkGetTxsHashPoolRetiresResponseBody418 getTxsHashPoolRetiresResponseBody418Error getTxsHashPoolRetiresResponseBody418Message getTxsHashPoolRetiresResponseBody418StatusCode = GetTxsHashPoolRetiresResponseBody418{getTxsHashPoolRetiresResponseBody418Error = getTxsHashPoolRetiresResponseBody418Error,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody418Message = getTxsHashPoolRetiresResponseBody418Message,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody418StatusCode = getTxsHashPoolRetiresResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashPoolRetiresResponseBody429 = GetTxsHashPoolRetiresResponseBody429 {
  -- | error
  getTxsHashPoolRetiresResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashPoolRetiresResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashPoolRetiresResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashPoolRetiresResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashPoolRetiresResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashPoolRetiresResponseBody429" (\obj -> ((GHC.Base.pure GetTxsHashPoolRetiresResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashPoolRetiresResponseBody429' with all required fields.
mkGetTxsHashPoolRetiresResponseBody429 :: Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashPoolRetiresResponseBody429StatusCode'
  -> GetTxsHashPoolRetiresResponseBody429
mkGetTxsHashPoolRetiresResponseBody429 getTxsHashPoolRetiresResponseBody429Error getTxsHashPoolRetiresResponseBody429Message getTxsHashPoolRetiresResponseBody429StatusCode = GetTxsHashPoolRetiresResponseBody429{getTxsHashPoolRetiresResponseBody429Error = getTxsHashPoolRetiresResponseBody429Error,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody429Message = getTxsHashPoolRetiresResponseBody429Message,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody429StatusCode = getTxsHashPoolRetiresResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetTxsHashPoolRetiresResponseBody500 = GetTxsHashPoolRetiresResponseBody500 {
  -- | error
  getTxsHashPoolRetiresResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getTxsHashPoolRetiresResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getTxsHashPoolRetiresResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTxsHashPoolRetiresResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getTxsHashPoolRetiresResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTxsHashPoolRetiresResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTxsHashPoolRetiresResponseBody500" (\obj -> ((GHC.Base.pure GetTxsHashPoolRetiresResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetTxsHashPoolRetiresResponseBody500' with all required fields.
mkGetTxsHashPoolRetiresResponseBody500 :: Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getTxsHashPoolRetiresResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getTxsHashPoolRetiresResponseBody500StatusCode'
  -> GetTxsHashPoolRetiresResponseBody500
mkGetTxsHashPoolRetiresResponseBody500 getTxsHashPoolRetiresResponseBody500Error getTxsHashPoolRetiresResponseBody500Message getTxsHashPoolRetiresResponseBody500StatusCode = GetTxsHashPoolRetiresResponseBody500{getTxsHashPoolRetiresResponseBody500Error = getTxsHashPoolRetiresResponseBody500Error,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody500Message = getTxsHashPoolRetiresResponseBody500Message,
                                                                                                                                                                                                                   getTxsHashPoolRetiresResponseBody500StatusCode = getTxsHashPoolRetiresResponseBody500StatusCode}
-- | > GET /txs/{hash}/pool_retires
-- 
-- The same as 'getTxs_Hash_PoolRetires' but accepts an explicit configuration.
getTxs_Hash_PoolRetiresWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> m (Network.HTTP.Client.Types.Response GetTxsHashPoolRetiresResponse) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_PoolRetiresWithConfiguration config
                                         hash = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetTxsHashPoolRetiresResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     ([TxContentPoolRetires]))
                                                                                                                                                                                                | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashPoolRetiresResponseBody400)
                                                                                                                                                                                                | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashPoolRetiresResponseBody403)
                                                                                                                                                                                                | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashPoolRetiresResponseBody404)
                                                                                                                                                                                                | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashPoolRetiresResponseBody418)
                                                                                                                                                                                                | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashPoolRetiresResponseBody429)
                                                                                                                                                                                                | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetTxsHashPoolRetiresResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetTxsHashPoolRetiresResponseBody500)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/pool_retires"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/pool_retires
-- 
-- The same as 'getTxs_Hash_PoolRetires' but returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_PoolRetiresRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_PoolRetiresRaw hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/pool_retires"))) GHC.Base.mempty)
-- | > GET /txs/{hash}/pool_retires
-- 
-- The same as 'getTxs_Hash_PoolRetires' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getTxs_Hash_PoolRetiresWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ hash: Hash of the requested transaction
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTxs_Hash_PoolRetiresWithConfigurationRaw config
                                            hash = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/txs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel hash)) GHC.Base.++ "/pool_retires"))) GHC.Base.mempty)
