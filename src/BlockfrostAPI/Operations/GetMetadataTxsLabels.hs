-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getMetadataTxsLabels
module BlockfrostAPI.Operations.GetMetadataTxsLabels where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /metadata/txs/labels
-- 
-- List of all used transaction metadata labels.
getMetadataTxsLabels :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetMetadataTxsLabelsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetMetadataTxsLabelsResponse) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabels parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetMetadataTxsLabelsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     TxMetadataLabels)
                                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsResponseBody400)
                                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsResponseBody403)
                                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsResponseBody404)
                                                                                                                                                                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsResponseBody418)
                                                                                                                                                                                 | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsResponseBody429)
                                                                                                                                                                                 | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMetadataTxsLabelsResponseBody500)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/metadata/txs/labels") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                         BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/metadata\/txs\/labels.GET.parameters@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsParameters = GetMetadataTxsLabelsParameters {
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  getMetadataTxsLabelsParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getMetadataTxsLabelsParametersQueryOrder :: (GHC.Maybe.Maybe GetMetadataTxsLabelsParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getMetadataTxsLabelsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryCount" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryCount" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsParameters" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetMetadataTxsLabelsParameters' with all required fields.
mkGetMetadataTxsLabelsParameters :: GetMetadataTxsLabelsParameters
mkGetMetadataTxsLabelsParameters = GetMetadataTxsLabelsParameters{getMetadataTxsLabelsParametersQueryCount = GHC.Maybe.Nothing,
                                                                  getMetadataTxsLabelsParametersQueryOrder = GHC.Maybe.Nothing,
                                                                  getMetadataTxsLabelsParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/metadata\/txs\/labels.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetMetadataTxsLabelsParametersQueryOrder' =
   GetMetadataTxsLabelsParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetMetadataTxsLabelsParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetMetadataTxsLabelsParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetMetadataTxsLabelsParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsParametersQueryOrder'
    where toJSON (GetMetadataTxsLabelsParametersQueryOrder'Other val) = val
          toJSON (GetMetadataTxsLabelsParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetMetadataTxsLabelsParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetMetadataTxsLabelsParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetMetadataTxsLabelsParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetMetadataTxsLabelsParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetMetadataTxsLabelsParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getMetadataTxsLabels'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetMetadataTxsLabelsResponseError' is used.
data GetMetadataTxsLabelsResponse =
   GetMetadataTxsLabelsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetMetadataTxsLabelsResponse200 TxMetadataLabels -- ^ Return the account delegations content
  | GetMetadataTxsLabelsResponse400 GetMetadataTxsLabelsResponseBody400 -- ^ Bad request
  | GetMetadataTxsLabelsResponse403 GetMetadataTxsLabelsResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetMetadataTxsLabelsResponse404 GetMetadataTxsLabelsResponseBody404 -- ^ Component not found
  | GetMetadataTxsLabelsResponse418 GetMetadataTxsLabelsResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetMetadataTxsLabelsResponse429 GetMetadataTxsLabelsResponseBody429 -- ^ Usage limit reached
  | GetMetadataTxsLabelsResponse500 GetMetadataTxsLabelsResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsResponseBody400 = GetMetadataTxsLabelsResponseBody400 {
  -- | error
  getMetadataTxsLabelsResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsResponseBody400" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsResponseBody400' with all required fields.
mkGetMetadataTxsLabelsResponseBody400 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsResponseBody400StatusCode'
  -> GetMetadataTxsLabelsResponseBody400
mkGetMetadataTxsLabelsResponseBody400 getMetadataTxsLabelsResponseBody400Error getMetadataTxsLabelsResponseBody400Message getMetadataTxsLabelsResponseBody400StatusCode = GetMetadataTxsLabelsResponseBody400{getMetadataTxsLabelsResponseBody400Error = getMetadataTxsLabelsResponseBody400Error,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody400Message = getMetadataTxsLabelsResponseBody400Message,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody400StatusCode = getMetadataTxsLabelsResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsResponseBody403 = GetMetadataTxsLabelsResponseBody403 {
  -- | error
  getMetadataTxsLabelsResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsResponseBody403" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsResponseBody403' with all required fields.
mkGetMetadataTxsLabelsResponseBody403 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsResponseBody403StatusCode'
  -> GetMetadataTxsLabelsResponseBody403
mkGetMetadataTxsLabelsResponseBody403 getMetadataTxsLabelsResponseBody403Error getMetadataTxsLabelsResponseBody403Message getMetadataTxsLabelsResponseBody403StatusCode = GetMetadataTxsLabelsResponseBody403{getMetadataTxsLabelsResponseBody403Error = getMetadataTxsLabelsResponseBody403Error,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody403Message = getMetadataTxsLabelsResponseBody403Message,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody403StatusCode = getMetadataTxsLabelsResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsResponseBody404 = GetMetadataTxsLabelsResponseBody404 {
  -- | error
  getMetadataTxsLabelsResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsResponseBody404" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsResponseBody404' with all required fields.
mkGetMetadataTxsLabelsResponseBody404 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsResponseBody404StatusCode'
  -> GetMetadataTxsLabelsResponseBody404
mkGetMetadataTxsLabelsResponseBody404 getMetadataTxsLabelsResponseBody404Error getMetadataTxsLabelsResponseBody404Message getMetadataTxsLabelsResponseBody404StatusCode = GetMetadataTxsLabelsResponseBody404{getMetadataTxsLabelsResponseBody404Error = getMetadataTxsLabelsResponseBody404Error,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody404Message = getMetadataTxsLabelsResponseBody404Message,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody404StatusCode = getMetadataTxsLabelsResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsResponseBody418 = GetMetadataTxsLabelsResponseBody418 {
  -- | error
  getMetadataTxsLabelsResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsResponseBody418" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsResponseBody418' with all required fields.
mkGetMetadataTxsLabelsResponseBody418 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsResponseBody418StatusCode'
  -> GetMetadataTxsLabelsResponseBody418
mkGetMetadataTxsLabelsResponseBody418 getMetadataTxsLabelsResponseBody418Error getMetadataTxsLabelsResponseBody418Message getMetadataTxsLabelsResponseBody418StatusCode = GetMetadataTxsLabelsResponseBody418{getMetadataTxsLabelsResponseBody418Error = getMetadataTxsLabelsResponseBody418Error,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody418Message = getMetadataTxsLabelsResponseBody418Message,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody418StatusCode = getMetadataTxsLabelsResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsResponseBody429 = GetMetadataTxsLabelsResponseBody429 {
  -- | error
  getMetadataTxsLabelsResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsResponseBody429" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsResponseBody429' with all required fields.
mkGetMetadataTxsLabelsResponseBody429 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsResponseBody429StatusCode'
  -> GetMetadataTxsLabelsResponseBody429
mkGetMetadataTxsLabelsResponseBody429 getMetadataTxsLabelsResponseBody429Error getMetadataTxsLabelsResponseBody429Message getMetadataTxsLabelsResponseBody429StatusCode = GetMetadataTxsLabelsResponseBody429{getMetadataTxsLabelsResponseBody429Error = getMetadataTxsLabelsResponseBody429Error,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody429Message = getMetadataTxsLabelsResponseBody429Message,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody429StatusCode = getMetadataTxsLabelsResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMetadataTxsLabelsResponseBody500 = GetMetadataTxsLabelsResponseBody500 {
  -- | error
  getMetadataTxsLabelsResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getMetadataTxsLabelsResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getMetadataTxsLabelsResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMetadataTxsLabelsResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getMetadataTxsLabelsResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMetadataTxsLabelsResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMetadataTxsLabelsResponseBody500" (\obj -> ((GHC.Base.pure GetMetadataTxsLabelsResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetMetadataTxsLabelsResponseBody500' with all required fields.
mkGetMetadataTxsLabelsResponseBody500 :: Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getMetadataTxsLabelsResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getMetadataTxsLabelsResponseBody500StatusCode'
  -> GetMetadataTxsLabelsResponseBody500
mkGetMetadataTxsLabelsResponseBody500 getMetadataTxsLabelsResponseBody500Error getMetadataTxsLabelsResponseBody500Message getMetadataTxsLabelsResponseBody500StatusCode = GetMetadataTxsLabelsResponseBody500{getMetadataTxsLabelsResponseBody500Error = getMetadataTxsLabelsResponseBody500Error,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody500Message = getMetadataTxsLabelsResponseBody500Message,
                                                                                                                                                                                                              getMetadataTxsLabelsResponseBody500StatusCode = getMetadataTxsLabelsResponseBody500StatusCode}
-- | > GET /metadata/txs/labels
-- 
-- The same as 'getMetadataTxsLabels' but accepts an explicit configuration.
getMetadataTxsLabelsWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetMetadataTxsLabelsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetMetadataTxsLabelsResponse) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabelsWithConfiguration config
                                      parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetMetadataTxsLabelsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      TxMetadataLabels)
                                                                                                                                                                                                  | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetMetadataTxsLabelsResponseBody400)
                                                                                                                                                                                                  | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetMetadataTxsLabelsResponseBody403)
                                                                                                                                                                                                  | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetMetadataTxsLabelsResponseBody404)
                                                                                                                                                                                                  | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetMetadataTxsLabelsResponseBody418)
                                                                                                                                                                                                  | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetMetadataTxsLabelsResponseBody429)
                                                                                                                                                                                                  | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetMetadataTxsLabelsResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetMetadataTxsLabelsResponseBody500)
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/metadata/txs/labels") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /metadata/txs/labels
-- 
-- The same as 'getMetadataTxsLabels' but returns the raw 'Data.ByteString.Char8.ByteString'.
getMetadataTxsLabelsRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetMetadataTxsLabelsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabelsRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/metadata/txs/labels") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                       BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                       BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /metadata/txs/labels
-- 
-- The same as 'getMetadataTxsLabels' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getMetadataTxsLabelsWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetMetadataTxsLabelsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getMetadataTxsLabelsWithConfigurationRaw config
                                         parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/metadata/txs/labels") [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                              BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                              BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getMetadataTxsLabelsParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
