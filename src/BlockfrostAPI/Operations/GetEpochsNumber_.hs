-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getEpochs_Number_
module BlockfrostAPI.Operations.GetEpochsNumber_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /epochs/{number}
-- 
-- Return the content of the requested epoch.
getEpochs_Number_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => GHC.Integer.Type.Integer -- ^ number: Number of the epoch
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetEpochsNumberResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_ number = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    EpochContent)
                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberResponseBody400)
                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberResponseBody403)
                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberResponseBody404)
                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberResponseBody418)
                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberResponseBody429)
                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberResponseBody500)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel number)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getEpochs_Number_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetEpochsNumberResponseError' is used.
data GetEpochsNumberResponse =
   GetEpochsNumberResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetEpochsNumberResponse200 EpochContent -- ^ Return the epoch data.
  | GetEpochsNumberResponse400 GetEpochsNumberResponseBody400 -- ^ Bad request
  | GetEpochsNumberResponse403 GetEpochsNumberResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetEpochsNumberResponse404 GetEpochsNumberResponseBody404 -- ^ Component not found
  | GetEpochsNumberResponse418 GetEpochsNumberResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetEpochsNumberResponse429 GetEpochsNumberResponseBody429 -- ^ Usage limit reached
  | GetEpochsNumberResponse500 GetEpochsNumberResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberResponseBody400 = GetEpochsNumberResponseBody400 {
  -- | error
  getEpochsNumberResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberResponseBody400" (\obj -> ((GHC.Base.pure GetEpochsNumberResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberResponseBody400' with all required fields.
mkGetEpochsNumberResponseBody400 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberResponseBody400StatusCode'
  -> GetEpochsNumberResponseBody400
mkGetEpochsNumberResponseBody400 getEpochsNumberResponseBody400Error getEpochsNumberResponseBody400Message getEpochsNumberResponseBody400StatusCode = GetEpochsNumberResponseBody400{getEpochsNumberResponseBody400Error = getEpochsNumberResponseBody400Error,
                                                                                                                                                                                     getEpochsNumberResponseBody400Message = getEpochsNumberResponseBody400Message,
                                                                                                                                                                                     getEpochsNumberResponseBody400StatusCode = getEpochsNumberResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberResponseBody403 = GetEpochsNumberResponseBody403 {
  -- | error
  getEpochsNumberResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberResponseBody403" (\obj -> ((GHC.Base.pure GetEpochsNumberResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberResponseBody403' with all required fields.
mkGetEpochsNumberResponseBody403 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberResponseBody403StatusCode'
  -> GetEpochsNumberResponseBody403
mkGetEpochsNumberResponseBody403 getEpochsNumberResponseBody403Error getEpochsNumberResponseBody403Message getEpochsNumberResponseBody403StatusCode = GetEpochsNumberResponseBody403{getEpochsNumberResponseBody403Error = getEpochsNumberResponseBody403Error,
                                                                                                                                                                                     getEpochsNumberResponseBody403Message = getEpochsNumberResponseBody403Message,
                                                                                                                                                                                     getEpochsNumberResponseBody403StatusCode = getEpochsNumberResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberResponseBody404 = GetEpochsNumberResponseBody404 {
  -- | error
  getEpochsNumberResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberResponseBody404" (\obj -> ((GHC.Base.pure GetEpochsNumberResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberResponseBody404' with all required fields.
mkGetEpochsNumberResponseBody404 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberResponseBody404StatusCode'
  -> GetEpochsNumberResponseBody404
mkGetEpochsNumberResponseBody404 getEpochsNumberResponseBody404Error getEpochsNumberResponseBody404Message getEpochsNumberResponseBody404StatusCode = GetEpochsNumberResponseBody404{getEpochsNumberResponseBody404Error = getEpochsNumberResponseBody404Error,
                                                                                                                                                                                     getEpochsNumberResponseBody404Message = getEpochsNumberResponseBody404Message,
                                                                                                                                                                                     getEpochsNumberResponseBody404StatusCode = getEpochsNumberResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberResponseBody418 = GetEpochsNumberResponseBody418 {
  -- | error
  getEpochsNumberResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberResponseBody418" (\obj -> ((GHC.Base.pure GetEpochsNumberResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberResponseBody418' with all required fields.
mkGetEpochsNumberResponseBody418 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberResponseBody418StatusCode'
  -> GetEpochsNumberResponseBody418
mkGetEpochsNumberResponseBody418 getEpochsNumberResponseBody418Error getEpochsNumberResponseBody418Message getEpochsNumberResponseBody418StatusCode = GetEpochsNumberResponseBody418{getEpochsNumberResponseBody418Error = getEpochsNumberResponseBody418Error,
                                                                                                                                                                                     getEpochsNumberResponseBody418Message = getEpochsNumberResponseBody418Message,
                                                                                                                                                                                     getEpochsNumberResponseBody418StatusCode = getEpochsNumberResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberResponseBody429 = GetEpochsNumberResponseBody429 {
  -- | error
  getEpochsNumberResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberResponseBody429" (\obj -> ((GHC.Base.pure GetEpochsNumberResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberResponseBody429' with all required fields.
mkGetEpochsNumberResponseBody429 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberResponseBody429StatusCode'
  -> GetEpochsNumberResponseBody429
mkGetEpochsNumberResponseBody429 getEpochsNumberResponseBody429Error getEpochsNumberResponseBody429Message getEpochsNumberResponseBody429StatusCode = GetEpochsNumberResponseBody429{getEpochsNumberResponseBody429Error = getEpochsNumberResponseBody429Error,
                                                                                                                                                                                     getEpochsNumberResponseBody429Message = getEpochsNumberResponseBody429Message,
                                                                                                                                                                                     getEpochsNumberResponseBody429StatusCode = getEpochsNumberResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberResponseBody500 = GetEpochsNumberResponseBody500 {
  -- | error
  getEpochsNumberResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberResponseBody500" (\obj -> ((GHC.Base.pure GetEpochsNumberResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberResponseBody500' with all required fields.
mkGetEpochsNumberResponseBody500 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberResponseBody500StatusCode'
  -> GetEpochsNumberResponseBody500
mkGetEpochsNumberResponseBody500 getEpochsNumberResponseBody500Error getEpochsNumberResponseBody500Message getEpochsNumberResponseBody500StatusCode = GetEpochsNumberResponseBody500{getEpochsNumberResponseBody500Error = getEpochsNumberResponseBody500Error,
                                                                                                                                                                                     getEpochsNumberResponseBody500Message = getEpochsNumberResponseBody500Message,
                                                                                                                                                                                     getEpochsNumberResponseBody500StatusCode = getEpochsNumberResponseBody500StatusCode}
-- | > GET /epochs/{number}
-- 
-- The same as 'getEpochs_Number_' but accepts an explicit configuration.
getEpochs_Number_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer -- ^ number: Number of the epoch
  -> m (Network.HTTP.Client.Types.Response GetEpochsNumberResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_WithConfiguration config
                                   number = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     EpochContent)
                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberResponseBody400)
                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberResponseBody403)
                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberResponseBody404)
                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberResponseBody418)
                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberResponseBody429)
                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberResponseBody500)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel number)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /epochs/{number}
-- 
-- The same as 'getEpochs_Number_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GHC.Integer.Type.Integer -- ^ number: Number of the epoch
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Raw number = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel number)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /epochs/{number}
-- 
-- The same as 'getEpochs_Number_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer -- ^ number: Number of the epoch
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_WithConfigurationRaw config
                                      number = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel number)) GHC.Base.++ ""))) GHC.Base.mempty)
