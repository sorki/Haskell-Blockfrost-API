-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getEpochs_Number_Next
module BlockfrostAPI.Operations.GetEpochsNumberNext where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /epochs/{number}/next
-- 
-- Return the list of epochs following a specific epoch.
getEpochs_Number_Next :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberNextParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetEpochsNumberNextResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_Next parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberNextResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    EpochContentArray)
                                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberNextResponseBody400)
                                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberNextResponseBody403)
                                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberNextResponseBody404)
                                                                                                                                                                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberNextResponseBody418)
                                                                                                                                                                                 | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberNextResponseBody429)
                                                                                                                                                                                 | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    GetEpochsNumberNextResponseBody500)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberNextParametersPathNumber parameters))) GHC.Base.++ "/next"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberNextParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberNextParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/epochs\/{number}\/next.GET.parameters@ in the specification.
-- 
-- 
data GetEpochsNumberNextParameters = GetEpochsNumberNextParameters {
  -- | pathNumber: Represents the parameter named \'number\'
  -- 
  -- Number of the requested epoch.
  getEpochsNumberNextParametersPathNumber :: GHC.Integer.Type.Integer
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getEpochsNumberNextParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getEpochsNumberNextParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberNextParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberNextParametersPathNumber obj : "queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberNextParametersQueryCount obj : "queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberNextParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathNumber" Data.Aeson.Types.ToJSON..= getEpochsNumberNextParametersPathNumber obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getEpochsNumberNextParametersQueryCount obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getEpochsNumberNextParametersQueryPage obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberNextParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberNextParameters" (\obj -> ((GHC.Base.pure GetEpochsNumberNextParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathNumber")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetEpochsNumberNextParameters' with all required fields.
mkGetEpochsNumberNextParameters :: GHC.Integer.Type.Integer -- ^ 'getEpochsNumberNextParametersPathNumber'
  -> GetEpochsNumberNextParameters
mkGetEpochsNumberNextParameters getEpochsNumberNextParametersPathNumber = GetEpochsNumberNextParameters{getEpochsNumberNextParametersPathNumber = getEpochsNumberNextParametersPathNumber,
                                                                                                        getEpochsNumberNextParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                        getEpochsNumberNextParametersQueryPage = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getEpochs_Number_Next'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetEpochsNumberNextResponseError' is used.
data GetEpochsNumberNextResponse =
   GetEpochsNumberNextResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetEpochsNumberNextResponse200 EpochContentArray -- ^ Return the data about the epoch
  | GetEpochsNumberNextResponse400 GetEpochsNumberNextResponseBody400 -- ^ Bad request
  | GetEpochsNumberNextResponse403 GetEpochsNumberNextResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetEpochsNumberNextResponse404 GetEpochsNumberNextResponseBody404 -- ^ Component not found
  | GetEpochsNumberNextResponse418 GetEpochsNumberNextResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetEpochsNumberNextResponse429 GetEpochsNumberNextResponseBody429 -- ^ Usage limit reached
  | GetEpochsNumberNextResponse500 GetEpochsNumberNextResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberNextResponseBody400 = GetEpochsNumberNextResponseBody400 {
  -- | error
  getEpochsNumberNextResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberNextResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberNextResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberNextResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberNextResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberNextResponseBody400" (\obj -> ((GHC.Base.pure GetEpochsNumberNextResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberNextResponseBody400' with all required fields.
mkGetEpochsNumberNextResponseBody400 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberNextResponseBody400StatusCode'
  -> GetEpochsNumberNextResponseBody400
mkGetEpochsNumberNextResponseBody400 getEpochsNumberNextResponseBody400Error getEpochsNumberNextResponseBody400Message getEpochsNumberNextResponseBody400StatusCode = GetEpochsNumberNextResponseBody400{getEpochsNumberNextResponseBody400Error = getEpochsNumberNextResponseBody400Error,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody400Message = getEpochsNumberNextResponseBody400Message,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody400StatusCode = getEpochsNumberNextResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberNextResponseBody403 = GetEpochsNumberNextResponseBody403 {
  -- | error
  getEpochsNumberNextResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberNextResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberNextResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberNextResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberNextResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberNextResponseBody403" (\obj -> ((GHC.Base.pure GetEpochsNumberNextResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberNextResponseBody403' with all required fields.
mkGetEpochsNumberNextResponseBody403 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberNextResponseBody403StatusCode'
  -> GetEpochsNumberNextResponseBody403
mkGetEpochsNumberNextResponseBody403 getEpochsNumberNextResponseBody403Error getEpochsNumberNextResponseBody403Message getEpochsNumberNextResponseBody403StatusCode = GetEpochsNumberNextResponseBody403{getEpochsNumberNextResponseBody403Error = getEpochsNumberNextResponseBody403Error,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody403Message = getEpochsNumberNextResponseBody403Message,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody403StatusCode = getEpochsNumberNextResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberNextResponseBody404 = GetEpochsNumberNextResponseBody404 {
  -- | error
  getEpochsNumberNextResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberNextResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberNextResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberNextResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberNextResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberNextResponseBody404" (\obj -> ((GHC.Base.pure GetEpochsNumberNextResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberNextResponseBody404' with all required fields.
mkGetEpochsNumberNextResponseBody404 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberNextResponseBody404StatusCode'
  -> GetEpochsNumberNextResponseBody404
mkGetEpochsNumberNextResponseBody404 getEpochsNumberNextResponseBody404Error getEpochsNumberNextResponseBody404Message getEpochsNumberNextResponseBody404StatusCode = GetEpochsNumberNextResponseBody404{getEpochsNumberNextResponseBody404Error = getEpochsNumberNextResponseBody404Error,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody404Message = getEpochsNumberNextResponseBody404Message,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody404StatusCode = getEpochsNumberNextResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberNextResponseBody418 = GetEpochsNumberNextResponseBody418 {
  -- | error
  getEpochsNumberNextResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberNextResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberNextResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberNextResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberNextResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberNextResponseBody418" (\obj -> ((GHC.Base.pure GetEpochsNumberNextResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberNextResponseBody418' with all required fields.
mkGetEpochsNumberNextResponseBody418 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberNextResponseBody418StatusCode'
  -> GetEpochsNumberNextResponseBody418
mkGetEpochsNumberNextResponseBody418 getEpochsNumberNextResponseBody418Error getEpochsNumberNextResponseBody418Message getEpochsNumberNextResponseBody418StatusCode = GetEpochsNumberNextResponseBody418{getEpochsNumberNextResponseBody418Error = getEpochsNumberNextResponseBody418Error,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody418Message = getEpochsNumberNextResponseBody418Message,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody418StatusCode = getEpochsNumberNextResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberNextResponseBody429 = GetEpochsNumberNextResponseBody429 {
  -- | error
  getEpochsNumberNextResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberNextResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberNextResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberNextResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberNextResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberNextResponseBody429" (\obj -> ((GHC.Base.pure GetEpochsNumberNextResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberNextResponseBody429' with all required fields.
mkGetEpochsNumberNextResponseBody429 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberNextResponseBody429StatusCode'
  -> GetEpochsNumberNextResponseBody429
mkGetEpochsNumberNextResponseBody429 getEpochsNumberNextResponseBody429Error getEpochsNumberNextResponseBody429Message getEpochsNumberNextResponseBody429StatusCode = GetEpochsNumberNextResponseBody429{getEpochsNumberNextResponseBody429Error = getEpochsNumberNextResponseBody429Error,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody429Message = getEpochsNumberNextResponseBody429Message,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody429StatusCode = getEpochsNumberNextResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetEpochsNumberNextResponseBody500 = GetEpochsNumberNextResponseBody500 {
  -- | error
  getEpochsNumberNextResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getEpochsNumberNextResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getEpochsNumberNextResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetEpochsNumberNextResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getEpochsNumberNextResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetEpochsNumberNextResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEpochsNumberNextResponseBody500" (\obj -> ((GHC.Base.pure GetEpochsNumberNextResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetEpochsNumberNextResponseBody500' with all required fields.
mkGetEpochsNumberNextResponseBody500 :: Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getEpochsNumberNextResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getEpochsNumberNextResponseBody500StatusCode'
  -> GetEpochsNumberNextResponseBody500
mkGetEpochsNumberNextResponseBody500 getEpochsNumberNextResponseBody500Error getEpochsNumberNextResponseBody500Message getEpochsNumberNextResponseBody500StatusCode = GetEpochsNumberNextResponseBody500{getEpochsNumberNextResponseBody500Error = getEpochsNumberNextResponseBody500Error,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody500Message = getEpochsNumberNextResponseBody500Message,
                                                                                                                                                                                                         getEpochsNumberNextResponseBody500StatusCode = getEpochsNumberNextResponseBody500StatusCode}
-- | > GET /epochs/{number}/next
-- 
-- The same as 'getEpochs_Number_Next' but accepts an explicit configuration.
getEpochs_Number_NextWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberNextParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetEpochsNumberNextResponse) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_NextWithConfiguration config
                                       parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetEpochsNumberNextResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     EpochContentArray)
                                                                                                                                                                                                  | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberNextResponseBody400)
                                                                                                                                                                                                  | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberNextResponseBody403)
                                                                                                                                                                                                  | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberNextResponseBody404)
                                                                                                                                                                                                  | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberNextResponseBody418)
                                                                                                                                                                                                  | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberNextResponseBody429)
                                                                                                                                                                                                  | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetEpochsNumberNextResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetEpochsNumberNextResponseBody500)
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberNextParametersPathNumber parameters))) GHC.Base.++ "/next"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberNextParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberNextParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/next
-- 
-- The same as 'getEpochs_Number_Next' but returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_NextRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetEpochsNumberNextParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_NextRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberNextParametersPathNumber parameters))) GHC.Base.++ "/next"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberNextParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberNextParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /epochs/{number}/next
-- 
-- The same as 'getEpochs_Number_Next' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getEpochs_Number_NextWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetEpochsNumberNextParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getEpochs_Number_NextWithConfigurationRaw config
                                          parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/epochs/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getEpochsNumberNextParametersPathNumber parameters))) GHC.Base.++ "/next"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberNextParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEpochsNumberNextParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False])
