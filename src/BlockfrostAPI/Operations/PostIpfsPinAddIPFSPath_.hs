-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postIpfsPinAdd_IPFSPath_
module BlockfrostAPI.Operations.PostIpfsPinAddIPFSPath_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > POST /ipfs/pin/add/{IPFS_path}
-- 
-- Pinned objects are counted in your user storage quota.
postIpfsPinAdd_IPFSPath_ :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ IPFS_path
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostIpfsPinAddIPFSPathResponse) -- ^ Monadic computation which returns the result of the operation
postIpfsPinAdd_IPFSPath_ iPFSPath = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostIpfsPinAddIPFSPathResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           PostIpfsPinAddIPFSPathResponseBody200)
                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           PostIpfsPinAddIPFSPathResponseBody400)
                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           PostIpfsPinAddIPFSPathResponseBody403)
                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           PostIpfsPinAddIPFSPathResponseBody404)
                                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           PostIpfsPinAddIPFSPathResponseBody418)
                                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           PostIpfsPinAddIPFSPathResponseBody429)
                                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           PostIpfsPinAddIPFSPathResponseBody500)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/ipfs/pin/add/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'postIpfsPinAdd_IPFSPath_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostIpfsPinAddIPFSPathResponseError' is used.
data PostIpfsPinAddIPFSPathResponse =
   PostIpfsPinAddIPFSPathResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostIpfsPinAddIPFSPathResponse200 PostIpfsPinAddIPFSPathResponseBody200 -- ^ Returns pinned object
  | PostIpfsPinAddIPFSPathResponse400 PostIpfsPinAddIPFSPathResponseBody400 -- ^ Bad request
  | PostIpfsPinAddIPFSPathResponse403 PostIpfsPinAddIPFSPathResponseBody403 -- ^ Authentication secret is missing or invalid
  | PostIpfsPinAddIPFSPathResponse404 PostIpfsPinAddIPFSPathResponseBody404 -- ^ Component not found
  | PostIpfsPinAddIPFSPathResponse418 PostIpfsPinAddIPFSPathResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | PostIpfsPinAddIPFSPathResponse429 PostIpfsPinAddIPFSPathResponseBody429 -- ^ Usage limit reached
  | PostIpfsPinAddIPFSPathResponse500 PostIpfsPinAddIPFSPathResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/ipfs\/pin\/add\/{IPFS_path}.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsPinAddIPFSPathResponseBody200 = PostIpfsPinAddIPFSPathResponseBody200 {
  -- | ipfs_hash: IPFS hash of the pinned object
  postIpfsPinAddIPFSPathResponseBody200IpfsHash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsPinAddIPFSPathResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ipfs_hash" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody200IpfsHash obj : "state" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "queued|pinned|unpinned|failed|gc" : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ipfs_hash" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody200IpfsHash obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "queued|pinned|unpinned|failed|gc"))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsPinAddIPFSPathResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsPinAddIPFSPathResponseBody200" (\obj -> GHC.Base.pure PostIpfsPinAddIPFSPathResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipfs_hash"))
-- | Create a new 'PostIpfsPinAddIPFSPathResponseBody200' with all required fields.
mkPostIpfsPinAddIPFSPathResponseBody200 :: Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody200IpfsHash'
  -> PostIpfsPinAddIPFSPathResponseBody200
mkPostIpfsPinAddIPFSPathResponseBody200 postIpfsPinAddIPFSPathResponseBody200IpfsHash = PostIpfsPinAddIPFSPathResponseBody200{postIpfsPinAddIPFSPathResponseBody200IpfsHash = postIpfsPinAddIPFSPathResponseBody200IpfsHash}
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsPinAddIPFSPathResponseBody400 = PostIpfsPinAddIPFSPathResponseBody400 {
  -- | error
  postIpfsPinAddIPFSPathResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsPinAddIPFSPathResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsPinAddIPFSPathResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsPinAddIPFSPathResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsPinAddIPFSPathResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsPinAddIPFSPathResponseBody400" (\obj -> ((GHC.Base.pure PostIpfsPinAddIPFSPathResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsPinAddIPFSPathResponseBody400' with all required fields.
mkPostIpfsPinAddIPFSPathResponseBody400 :: Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsPinAddIPFSPathResponseBody400StatusCode'
  -> PostIpfsPinAddIPFSPathResponseBody400
mkPostIpfsPinAddIPFSPathResponseBody400 postIpfsPinAddIPFSPathResponseBody400Error postIpfsPinAddIPFSPathResponseBody400Message postIpfsPinAddIPFSPathResponseBody400StatusCode = PostIpfsPinAddIPFSPathResponseBody400{postIpfsPinAddIPFSPathResponseBody400Error = postIpfsPinAddIPFSPathResponseBody400Error,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody400Message = postIpfsPinAddIPFSPathResponseBody400Message,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody400StatusCode = postIpfsPinAddIPFSPathResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsPinAddIPFSPathResponseBody403 = PostIpfsPinAddIPFSPathResponseBody403 {
  -- | error
  postIpfsPinAddIPFSPathResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsPinAddIPFSPathResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsPinAddIPFSPathResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsPinAddIPFSPathResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsPinAddIPFSPathResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsPinAddIPFSPathResponseBody403" (\obj -> ((GHC.Base.pure PostIpfsPinAddIPFSPathResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsPinAddIPFSPathResponseBody403' with all required fields.
mkPostIpfsPinAddIPFSPathResponseBody403 :: Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsPinAddIPFSPathResponseBody403StatusCode'
  -> PostIpfsPinAddIPFSPathResponseBody403
mkPostIpfsPinAddIPFSPathResponseBody403 postIpfsPinAddIPFSPathResponseBody403Error postIpfsPinAddIPFSPathResponseBody403Message postIpfsPinAddIPFSPathResponseBody403StatusCode = PostIpfsPinAddIPFSPathResponseBody403{postIpfsPinAddIPFSPathResponseBody403Error = postIpfsPinAddIPFSPathResponseBody403Error,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody403Message = postIpfsPinAddIPFSPathResponseBody403Message,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody403StatusCode = postIpfsPinAddIPFSPathResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsPinAddIPFSPathResponseBody404 = PostIpfsPinAddIPFSPathResponseBody404 {
  -- | error
  postIpfsPinAddIPFSPathResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsPinAddIPFSPathResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsPinAddIPFSPathResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsPinAddIPFSPathResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsPinAddIPFSPathResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsPinAddIPFSPathResponseBody404" (\obj -> ((GHC.Base.pure PostIpfsPinAddIPFSPathResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsPinAddIPFSPathResponseBody404' with all required fields.
mkPostIpfsPinAddIPFSPathResponseBody404 :: Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsPinAddIPFSPathResponseBody404StatusCode'
  -> PostIpfsPinAddIPFSPathResponseBody404
mkPostIpfsPinAddIPFSPathResponseBody404 postIpfsPinAddIPFSPathResponseBody404Error postIpfsPinAddIPFSPathResponseBody404Message postIpfsPinAddIPFSPathResponseBody404StatusCode = PostIpfsPinAddIPFSPathResponseBody404{postIpfsPinAddIPFSPathResponseBody404Error = postIpfsPinAddIPFSPathResponseBody404Error,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody404Message = postIpfsPinAddIPFSPathResponseBody404Message,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody404StatusCode = postIpfsPinAddIPFSPathResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsPinAddIPFSPathResponseBody418 = PostIpfsPinAddIPFSPathResponseBody418 {
  -- | error
  postIpfsPinAddIPFSPathResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsPinAddIPFSPathResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsPinAddIPFSPathResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsPinAddIPFSPathResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsPinAddIPFSPathResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsPinAddIPFSPathResponseBody418" (\obj -> ((GHC.Base.pure PostIpfsPinAddIPFSPathResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsPinAddIPFSPathResponseBody418' with all required fields.
mkPostIpfsPinAddIPFSPathResponseBody418 :: Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsPinAddIPFSPathResponseBody418StatusCode'
  -> PostIpfsPinAddIPFSPathResponseBody418
mkPostIpfsPinAddIPFSPathResponseBody418 postIpfsPinAddIPFSPathResponseBody418Error postIpfsPinAddIPFSPathResponseBody418Message postIpfsPinAddIPFSPathResponseBody418StatusCode = PostIpfsPinAddIPFSPathResponseBody418{postIpfsPinAddIPFSPathResponseBody418Error = postIpfsPinAddIPFSPathResponseBody418Error,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody418Message = postIpfsPinAddIPFSPathResponseBody418Message,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody418StatusCode = postIpfsPinAddIPFSPathResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsPinAddIPFSPathResponseBody429 = PostIpfsPinAddIPFSPathResponseBody429 {
  -- | error
  postIpfsPinAddIPFSPathResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsPinAddIPFSPathResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsPinAddIPFSPathResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsPinAddIPFSPathResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsPinAddIPFSPathResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsPinAddIPFSPathResponseBody429" (\obj -> ((GHC.Base.pure PostIpfsPinAddIPFSPathResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsPinAddIPFSPathResponseBody429' with all required fields.
mkPostIpfsPinAddIPFSPathResponseBody429 :: Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsPinAddIPFSPathResponseBody429StatusCode'
  -> PostIpfsPinAddIPFSPathResponseBody429
mkPostIpfsPinAddIPFSPathResponseBody429 postIpfsPinAddIPFSPathResponseBody429Error postIpfsPinAddIPFSPathResponseBody429Message postIpfsPinAddIPFSPathResponseBody429StatusCode = PostIpfsPinAddIPFSPathResponseBody429{postIpfsPinAddIPFSPathResponseBody429Error = postIpfsPinAddIPFSPathResponseBody429Error,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody429Message = postIpfsPinAddIPFSPathResponseBody429Message,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody429StatusCode = postIpfsPinAddIPFSPathResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data PostIpfsPinAddIPFSPathResponseBody500 = PostIpfsPinAddIPFSPathResponseBody500 {
  -- | error
  postIpfsPinAddIPFSPathResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , postIpfsPinAddIPFSPathResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , postIpfsPinAddIPFSPathResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostIpfsPinAddIPFSPathResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= postIpfsPinAddIPFSPathResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostIpfsPinAddIPFSPathResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIpfsPinAddIPFSPathResponseBody500" (\obj -> ((GHC.Base.pure PostIpfsPinAddIPFSPathResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'PostIpfsPinAddIPFSPathResponseBody500' with all required fields.
mkPostIpfsPinAddIPFSPathResponseBody500 :: Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'postIpfsPinAddIPFSPathResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'postIpfsPinAddIPFSPathResponseBody500StatusCode'
  -> PostIpfsPinAddIPFSPathResponseBody500
mkPostIpfsPinAddIPFSPathResponseBody500 postIpfsPinAddIPFSPathResponseBody500Error postIpfsPinAddIPFSPathResponseBody500Message postIpfsPinAddIPFSPathResponseBody500StatusCode = PostIpfsPinAddIPFSPathResponseBody500{postIpfsPinAddIPFSPathResponseBody500Error = postIpfsPinAddIPFSPathResponseBody500Error,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody500Message = postIpfsPinAddIPFSPathResponseBody500Message,
                                                                                                                                                                                                                        postIpfsPinAddIPFSPathResponseBody500StatusCode = postIpfsPinAddIPFSPathResponseBody500StatusCode}
-- | > POST /ipfs/pin/add/{IPFS_path}
-- 
-- The same as 'postIpfsPinAdd_IPFSPath_' but accepts an explicit configuration.
postIpfsPinAdd_IPFSPath_WithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ IPFS_path
  -> m (Network.HTTP.Client.Types.Response PostIpfsPinAddIPFSPathResponse) -- ^ Monadic computation which returns the result of the operation
postIpfsPinAdd_IPFSPath_WithConfiguration config
                                          iPFSPath = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either PostIpfsPinAddIPFSPathResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            PostIpfsPinAddIPFSPathResponseBody200)
                                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostIpfsPinAddIPFSPathResponseBody400)
                                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostIpfsPinAddIPFSPathResponseBody403)
                                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostIpfsPinAddIPFSPathResponseBody404)
                                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostIpfsPinAddIPFSPathResponseBody418)
                                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostIpfsPinAddIPFSPathResponseBody429)
                                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> PostIpfsPinAddIPFSPathResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostIpfsPinAddIPFSPathResponseBody500)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/ipfs/pin/add/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > POST /ipfs/pin/add/{IPFS_path}
-- 
-- The same as 'postIpfsPinAdd_IPFSPath_' but returns the raw 'Data.ByteString.Char8.ByteString'.
postIpfsPinAdd_IPFSPath_Raw :: forall m . BlockfrostAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ IPFS_path
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postIpfsPinAdd_IPFSPath_Raw iPFSPath = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/ipfs/pin/add/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > POST /ipfs/pin/add/{IPFS_path}
-- 
-- The same as 'postIpfsPinAdd_IPFSPath_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postIpfsPinAdd_IPFSPath_WithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ IPFS_path
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postIpfsPinAdd_IPFSPath_WithConfigurationRaw config
                                             iPFSPath = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/ipfs/pin/add/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel iPFSPath)) GHC.Base.++ ""))) GHC.Base.mempty)
