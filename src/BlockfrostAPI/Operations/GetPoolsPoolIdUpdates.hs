-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPools_PoolId_Updates
module BlockfrostAPI.Operations.GetPoolsPoolIdUpdates where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified BlockfrostAPI.Common
import BlockfrostAPI.Types

-- | > GET /pools/{pool_id}/updates
-- 
-- List of certificate updates to the stake pool.
getPools_PoolId_Updates :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsPoolIdUpdatesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetPoolsPoolIdUpdatesResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_Updates parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdUpdatesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          PoolUpdates)
                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdUpdatesResponseBody400)
                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdUpdatesResponseBody403)
                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdUpdatesResponseBody404)
                                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdUpdatesResponseBody418)
                                                                                                                                                                                     | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdUpdatesResponseBody429)
                                                                                                                                                                                     | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPoolsPoolIdUpdatesResponseBody500)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdUpdatesParametersPathPoolId parameters))) GHC.Base.++ "/updates"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/pools\/{pool_id}\/updates.GET.parameters@ in the specification.
-- 
-- 
data GetPoolsPoolIdUpdatesParameters = GetPoolsPoolIdUpdatesParameters {
  -- | pathPool_id: Represents the parameter named \'pool_id\'
  -- 
  -- Bech32 or hexadecimal pool ID.
  getPoolsPoolIdUpdatesParametersPathPoolId :: Data.Text.Internal.Text
  -- | queryCount: Represents the parameter named \'count\'
  -- 
  -- The number of results displayed on one page.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  , getPoolsPoolIdUpdatesParametersQueryCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | queryOrder: Represents the parameter named \'order\'
  -- 
  -- The ordering of items from the point of view of the blockchain,
  -- not the page listing itself. By default, we return oldest first, newest last.
  , getPoolsPoolIdUpdatesParametersQueryOrder :: (GHC.Maybe.Maybe GetPoolsPoolIdUpdatesParametersQueryOrder')
  -- | queryPage: Represents the parameter named \'page\'
  -- 
  -- The page number for listing the results.
  , getPoolsPoolIdUpdatesParametersQueryPage :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdUpdatesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathPool_id" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesParametersPathPoolId obj : "queryCount" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesParametersQueryCount obj : "queryOrder" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesParametersQueryOrder obj : "queryPage" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesParametersQueryPage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathPool_id" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesParametersPathPoolId obj) GHC.Base.<> (("queryCount" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesParametersQueryCount obj) GHC.Base.<> (("queryOrder" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesParametersQueryOrder obj) GHC.Base.<> ("queryPage" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesParametersQueryPage obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdUpdatesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdUpdatesParameters" (\obj -> (((GHC.Base.pure GetPoolsPoolIdUpdatesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathPool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryOrder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage"))
-- | Create a new 'GetPoolsPoolIdUpdatesParameters' with all required fields.
mkGetPoolsPoolIdUpdatesParameters :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesParametersPathPoolId'
  -> GetPoolsPoolIdUpdatesParameters
mkGetPoolsPoolIdUpdatesParameters getPoolsPoolIdUpdatesParametersPathPoolId = GetPoolsPoolIdUpdatesParameters{getPoolsPoolIdUpdatesParametersPathPoolId = getPoolsPoolIdUpdatesParametersPathPoolId,
                                                                                                              getPoolsPoolIdUpdatesParametersQueryCount = GHC.Maybe.Nothing,
                                                                                                              getPoolsPoolIdUpdatesParametersQueryOrder = GHC.Maybe.Nothing,
                                                                                                              getPoolsPoolIdUpdatesParametersQueryPage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/pools\/{pool_id}\/updates.GET.parameters.properties.queryOrder@ in the specification.
-- 
-- Represents the parameter named \'order\'
-- 
-- The ordering of items from the point of view of the blockchain,
-- not the page listing itself. By default, we return oldest first, newest last.
data GetPoolsPoolIdUpdatesParametersQueryOrder' =
   GetPoolsPoolIdUpdatesParametersQueryOrder'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetPoolsPoolIdUpdatesParametersQueryOrder'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetPoolsPoolIdUpdatesParametersQueryOrder'EnumAsc -- ^ Represents the JSON value @"asc"@
  | GetPoolsPoolIdUpdatesParametersQueryOrder'EnumDesc -- ^ Represents the JSON value @"desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdUpdatesParametersQueryOrder'
    where toJSON (GetPoolsPoolIdUpdatesParametersQueryOrder'Other val) = val
          toJSON (GetPoolsPoolIdUpdatesParametersQueryOrder'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetPoolsPoolIdUpdatesParametersQueryOrder'EnumAsc) = "asc"
          toJSON (GetPoolsPoolIdUpdatesParametersQueryOrder'EnumDesc) = "desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdUpdatesParametersQueryOrder'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "asc" -> GetPoolsPoolIdUpdatesParametersQueryOrder'EnumAsc
                                            | val GHC.Classes.== "desc" -> GetPoolsPoolIdUpdatesParametersQueryOrder'EnumDesc
                                            | GHC.Base.otherwise -> GetPoolsPoolIdUpdatesParametersQueryOrder'Other val)
-- | Represents a response of the operation 'getPools_PoolId_Updates'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPoolsPoolIdUpdatesResponseError' is used.
data GetPoolsPoolIdUpdatesResponse =
   GetPoolsPoolIdUpdatesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPoolsPoolIdUpdatesResponse200 PoolUpdates -- ^ Return the pool updates history
  | GetPoolsPoolIdUpdatesResponse400 GetPoolsPoolIdUpdatesResponseBody400 -- ^ Bad request
  | GetPoolsPoolIdUpdatesResponse403 GetPoolsPoolIdUpdatesResponseBody403 -- ^ Authentication secret is missing or invalid
  | GetPoolsPoolIdUpdatesResponse404 GetPoolsPoolIdUpdatesResponseBody404 -- ^ Component not found
  | GetPoolsPoolIdUpdatesResponse418 GetPoolsPoolIdUpdatesResponseBody418 -- ^ IP has been auto-banned for extensive sending of requests after usage limit has been reached
  | GetPoolsPoolIdUpdatesResponse429 GetPoolsPoolIdUpdatesResponseBody429 -- ^ Usage limit reached
  | GetPoolsPoolIdUpdatesResponse500 GetPoolsPoolIdUpdatesResponseBody500 -- ^ Internal Server Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @components.responses.bad_request.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdUpdatesResponseBody400 = GetPoolsPoolIdUpdatesResponseBody400 {
  -- | error
  getPoolsPoolIdUpdatesResponseBody400Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdUpdatesResponseBody400Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdUpdatesResponseBody400StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdUpdatesResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody400Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody400Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody400StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody400Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody400Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody400StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdUpdatesResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdUpdatesResponseBody400" (\obj -> ((GHC.Base.pure GetPoolsPoolIdUpdatesResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdUpdatesResponseBody400' with all required fields.
mkGetPoolsPoolIdUpdatesResponseBody400 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody400Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody400Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdUpdatesResponseBody400StatusCode'
  -> GetPoolsPoolIdUpdatesResponseBody400
mkGetPoolsPoolIdUpdatesResponseBody400 getPoolsPoolIdUpdatesResponseBody400Error getPoolsPoolIdUpdatesResponseBody400Message getPoolsPoolIdUpdatesResponseBody400StatusCode = GetPoolsPoolIdUpdatesResponseBody400{getPoolsPoolIdUpdatesResponseBody400Error = getPoolsPoolIdUpdatesResponseBody400Error,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody400Message = getPoolsPoolIdUpdatesResponseBody400Message,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody400StatusCode = getPoolsPoolIdUpdatesResponseBody400StatusCode}
-- | Defines the object schema located at @components.responses.unauthorized_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdUpdatesResponseBody403 = GetPoolsPoolIdUpdatesResponseBody403 {
  -- | error
  getPoolsPoolIdUpdatesResponseBody403Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdUpdatesResponseBody403Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdUpdatesResponseBody403StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdUpdatesResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody403Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody403Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody403StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody403Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody403Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody403StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdUpdatesResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdUpdatesResponseBody403" (\obj -> ((GHC.Base.pure GetPoolsPoolIdUpdatesResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdUpdatesResponseBody403' with all required fields.
mkGetPoolsPoolIdUpdatesResponseBody403 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody403Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody403Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdUpdatesResponseBody403StatusCode'
  -> GetPoolsPoolIdUpdatesResponseBody403
mkGetPoolsPoolIdUpdatesResponseBody403 getPoolsPoolIdUpdatesResponseBody403Error getPoolsPoolIdUpdatesResponseBody403Message getPoolsPoolIdUpdatesResponseBody403StatusCode = GetPoolsPoolIdUpdatesResponseBody403{getPoolsPoolIdUpdatesResponseBody403Error = getPoolsPoolIdUpdatesResponseBody403Error,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody403Message = getPoolsPoolIdUpdatesResponseBody403Message,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody403StatusCode = getPoolsPoolIdUpdatesResponseBody403StatusCode}
-- | Defines the object schema located at @components.responses.not_found.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdUpdatesResponseBody404 = GetPoolsPoolIdUpdatesResponseBody404 {
  -- | error
  getPoolsPoolIdUpdatesResponseBody404Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdUpdatesResponseBody404Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdUpdatesResponseBody404StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdUpdatesResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody404Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody404Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody404StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody404Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody404Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody404StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdUpdatesResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdUpdatesResponseBody404" (\obj -> ((GHC.Base.pure GetPoolsPoolIdUpdatesResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdUpdatesResponseBody404' with all required fields.
mkGetPoolsPoolIdUpdatesResponseBody404 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody404Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody404Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdUpdatesResponseBody404StatusCode'
  -> GetPoolsPoolIdUpdatesResponseBody404
mkGetPoolsPoolIdUpdatesResponseBody404 getPoolsPoolIdUpdatesResponseBody404Error getPoolsPoolIdUpdatesResponseBody404Message getPoolsPoolIdUpdatesResponseBody404StatusCode = GetPoolsPoolIdUpdatesResponseBody404{getPoolsPoolIdUpdatesResponseBody404Error = getPoolsPoolIdUpdatesResponseBody404Error,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody404Message = getPoolsPoolIdUpdatesResponseBody404Message,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody404StatusCode = getPoolsPoolIdUpdatesResponseBody404StatusCode}
-- | Defines the object schema located at @components.responses.autobanned.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdUpdatesResponseBody418 = GetPoolsPoolIdUpdatesResponseBody418 {
  -- | error
  getPoolsPoolIdUpdatesResponseBody418Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdUpdatesResponseBody418Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdUpdatesResponseBody418StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdUpdatesResponseBody418
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody418Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody418Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody418StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody418Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody418Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody418StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdUpdatesResponseBody418
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdUpdatesResponseBody418" (\obj -> ((GHC.Base.pure GetPoolsPoolIdUpdatesResponseBody418 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdUpdatesResponseBody418' with all required fields.
mkGetPoolsPoolIdUpdatesResponseBody418 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody418Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody418Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdUpdatesResponseBody418StatusCode'
  -> GetPoolsPoolIdUpdatesResponseBody418
mkGetPoolsPoolIdUpdatesResponseBody418 getPoolsPoolIdUpdatesResponseBody418Error getPoolsPoolIdUpdatesResponseBody418Message getPoolsPoolIdUpdatesResponseBody418StatusCode = GetPoolsPoolIdUpdatesResponseBody418{getPoolsPoolIdUpdatesResponseBody418Error = getPoolsPoolIdUpdatesResponseBody418Error,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody418Message = getPoolsPoolIdUpdatesResponseBody418Message,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody418StatusCode = getPoolsPoolIdUpdatesResponseBody418StatusCode}
-- | Defines the object schema located at @components.responses.overusage_limit.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdUpdatesResponseBody429 = GetPoolsPoolIdUpdatesResponseBody429 {
  -- | error
  getPoolsPoolIdUpdatesResponseBody429Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdUpdatesResponseBody429Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdUpdatesResponseBody429StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdUpdatesResponseBody429
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody429Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody429Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody429StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody429Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody429Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody429StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdUpdatesResponseBody429
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdUpdatesResponseBody429" (\obj -> ((GHC.Base.pure GetPoolsPoolIdUpdatesResponseBody429 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdUpdatesResponseBody429' with all required fields.
mkGetPoolsPoolIdUpdatesResponseBody429 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody429Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody429Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdUpdatesResponseBody429StatusCode'
  -> GetPoolsPoolIdUpdatesResponseBody429
mkGetPoolsPoolIdUpdatesResponseBody429 getPoolsPoolIdUpdatesResponseBody429Error getPoolsPoolIdUpdatesResponseBody429Message getPoolsPoolIdUpdatesResponseBody429StatusCode = GetPoolsPoolIdUpdatesResponseBody429{getPoolsPoolIdUpdatesResponseBody429Error = getPoolsPoolIdUpdatesResponseBody429Error,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody429Message = getPoolsPoolIdUpdatesResponseBody429Message,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody429StatusCode = getPoolsPoolIdUpdatesResponseBody429StatusCode}
-- | Defines the object schema located at @components.responses.internal_server_error.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPoolsPoolIdUpdatesResponseBody500 = GetPoolsPoolIdUpdatesResponseBody500 {
  -- | error
  getPoolsPoolIdUpdatesResponseBody500Error :: Data.Text.Internal.Text
  -- | message
  , getPoolsPoolIdUpdatesResponseBody500Message :: Data.Text.Internal.Text
  -- | status_code
  , getPoolsPoolIdUpdatesResponseBody500StatusCode :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPoolsPoolIdUpdatesResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody500Error obj : "message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody500Message obj : "status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody500StatusCode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody500Error obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody500Message obj) GHC.Base.<> ("status_code" Data.Aeson.Types.ToJSON..= getPoolsPoolIdUpdatesResponseBody500StatusCode obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPoolsPoolIdUpdatesResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPoolsPoolIdUpdatesResponseBody500" (\obj -> ((GHC.Base.pure GetPoolsPoolIdUpdatesResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_code"))
-- | Create a new 'GetPoolsPoolIdUpdatesResponseBody500' with all required fields.
mkGetPoolsPoolIdUpdatesResponseBody500 :: Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody500Error'
  -> Data.Text.Internal.Text -- ^ 'getPoolsPoolIdUpdatesResponseBody500Message'
  -> GHC.Integer.Type.Integer -- ^ 'getPoolsPoolIdUpdatesResponseBody500StatusCode'
  -> GetPoolsPoolIdUpdatesResponseBody500
mkGetPoolsPoolIdUpdatesResponseBody500 getPoolsPoolIdUpdatesResponseBody500Error getPoolsPoolIdUpdatesResponseBody500Message getPoolsPoolIdUpdatesResponseBody500StatusCode = GetPoolsPoolIdUpdatesResponseBody500{getPoolsPoolIdUpdatesResponseBody500Error = getPoolsPoolIdUpdatesResponseBody500Error,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody500Message = getPoolsPoolIdUpdatesResponseBody500Message,
                                                                                                                                                                                                                   getPoolsPoolIdUpdatesResponseBody500StatusCode = getPoolsPoolIdUpdatesResponseBody500StatusCode}
-- | > GET /pools/{pool_id}/updates
-- 
-- The same as 'getPools_PoolId_Updates' but accepts an explicit configuration.
getPools_PoolId_UpdatesWithConfiguration :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsPoolIdUpdatesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetPoolsPoolIdUpdatesResponse) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_UpdatesWithConfiguration config
                                         parameters = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either GetPoolsPoolIdUpdatesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           PoolUpdates)
                                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdUpdatesResponseBody400)
                                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdUpdatesResponseBody403)
                                                                                                                                                                                                      | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdUpdatesResponseBody404)
                                                                                                                                                                                                      | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 418) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse418 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdUpdatesResponseBody418)
                                                                                                                                                                                                      | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 429) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse429 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdUpdatesResponseBody429)
                                                                                                                                                                                                      | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> GetPoolsPoolIdUpdatesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             GetPoolsPoolIdUpdatesResponseBody500)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdUpdatesParametersPathPoolId parameters))) GHC.Base.++ "/updates"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
lockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/{pool_id}/updates
-- 
-- The same as 'getPools_PoolId_Updates' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_UpdatesRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => GetPoolsPoolIdUpdatesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> BlockfrostAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_UpdatesRaw parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdUpdatesParametersPathPoolId parameters))) GHC.Base.++ "/updates"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                           BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pools/{pool_id}/updates
-- 
-- The same as 'getPools_PoolId_Updates' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPools_PoolId_UpdatesWithConfigurationRaw :: forall m . BlockfrostAPI.Common.MonadHTTP m => BlockfrostAPI.Common.Configuration -- ^ The configuration to use in the request
  -> GetPoolsPoolIdUpdatesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPools_PoolId_UpdatesWithConfigurationRaw config
                                            parameters = GHC.Base.id (BlockfrostAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/pools/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ BlockfrostAPI.Common.stringifyModel (getPoolsPoolIdUpdatesParametersPathPoolId parameters))) GHC.Base.++ "/updates"))) [BlockfrostAPI.Common.QueryParameter (Data.Text.pack "count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryCount parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BlockfrostAPI.Common.QueryParameter (Data.Text.pack "order") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPoolsPoolIdUpdatesParametersQueryOrder parameters) (Data.Text.pack "form") GHC.Types.False])
