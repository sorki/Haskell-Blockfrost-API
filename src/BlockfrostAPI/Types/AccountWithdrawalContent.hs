-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AccountWithdrawalContent
module BlockfrostAPI.Types.AccountWithdrawalContent where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.account_withdrawal_content@ in the specification.
-- 
-- 
data AccountWithdrawalContent = AccountWithdrawalContent {
  -- | amount: Withdrawal amount in Lovelaces
  accountWithdrawalContentAmount :: Data.Text.Internal.Text
  -- | tx_hash: Hash of the transaction containing the withdrawal
  , accountWithdrawalContentTxHash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AccountWithdrawalContent
    where toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= accountWithdrawalContentAmount obj : "tx_hash" Data.Aeson.Types.ToJSON..= accountWithdrawalContentTxHash obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= accountWithdrawalContentAmount obj) GHC.Base.<> ("tx_hash" Data.Aeson.Types.ToJSON..= accountWithdrawalContentTxHash obj))
instance Data.Aeson.Types.FromJSON.FromJSON AccountWithdrawalContent
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountWithdrawalContent" (\obj -> (GHC.Base.pure AccountWithdrawalContent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tx_hash"))
-- | Create a new 'AccountWithdrawalContent' with all required fields.
mkAccountWithdrawalContent :: Data.Text.Internal.Text -- ^ 'accountWithdrawalContentAmount'
  -> Data.Text.Internal.Text -- ^ 'accountWithdrawalContentTxHash'
  -> AccountWithdrawalContent
mkAccountWithdrawalContent accountWithdrawalContentAmount accountWithdrawalContentTxHash = AccountWithdrawalContent{accountWithdrawalContentAmount = accountWithdrawalContentAmount,
                                                                                                                    accountWithdrawalContentTxHash = accountWithdrawalContentTxHash}
