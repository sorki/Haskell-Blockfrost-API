-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AddressContent
module BlockfrostAPI.Types.AddressContent where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.address_content@ in the specification.
-- 
-- 
data AddressContent = AddressContent {
  -- | amount
  addressContentAmount :: ([AddressContentAmount'])
  -- | stake_address: Stake address that controls the key
  , addressContentStakeAddress :: Data.Text.Internal.Text
  -- | type: Address era
  , addressContentType :: AddressContentType'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AddressContent
    where toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= addressContentAmount obj : "stake_address" Data.Aeson.Types.ToJSON..= addressContentStakeAddress obj : "type" Data.Aeson.Types.ToJSON..= addressContentType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= addressContentAmount obj) GHC.Base.<> (("stake_address" Data.Aeson.Types.ToJSON..= addressContentStakeAddress obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= addressContentType obj)))
instance Data.Aeson.Types.FromJSON.FromJSON AddressContent
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AddressContent" (\obj -> ((GHC.Base.pure AddressContent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stake_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'AddressContent' with all required fields.
mkAddressContent :: [AddressContentAmount'] -- ^ 'addressContentAmount'
  -> Data.Text.Internal.Text -- ^ 'addressContentStakeAddress'
  -> AddressContentType' -- ^ 'addressContentType'
  -> AddressContent
mkAddressContent addressContentAmount addressContentStakeAddress addressContentType = AddressContent{addressContentAmount = addressContentAmount,
                                                                                                     addressContentStakeAddress = addressContentStakeAddress,
                                                                                                     addressContentType = addressContentType}
-- | Defines the object schema located at @components.schemas.address_content.properties.amount.items@ in the specification.
-- 
-- The sum of all the UTXO per asset
data AddressContentAmount' = AddressContentAmount' {
  -- | quantity: The quantity of the unit
  addressContentAmount'Quantity :: Data.Text.Internal.Text
  -- | unit: The unit of the value
  , addressContentAmount'Unit :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AddressContentAmount'
    where toJSON obj = Data.Aeson.Types.Internal.object ("quantity" Data.Aeson.Types.ToJSON..= addressContentAmount'Quantity obj : "unit" Data.Aeson.Types.ToJSON..= addressContentAmount'Unit obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("quantity" Data.Aeson.Types.ToJSON..= addressContentAmount'Quantity obj) GHC.Base.<> ("unit" Data.Aeson.Types.ToJSON..= addressContentAmount'Unit obj))
instance Data.Aeson.Types.FromJSON.FromJSON AddressContentAmount'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AddressContentAmount'" (\obj -> (GHC.Base.pure AddressContentAmount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unit"))
-- | Create a new 'AddressContentAmount'' with all required fields.
mkAddressContentAmount' :: Data.Text.Internal.Text -- ^ 'addressContentAmount'Quantity'
  -> Data.Text.Internal.Text -- ^ 'addressContentAmount'Unit'
  -> AddressContentAmount'
mkAddressContentAmount' addressContentAmount'Quantity addressContentAmount'Unit = AddressContentAmount'{addressContentAmount'Quantity = addressContentAmount'Quantity,
                                                                                                        addressContentAmount'Unit = addressContentAmount'Unit}
-- | Defines the enum schema located at @components.schemas.address_content.properties.type@ in the specification.
-- 
-- Address era
data AddressContentType' =
   AddressContentType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | AddressContentType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | AddressContentType'EnumByron -- ^ Represents the JSON value @"byron"@
  | AddressContentType'EnumShelley -- ^ Represents the JSON value @"shelley"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AddressContentType'
    where toJSON (AddressContentType'Other val) = val
          toJSON (AddressContentType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (AddressContentType'EnumByron) = "byron"
          toJSON (AddressContentType'EnumShelley) = "shelley"
instance Data.Aeson.Types.FromJSON.FromJSON AddressContentType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "byron" -> AddressContentType'EnumByron
                                            | val GHC.Classes.== "shelley" -> AddressContentType'EnumShelley
                                            | GHC.Base.otherwise -> AddressContentType'Other val)
