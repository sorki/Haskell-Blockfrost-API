-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema PoolRelay
module BlockfrostAPI.Types.PoolRelay where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.pool_relay@ in the specification.
-- 
-- 
data PoolRelay = PoolRelay {
  -- | dns: DNS name of the relay
  poolRelayDns :: Data.Text.Internal.Text
  -- | dns_srv: DNS SRV entry of the relay
  , poolRelayDnsSrv :: Data.Text.Internal.Text
  -- | ipv4: IPv4 address of the relay
  , poolRelayIpv4 :: Data.Text.Internal.Text
  -- | ipv6: IPv6 address of the relay
  , poolRelayIpv6 :: Data.Text.Internal.Text
  -- | port: Network port of the relay
  , poolRelayPort :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PoolRelay
    where toJSON obj = Data.Aeson.Types.Internal.object ("dns" Data.Aeson.Types.ToJSON..= poolRelayDns obj : "dns_srv" Data.Aeson.Types.ToJSON..= poolRelayDnsSrv obj : "ipv4" Data.Aeson.Types.ToJSON..= poolRelayIpv4 obj : "ipv6" Data.Aeson.Types.ToJSON..= poolRelayIpv6 obj : "port" Data.Aeson.Types.ToJSON..= poolRelayPort obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("dns" Data.Aeson.Types.ToJSON..= poolRelayDns obj) GHC.Base.<> (("dns_srv" Data.Aeson.Types.ToJSON..= poolRelayDnsSrv obj) GHC.Base.<> (("ipv4" Data.Aeson.Types.ToJSON..= poolRelayIpv4 obj) GHC.Base.<> (("ipv6" Data.Aeson.Types.ToJSON..= poolRelayIpv6 obj) GHC.Base.<> ("port" Data.Aeson.Types.ToJSON..= poolRelayPort obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PoolRelay
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PoolRelay" (\obj -> ((((GHC.Base.pure PoolRelay GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dns")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dns_srv")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv6")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "port"))
-- | Create a new 'PoolRelay' with all required fields.
mkPoolRelay :: Data.Text.Internal.Text -- ^ 'poolRelayDns'
  -> Data.Text.Internal.Text -- ^ 'poolRelayDnsSrv'
  -> Data.Text.Internal.Text -- ^ 'poolRelayIpv4'
  -> Data.Text.Internal.Text -- ^ 'poolRelayIpv6'
  -> GHC.Integer.Type.Integer -- ^ 'poolRelayPort'
  -> PoolRelay
mkPoolRelay poolRelayDns poolRelayDnsSrv poolRelayIpv4 poolRelayIpv6 poolRelayPort = PoolRelay{poolRelayDns = poolRelayDns,
                                                                                               poolRelayDnsSrv = poolRelayDnsSrv,
                                                                                               poolRelayIpv4 = poolRelayIpv4,
                                                                                               poolRelayIpv6 = poolRelayIpv6,
                                                                                               poolRelayPort = poolRelayPort}
