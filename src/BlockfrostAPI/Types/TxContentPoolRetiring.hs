-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TxContentPoolRetiring
module BlockfrostAPI.Types.TxContentPoolRetiring where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.tx_content_pool_retiring@ in the specification.
-- 
-- 
data TxContentPoolRetiring = TxContentPoolRetiring {
  -- | cert_index: Index of the certificate within the transaction
  txContentPoolRetiringCertIndex :: GHC.Integer.Type.Integer
  -- | pool_id: Bech32 stake pool ID
  , txContentPoolRetiringPoolId :: Data.Text.Internal.Text
  -- | retiring_epoch: Retiring epoch
  , txContentPoolRetiringRetiringEpoch :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxContentPoolRetiring
    where toJSON obj = Data.Aeson.Types.Internal.object ("cert_index" Data.Aeson.Types.ToJSON..= txContentPoolRetiringCertIndex obj : "pool_id" Data.Aeson.Types.ToJSON..= txContentPoolRetiringPoolId obj : "retiring_epoch" Data.Aeson.Types.ToJSON..= txContentPoolRetiringRetiringEpoch obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("cert_index" Data.Aeson.Types.ToJSON..= txContentPoolRetiringCertIndex obj) GHC.Base.<> (("pool_id" Data.Aeson.Types.ToJSON..= txContentPoolRetiringPoolId obj) GHC.Base.<> ("retiring_epoch" Data.Aeson.Types.ToJSON..= txContentPoolRetiringRetiringEpoch obj)))
instance Data.Aeson.Types.FromJSON.FromJSON TxContentPoolRetiring
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TxContentPoolRetiring" (\obj -> ((GHC.Base.pure TxContentPoolRetiring GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cert_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "retiring_epoch"))
-- | Create a new 'TxContentPoolRetiring' with all required fields.
mkTxContentPoolRetiring :: GHC.Integer.Type.Integer -- ^ 'txContentPoolRetiringCertIndex'
  -> Data.Text.Internal.Text -- ^ 'txContentPoolRetiringPoolId'
  -> GHC.Integer.Type.Integer -- ^ 'txContentPoolRetiringRetiringEpoch'
  -> TxContentPoolRetiring
mkTxContentPoolRetiring txContentPoolRetiringCertIndex txContentPoolRetiringPoolId txContentPoolRetiringRetiringEpoch = TxContentPoolRetiring{txContentPoolRetiringCertIndex = txContentPoolRetiringCertIndex,
                                                                                                                                              txContentPoolRetiringPoolId = txContentPoolRetiringPoolId,
                                                                                                                                              txContentPoolRetiringRetiringEpoch = txContentPoolRetiringRetiringEpoch}
