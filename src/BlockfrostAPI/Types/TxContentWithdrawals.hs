-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TxContentWithdrawals
module BlockfrostAPI.Types.TxContentWithdrawals where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.tx_content_withdrawals.items@ in the specification.
-- 
-- 
data TxContentWithdrawals = TxContentWithdrawals {
  -- | address: Bech32 withdrawal address
  txContentWithdrawalsAddress :: Data.Text.Internal.Text
  -- | amount: Withdrawal amount in Lovelaces
  , txContentWithdrawalsAmount :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxContentWithdrawals
    where toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= txContentWithdrawalsAddress obj : "amount" Data.Aeson.Types.ToJSON..= txContentWithdrawalsAmount obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= txContentWithdrawalsAddress obj) GHC.Base.<> ("amount" Data.Aeson.Types.ToJSON..= txContentWithdrawalsAmount obj))
instance Data.Aeson.Types.FromJSON.FromJSON TxContentWithdrawals
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TxContentWithdrawals" (\obj -> (GHC.Base.pure TxContentWithdrawals GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount"))
-- | Create a new 'TxContentWithdrawals' with all required fields.
mkTxContentWithdrawals :: Data.Text.Internal.Text -- ^ 'txContentWithdrawalsAddress'
  -> Data.Text.Internal.Text -- ^ 'txContentWithdrawalsAmount'
  -> TxContentWithdrawals
mkTxContentWithdrawals txContentWithdrawalsAddress txContentWithdrawalsAmount = TxContentWithdrawals{txContentWithdrawalsAddress = txContentWithdrawalsAddress,
                                                                                                     txContentWithdrawalsAmount = txContentWithdrawalsAmount}
-- | Defines an alias for the schema located at @components.schemas.tx_content_withdrawals@ in the specification.
-- 
-- 
-- XXX: collision
-- type TxContentWithdrawals = [TxContentWithdrawals]
type TxContentWithdrawals' = [TxContentWithdrawals]
