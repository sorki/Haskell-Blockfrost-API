-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema BlockContent
module BlockfrostAPI.Types.BlockContent where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.block_content@ in the specification.
-- 
-- 
data BlockContent = BlockContent {
  -- | block_vrf: VRF key of the block
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 65
  -- * Minimum length of 65
  blockContentBlockVrf :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | confirmations: Number of block confirmations
  , blockContentConfirmations :: GHC.Integer.Type.Integer
  -- | epoch: Epoch number
  , blockContentEpoch :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | epoch_slot: Slot within the epoch
  , blockContentEpochSlot :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | fees: Total fees within the block in Lovelaces
  , blockContentFees :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | hash: Hash of the block
  , blockContentHash :: Data.Text.Internal.Text
  -- | height: Block number
  , blockContentHeight :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | next_block: Hash of the next block
  , blockContentNextBlock :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | output: Total output within the block in Lovelaces
  , blockContentOutput :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | previous_block: Hash of the previous block
  , blockContentPreviousBlock :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | size: Block size in Bytes
  , blockContentSize :: GHC.Integer.Type.Integer
  -- | slot: Slot number
  , blockContentSlot :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | slot_leader: Bech32 ID of the slot leader or specific block description in case there is no slot leader
  , blockContentSlotLeader :: Data.Text.Internal.Text
  -- | time: Block creation time in UNIX time
  , blockContentTime :: GHC.Integer.Type.Integer
  -- | tx_count: Number of transactions in the block
  , blockContentTxCount :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON BlockContent
    where toJSON obj = Data.Aeson.Types.Internal.object ("block_vrf" Data.Aeson.Types.ToJSON..= blockContentBlockVrf obj : "confirmations" Data.Aeson.Types.ToJSON..= blockContentConfirmations obj : "epoch" Data.Aeson.Types.ToJSON..= blockContentEpoch obj : "epoch_slot" Data.Aeson.Types.ToJSON..= blockContentEpochSlot obj : "fees" Data.Aeson.Types.ToJSON..= blockContentFees obj : "hash" Data.Aeson.Types.ToJSON..= blockContentHash obj : "height" Data.Aeson.Types.ToJSON..= blockContentHeight obj : "next_block" Data.Aeson.Types.ToJSON..= blockContentNextBlock obj : "output" Data.Aeson.Types.ToJSON..= blockContentOutput obj : "previous_block" Data.Aeson.Types.ToJSON..= blockContentPreviousBlock obj : "size" Data.Aeson.Types.ToJSON..= blockContentSize obj : "slot" Data.Aeson.Types.ToJSON..= blockContentSlot obj : "slot_leader" Data.Aeson.Types.ToJSON..= blockContentSlotLeader obj : "time" Data.Aeson.Types.ToJSON..= blockContentTime obj : "tx_count" Data.Aeson.Types.ToJSON..= blockContentTxCount obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("block_vrf" Data.Aeson.Types.ToJSON..= blockContentBlockVrf obj) GHC.Base.<> (("confirmations" Data.Aeson.Types.ToJSON..= blockContentConfirmations obj) GHC.Base.<> (("epoch" Data.Aeson.Types.ToJSON..= blockContentEpoch obj) GHC.Base.<> (("epoch_slot" Data.Aeson.Types.ToJSON..= blockContentEpochSlot obj) GHC.Base.<> (("fees" Data.Aeson.Types.ToJSON..= blockContentFees obj) GHC.Base.<> (("hash" Data.Aeson.Types.ToJSON..= blockContentHash obj) GHC.Base.<> (("height" Data.Aeson.Types.ToJSON..= blockContentHeight obj) GHC.Base.<> (("next_block" Data.Aeson.Types.ToJSON..= blockContentNextBlock obj) GHC.Base.<> (("output" Data.Aeson.Types.ToJSON..= blockContentOutput obj) GHC.Base.<> (("previous_block" Data.Aeson.Types.ToJSON..= blockContentPreviousBlock obj) GHC.Base.<> (("size" Data.Aeson.Types.ToJSON..= blockContentSize obj) GHC.Base.<> (("slot" Data.Aeson.Types.ToJSON..= blockContentSlot obj) GHC.Base.<> (("slot_leader" Data.Aeson.Types.ToJSON..= blockContentSlotLeader obj) GHC.Base.<> (("time" Data.Aeson.Types.ToJSON..= blockContentTime obj) GHC.Base.<> ("tx_count" Data.Aeson.Types.ToJSON..= blockContentTxCount obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON BlockContent
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BlockContent" (\obj -> ((((((((((((((GHC.Base.pure BlockContent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "block_vrf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "confirmations")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_slot")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fees")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_block")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "output")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "previous_block")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_leader")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tx_count"))
-- | Create a new 'BlockContent' with all required fields.
mkBlockContent :: GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'blockContentBlockVrf'
  -> GHC.Integer.Type.Integer -- ^ 'blockContentConfirmations'
  -> GHC.Maybe.Maybe GHC.Integer.Type.Integer -- ^ 'blockContentEpoch'
  -> GHC.Maybe.Maybe GHC.Integer.Type.Integer -- ^ 'blockContentEpochSlot'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'blockContentFees'
  -> Data.Text.Internal.Text -- ^ 'blockContentHash'
  -> GHC.Maybe.Maybe GHC.Integer.Type.Integer -- ^ 'blockContentHeight'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'blockContentNextBlock'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'blockContentOutput'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'blockContentPreviousBlock'
  -> GHC.Integer.Type.Integer -- ^ 'blockContentSize'
  -> GHC.Maybe.Maybe GHC.Integer.Type.Integer -- ^ 'blockContentSlot'
  -> Data.Text.Internal.Text -- ^ 'blockContentSlotLeader'
  -> GHC.Integer.Type.Integer -- ^ 'blockContentTime'
  -> GHC.Integer.Type.Integer -- ^ 'blockContentTxCount'
  -> BlockContent
mkBlockContent blockContentBlockVrf blockContentConfirmations blockContentEpoch blockContentEpochSlot blockContentFees blockContentHash blockContentHeight blockContentNextBlock blockContentOutput blockContentPreviousBlock blockContentSize blockContentSlot blockContentSlotLeader blockContentTime blockContentTxCount = BlockContent{blockContentBlockVrf = blockContentBlockVrf,
                                                                                                                                                                                                                                                                                                                                           blockContentConfirmations = blockContentConfirmations,
                                                                                                                                                                                                                                                                                                                                           blockContentEpoch = blockContentEpoch,
                                                                                                                                                                                                                                                                                                                                           blockContentEpochSlot = blockContentEpochSlot,
                                                                                                                                                                                                                                                                                                                                           blockContentFees = blockContentFees,
                                                                                                                                                                                                                                                                                                                                           blockContentHash = blockContentHash,
                                                                                                                                                                                                                                                                                                                                           blockContentHeight = blockContentHeight,
                                                                                                                                                                                                                                                                                                                                           blockContentNextBlock = blockContentNextBlock,
                                                                                                                                                                                                                                                                                                                                           blockContentOutput = blockContentOutput,
                                                                                                                                                                                                                                                                                                                                           blockContentPreviousBlock = blockContentPreviousBlock,
                                                                                                                                                                                                                                                                                                                                           blockContentSize = blockContentSize,
                                                                                                                                                                                                                                                                                                                                           blockContentSlot = blockContentSlot,
                                                                                                                                                                                                                                                                                                                                           blockContentSlotLeader = blockContentSlotLeader,
                                                                                                                                                                                                                                                                                                                                           blockContentTime = blockContentTime,
                                                                                                                                                                                                                                                                                                                                           blockContentTxCount = blockContentTxCount}
