-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Assets
module BlockfrostAPI.Types.Assets where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.assets.items@ in the specification.
-- 
-- 
data Assets = Assets {
  -- | asset: Asset identifier
  assetsAsset :: Data.Text.Internal.Text
  -- | quantity: Current asset quantity
  , assetsQuantity :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Assets
    where toJSON obj = Data.Aeson.Types.Internal.object ("asset" Data.Aeson.Types.ToJSON..= assetsAsset obj : "quantity" Data.Aeson.Types.ToJSON..= assetsQuantity obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("asset" Data.Aeson.Types.ToJSON..= assetsAsset obj) GHC.Base.<> ("quantity" Data.Aeson.Types.ToJSON..= assetsQuantity obj))
instance Data.Aeson.Types.FromJSON.FromJSON Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Assets" (\obj -> (GHC.Base.pure Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'Assets' with all required fields.
mkAssets :: Data.Text.Internal.Text -- ^ 'assetsAsset'
  -> Data.Text.Internal.Text -- ^ 'assetsQuantity'
  -> Assets
mkAssets assetsAsset assetsQuantity = Assets{assetsAsset = assetsAsset,
                                             assetsQuantity = assetsQuantity}
-- | Defines an alias for the schema located at @components.schemas.assets@ in the specification.
-- 
-- 
-- XXX: collision
-- type Assets = [Assets]
type Assets' = [Assets]
