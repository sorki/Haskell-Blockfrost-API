-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AssetAddress
module BlockfrostAPI.Types.AssetAddress where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.asset_address@ in the specification.
-- 
-- 
data AssetAddress = AssetAddress {
  -- | address: Address containing the specific asset
  assetAddressAddress :: Data.Text.Internal.Text
  -- | quantity: Asset quantity on the specific address
  , assetAddressQuantity :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AssetAddress
    where toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= assetAddressAddress obj : "quantity" Data.Aeson.Types.ToJSON..= assetAddressQuantity obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= assetAddressAddress obj) GHC.Base.<> ("quantity" Data.Aeson.Types.ToJSON..= assetAddressQuantity obj))
instance Data.Aeson.Types.FromJSON.FromJSON AssetAddress
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AssetAddress" (\obj -> (GHC.Base.pure AssetAddress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'AssetAddress' with all required fields.
mkAssetAddress :: Data.Text.Internal.Text -- ^ 'assetAddressAddress'
  -> Data.Text.Internal.Text -- ^ 'assetAddressQuantity'
  -> AssetAddress
mkAssetAddress assetAddressAddress assetAddressQuantity = AssetAddress{assetAddressAddress = assetAddressAddress,
                                                                       assetAddressQuantity = assetAddressQuantity}
