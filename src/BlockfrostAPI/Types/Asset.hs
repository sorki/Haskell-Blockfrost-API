-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Asset
module BlockfrostAPI.Types.Asset where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.asset@ in the specification.
-- 
-- 
data Asset = Asset {
  -- | asset: Hex-encoded asset full name
  assetAsset :: Data.Text.Internal.Text
  -- | asset_name: Hex-encoded asset name of the asset
  , assetAssetName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | fingerprint: CIP14 based user-facing fingerprint
  , assetFingerprint :: Data.Text.Internal.Text
  -- | initial_mint_tx_hash: ID of the initial minting transaction
  , assetInitialMintTxHash :: Data.Text.Internal.Text
  -- | metadata
  , assetMetadata :: (GHC.Maybe.Maybe AssetMetadata')
  -- | mint_or_burn_count: Count of mint and burn transactions
  , assetMintOrBurnCount :: GHC.Integer.Type.Integer
  -- | onchain_metadata: On-chain metadata stored in the minting transaction under label 721,
  -- community discussion around the standard ongoing at https:\/\/github.com\/cardano-foundation\/CIPs\/pull\/85
  , assetOnchainMetadata :: (GHC.Maybe.Maybe AssetOnchainMetadata')
  -- | policy_id: Policy ID of the asset
  , assetPolicyId :: Data.Text.Internal.Text
  -- | quantity: Current asset quantity
  , assetQuantity :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Asset
    where toJSON obj = Data.Aeson.Types.Internal.object ("asset" Data.Aeson.Types.ToJSON..= assetAsset obj : "asset_name" Data.Aeson.Types.ToJSON..= assetAssetName obj : "fingerprint" Data.Aeson.Types.ToJSON..= assetFingerprint obj : "initial_mint_tx_hash" Data.Aeson.Types.ToJSON..= assetInitialMintTxHash obj : "metadata" Data.Aeson.Types.ToJSON..= assetMetadata obj : "mint_or_burn_count" Data.Aeson.Types.ToJSON..= assetMintOrBurnCount obj : "onchain_metadata" Data.Aeson.Types.ToJSON..= assetOnchainMetadata obj : "policy_id" Data.Aeson.Types.ToJSON..= assetPolicyId obj : "quantity" Data.Aeson.Types.ToJSON..= assetQuantity obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("asset" Data.Aeson.Types.ToJSON..= assetAsset obj) GHC.Base.<> (("asset_name" Data.Aeson.Types.ToJSON..= assetAssetName obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= assetFingerprint obj) GHC.Base.<> (("initial_mint_tx_hash" Data.Aeson.Types.ToJSON..= assetInitialMintTxHash obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= assetMetadata obj) GHC.Base.<> (("mint_or_burn_count" Data.Aeson.Types.ToJSON..= assetMintOrBurnCount obj) GHC.Base.<> (("onchain_metadata" Data.Aeson.Types.ToJSON..= assetOnchainMetadata obj) GHC.Base.<> (("policy_id" Data.Aeson.Types.ToJSON..= assetPolicyId obj) GHC.Base.<> ("quantity" Data.Aeson.Types.ToJSON..= assetQuantity obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Asset
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Asset" (\obj -> ((((((((GHC.Base.pure Asset GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "initial_mint_tx_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "mint_or_burn_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "onchain_metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'Asset' with all required fields.
mkAsset :: Data.Text.Internal.Text -- ^ 'assetAsset'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'assetAssetName'
  -> Data.Text.Internal.Text -- ^ 'assetFingerprint'
  -> Data.Text.Internal.Text -- ^ 'assetInitialMintTxHash'
  -> GHC.Maybe.Maybe AssetMetadata' -- ^ 'assetMetadata'
  -> GHC.Integer.Type.Integer -- ^ 'assetMintOrBurnCount'
  -> GHC.Maybe.Maybe AssetOnchainMetadata' -- ^ 'assetOnchainMetadata'
  -> Data.Text.Internal.Text -- ^ 'assetPolicyId'
  -> Data.Text.Internal.Text -- ^ 'assetQuantity'
  -> Asset
mkAsset assetAsset assetAssetName assetFingerprint assetInitialMintTxHash assetMetadata assetMintOrBurnCount assetOnchainMetadata assetPolicyId assetQuantity = Asset{assetAsset = assetAsset,
                                                                                                                                                                      assetAssetName = assetAssetName,
                                                                                                                                                                      assetFingerprint = assetFingerprint,
                                                                                                                                                                      assetInitialMintTxHash = assetInitialMintTxHash,
                                                                                                                                                                      assetMetadata = assetMetadata,
                                                                                                                                                                      assetMintOrBurnCount = assetMintOrBurnCount,
                                                                                                                                                                      assetOnchainMetadata = assetOnchainMetadata,
                                                                                                                                                                      assetPolicyId = assetPolicyId,
                                                                                                                                                                      assetQuantity = assetQuantity}
-- | Defines the object schema located at @components.schemas.asset.properties.metadata@ in the specification.
-- 
-- 
data AssetMetadata' = AssetMetadata' {
  -- | decimals: Number of decimal places of the asset unit
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  assetMetadata'Decimals :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | description: Asset description
  , assetMetadata'Description :: Data.Text.Internal.Text
  -- | logo: Base64 encoded logo of the asset
  , assetMetadata'Logo :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | name: Asset name
  , assetMetadata'Name :: Data.Text.Internal.Text
  -- | ticker
  , assetMetadata'Ticker :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | url: Asset website
  , assetMetadata'Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AssetMetadata'
    where toJSON obj = Data.Aeson.Types.Internal.object ("decimals" Data.Aeson.Types.ToJSON..= assetMetadata'Decimals obj : "description" Data.Aeson.Types.ToJSON..= assetMetadata'Description obj : "logo" Data.Aeson.Types.ToJSON..= assetMetadata'Logo obj : "name" Data.Aeson.Types.ToJSON..= assetMetadata'Name obj : "ticker" Data.Aeson.Types.ToJSON..= assetMetadata'Ticker obj : "url" Data.Aeson.Types.ToJSON..= assetMetadata'Url obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("decimals" Data.Aeson.Types.ToJSON..= assetMetadata'Decimals obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= assetMetadata'Description obj) GHC.Base.<> (("logo" Data.Aeson.Types.ToJSON..= assetMetadata'Logo obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= assetMetadata'Name obj) GHC.Base.<> (("ticker" Data.Aeson.Types.ToJSON..= assetMetadata'Ticker obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= assetMetadata'Url obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON AssetMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AssetMetadata'" (\obj -> (((((GHC.Base.pure AssetMetadata' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "decimals")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "logo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ticker")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
-- | Create a new 'AssetMetadata'' with all required fields.
mkAssetMetadata' :: GHC.Maybe.Maybe GHC.Integer.Type.Integer -- ^ 'assetMetadata'Decimals'
  -> Data.Text.Internal.Text -- ^ 'assetMetadata'Description'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'assetMetadata'Logo'
  -> Data.Text.Internal.Text -- ^ 'assetMetadata'Name'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'assetMetadata'Ticker'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'assetMetadata'Url'
  -> AssetMetadata'
mkAssetMetadata' assetMetadata'Decimals assetMetadata'Description assetMetadata'Logo assetMetadata'Name assetMetadata'Ticker assetMetadata'Url = AssetMetadata'{assetMetadata'Decimals = assetMetadata'Decimals,
                                                                                                                                                                assetMetadata'Description = assetMetadata'Description,
                                                                                                                                                                assetMetadata'Logo = assetMetadata'Logo,
                                                                                                                                                                assetMetadata'Name = assetMetadata'Name,
                                                                                                                                                                assetMetadata'Ticker = assetMetadata'Ticker,
                                                                                                                                                                assetMetadata'Url = assetMetadata'Url}
-- | Defines the object schema located at @components.schemas.asset.properties.onchain_metadata@ in the specification.
-- 
-- On-chain metadata stored in the minting transaction under label 721,
-- community discussion around the standard ongoing at https:\/\/github.com\/cardano-foundation\/CIPs\/pull\/85
data AssetOnchainMetadata' = AssetOnchainMetadata' {
  -- | image: URI of the associated asset
  assetOnchainMetadata'Image :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | name: Name of the asset
  , assetOnchainMetadata'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AssetOnchainMetadata'
    where toJSON obj = Data.Aeson.Types.Internal.object ("image" Data.Aeson.Types.ToJSON..= assetOnchainMetadata'Image obj : "name" Data.Aeson.Types.ToJSON..= assetOnchainMetadata'Name obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("image" Data.Aeson.Types.ToJSON..= assetOnchainMetadata'Image obj) GHC.Base.<> ("name" Data.Aeson.Types.ToJSON..= assetOnchainMetadata'Name obj))
instance Data.Aeson.Types.FromJSON.FromJSON AssetOnchainMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AssetOnchainMetadata'" (\obj -> (GHC.Base.pure AssetOnchainMetadata' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name"))
-- | Create a new 'AssetOnchainMetadata'' with all required fields.
mkAssetOnchainMetadata' :: AssetOnchainMetadata'
mkAssetOnchainMetadata' = AssetOnchainMetadata'{assetOnchainMetadata'Image = GHC.Maybe.Nothing,
                                                assetOnchainMetadata'Name = GHC.Maybe.Nothing}
