-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TxContentStakeAddress
module BlockfrostAPI.Types.TxContentStakeAddress where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.tx_content_stake_address@ in the specification.
-- 
-- 
data TxContentStakeAddress = TxContentStakeAddress {
  -- | address: Delegation stake address
  txContentStakeAddressAddress :: Data.Text.Internal.Text
  -- | cert_index: Index of the certificate within the transaction
  , txContentStakeAddressCertIndex :: GHC.Integer.Type.Integer
  -- | registration: Registration boolean, false if deregistration
  , txContentStakeAddressRegistration :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxContentStakeAddress
    where toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= txContentStakeAddressAddress obj : "cert_index" Data.Aeson.Types.ToJSON..= txContentStakeAddressCertIndex obj : "registration" Data.Aeson.Types.ToJSON..= txContentStakeAddressRegistration obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= txContentStakeAddressAddress obj) GHC.Base.<> (("cert_index" Data.Aeson.Types.ToJSON..= txContentStakeAddressCertIndex obj) GHC.Base.<> ("registration" Data.Aeson.Types.ToJSON..= txContentStakeAddressRegistration obj)))
instance Data.Aeson.Types.FromJSON.FromJSON TxContentStakeAddress
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TxContentStakeAddress" (\obj -> ((GHC.Base.pure TxContentStakeAddress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cert_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "registration"))
-- | Create a new 'TxContentStakeAddress' with all required fields.
mkTxContentStakeAddress :: Data.Text.Internal.Text -- ^ 'txContentStakeAddressAddress'
  -> GHC.Integer.Type.Integer -- ^ 'txContentStakeAddressCertIndex'
  -> GHC.Types.Bool -- ^ 'txContentStakeAddressRegistration'
  -> TxContentStakeAddress
mkTxContentStakeAddress txContentStakeAddressAddress txContentStakeAddressCertIndex txContentStakeAddressRegistration = TxContentStakeAddress{txContentStakeAddressAddress = txContentStakeAddressAddress,
                                                                                                                                              txContentStakeAddressCertIndex = txContentStakeAddressCertIndex,
                                                                                                                                              txContentStakeAddressRegistration = txContentStakeAddressRegistration}
