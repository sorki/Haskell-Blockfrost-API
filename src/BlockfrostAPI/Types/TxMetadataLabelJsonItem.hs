-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TxMetadataLabelJsonItem
module BlockfrostAPI.Types.TxMetadataLabelJsonItem where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.tx_metadata_label_json_item@ in the specification.
-- 
-- 
data TxMetadataLabelJsonItem = TxMetadataLabelJsonItem {
  -- | json_metadata: Content of the JSON metadata
  txMetadataLabelJsonItemJsonMetadata :: TxMetadataLabelJsonItemJsonMetadata'Variants
  -- | tx_hash: Transaction hash that contains the specific metadata
  , txMetadataLabelJsonItemTxHash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxMetadataLabelJsonItem
    where toJSON obj = Data.Aeson.Types.Internal.object ("json_metadata" Data.Aeson.Types.ToJSON..= txMetadataLabelJsonItemJsonMetadata obj : "tx_hash" Data.Aeson.Types.ToJSON..= txMetadataLabelJsonItemTxHash obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("json_metadata" Data.Aeson.Types.ToJSON..= txMetadataLabelJsonItemJsonMetadata obj) GHC.Base.<> ("tx_hash" Data.Aeson.Types.ToJSON..= txMetadataLabelJsonItemTxHash obj))
instance Data.Aeson.Types.FromJSON.FromJSON TxMetadataLabelJsonItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TxMetadataLabelJsonItem" (\obj -> (GHC.Base.pure TxMetadataLabelJsonItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "json_metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tx_hash"))
-- | Create a new 'TxMetadataLabelJsonItem' with all required fields.
mkTxMetadataLabelJsonItem :: TxMetadataLabelJsonItemJsonMetadata'Variants -- ^ 'txMetadataLabelJsonItemJsonMetadata'
  -> Data.Text.Internal.Text -- ^ 'txMetadataLabelJsonItemTxHash'
  -> TxMetadataLabelJsonItem
mkTxMetadataLabelJsonItem txMetadataLabelJsonItemJsonMetadata txMetadataLabelJsonItemTxHash = TxMetadataLabelJsonItem{txMetadataLabelJsonItemJsonMetadata = txMetadataLabelJsonItemJsonMetadata,
                                                                                                                      txMetadataLabelJsonItemTxHash = txMetadataLabelJsonItemTxHash}
-- | Defines the oneOf schema located at @components.schemas.tx_metadata_label_json_item.properties.json_metadata.anyOf@ in the specification.
-- 
-- Content of the JSON metadata
data TxMetadataLabelJsonItemJsonMetadata'Variants =
   TxMetadataLabelJsonItemJsonMetadata'Text Data.Text.Internal.Text
  | TxMetadataLabelJsonItemJsonMetadata'Object Data.Aeson.Types.Internal.Object
  | TxMetadataLabelJsonItemJsonMetadata'ListTObject ([Data.Aeson.Types.Internal.Object])
  | TxMetadataLabelJsonItemJsonMetadata'Integer GHC.Integer.Type.Integer
  | TxMetadataLabelJsonItemJsonMetadata'Scientific Data.Scientific.Scientific
  | TxMetadataLabelJsonItemJsonMetadata'Bool GHC.Types.Bool
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxMetadataLabelJsonItemJsonMetadata'Variants
    where toJSON (TxMetadataLabelJsonItemJsonMetadata'Text a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (TxMetadataLabelJsonItemJsonMetadata'Object a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (TxMetadataLabelJsonItemJsonMetadata'ListTObject a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (TxMetadataLabelJsonItemJsonMetadata'Integer a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (TxMetadataLabelJsonItemJsonMetadata'Scientific a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (TxMetadataLabelJsonItemJsonMetadata'Bool a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON TxMetadataLabelJsonItemJsonMetadata'Variants
    where parseJSON val = case (TxMetadataLabelJsonItemJsonMetadata'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((TxMetadataLabelJsonItemJsonMetadata'Object Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((TxMetadataLabelJsonItemJsonMetadata'ListTObject Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((TxMetadataLabelJsonItemJsonMetadata'Integer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((TxMetadataLabelJsonItemJsonMetadata'Scientific Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((TxMetadataLabelJsonItemJsonMetadata'Bool Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
