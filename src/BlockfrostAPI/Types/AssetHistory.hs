-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AssetHistory
module BlockfrostAPI.Types.AssetHistory where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.asset_history.items@ in the specification.
-- 
-- 
data AssetHistory = AssetHistory {
  -- | action: Action executed upon the asset policy
  assetHistoryAction :: AssetHistoryAction'
  -- | amount: Asset amount of the specific action
  , assetHistoryAmount :: Data.Text.Internal.Text
  -- | tx_hash: Hash of the transaction containing the asset action
  , assetHistoryTxHash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AssetHistory
    where toJSON obj = Data.Aeson.Types.Internal.object ("action" Data.Aeson.Types.ToJSON..= assetHistoryAction obj : "amount" Data.Aeson.Types.ToJSON..= assetHistoryAmount obj : "tx_hash" Data.Aeson.Types.ToJSON..= assetHistoryTxHash obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("action" Data.Aeson.Types.ToJSON..= assetHistoryAction obj) GHC.Base.<> (("amount" Data.Aeson.Types.ToJSON..= assetHistoryAmount obj) GHC.Base.<> ("tx_hash" Data.Aeson.Types.ToJSON..= assetHistoryTxHash obj)))
instance Data.Aeson.Types.FromJSON.FromJSON AssetHistory
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AssetHistory" (\obj -> ((GHC.Base.pure AssetHistory GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tx_hash"))
-- | Create a new 'AssetHistory' with all required fields.
mkAssetHistory :: AssetHistoryAction' -- ^ 'assetHistoryAction'
  -> Data.Text.Internal.Text -- ^ 'assetHistoryAmount'
  -> Data.Text.Internal.Text -- ^ 'assetHistoryTxHash'
  -> AssetHistory
mkAssetHistory assetHistoryAction assetHistoryAmount assetHistoryTxHash = AssetHistory{assetHistoryAction = assetHistoryAction,
                                                                                       assetHistoryAmount = assetHistoryAmount,
                                                                                       assetHistoryTxHash = assetHistoryTxHash}
-- | Defines the enum schema located at @components.schemas.asset_history.items.properties.action@ in the specification.
-- 
-- Action executed upon the asset policy
data AssetHistoryAction' =
   AssetHistoryAction'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | AssetHistoryAction'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | AssetHistoryAction'EnumMinted -- ^ Represents the JSON value @"minted"@
  | AssetHistoryAction'EnumBurned -- ^ Represents the JSON value @"burned"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AssetHistoryAction'
    where toJSON (AssetHistoryAction'Other val) = val
          toJSON (AssetHistoryAction'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (AssetHistoryAction'EnumMinted) = "minted"
          toJSON (AssetHistoryAction'EnumBurned) = "burned"
instance Data.Aeson.Types.FromJSON.FromJSON AssetHistoryAction'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "minted" -> AssetHistoryAction'EnumMinted
                                            | val GHC.Classes.== "burned" -> AssetHistoryAction'EnumBurned
                                            | GHC.Base.otherwise -> AssetHistoryAction'Other val)
-- | Defines an alias for the schema located at @components.schemas.asset_history@ in the specification.
-- 
-- 
-- XXX: collision
-- type AssetHistory = [AssetHistory]
type AssetHistory' = [AssetHistory]
