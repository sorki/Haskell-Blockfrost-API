-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Metrics
module BlockfrostAPI.Types.Metrics where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.metrics.items@ in the specification.
-- 
-- 
data Metrics = Metrics {
  -- | calls: Sum of all calls for a particular day
  metricsCalls :: GHC.Integer.Type.Integer
  -- | time: Starting time of the call count interval (ends midnight UTC) in UNIX time
  , metricsTime :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Metrics
    where toJSON obj = Data.Aeson.Types.Internal.object ("calls" Data.Aeson.Types.ToJSON..= metricsCalls obj : "time" Data.Aeson.Types.ToJSON..= metricsTime obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("calls" Data.Aeson.Types.ToJSON..= metricsCalls obj) GHC.Base.<> ("time" Data.Aeson.Types.ToJSON..= metricsTime obj))
instance Data.Aeson.Types.FromJSON.FromJSON Metrics
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Metrics" (\obj -> (GHC.Base.pure Metrics GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "calls")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'Metrics' with all required fields.
mkMetrics :: GHC.Integer.Type.Integer -- ^ 'metricsCalls'
  -> GHC.Integer.Type.Integer -- ^ 'metricsTime'
  -> Metrics
mkMetrics metricsCalls metricsTime = Metrics{metricsCalls = metricsCalls,
                                             metricsTime = metricsTime}
-- | Defines an alias for the schema located at @components.schemas.metrics@ in the specification.
-- 
-- 
-- XXX: collision
-- type Metrics = [Metrics]
type Metrics' = [Metrics]
