-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TxContentUtxo
module BlockfrostAPI.Types.TxContentUtxo where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.tx_content_utxo@ in the specification.
-- 
-- 
data TxContentUtxo = TxContentUtxo {
  -- | hash: Transaction hash
  txContentUtxoHash :: Data.Text.Internal.Text
  -- | inputs
  , txContentUtxoInputs :: ([TxContentUtxoInputs'])
  -- | outputs
  , txContentUtxoOutputs :: ([TxContentUtxoOutputs'])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxContentUtxo
    where toJSON obj = Data.Aeson.Types.Internal.object ("hash" Data.Aeson.Types.ToJSON..= txContentUtxoHash obj : "inputs" Data.Aeson.Types.ToJSON..= txContentUtxoInputs obj : "outputs" Data.Aeson.Types.ToJSON..= txContentUtxoOutputs obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("hash" Data.Aeson.Types.ToJSON..= txContentUtxoHash obj) GHC.Base.<> (("inputs" Data.Aeson.Types.ToJSON..= txContentUtxoInputs obj) GHC.Base.<> ("outputs" Data.Aeson.Types.ToJSON..= txContentUtxoOutputs obj)))
instance Data.Aeson.Types.FromJSON.FromJSON TxContentUtxo
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TxContentUtxo" (\obj -> ((GHC.Base.pure TxContentUtxo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "inputs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outputs"))
-- | Create a new 'TxContentUtxo' with all required fields.
mkTxContentUtxo :: Data.Text.Internal.Text -- ^ 'txContentUtxoHash'
  -> [TxContentUtxoInputs'] -- ^ 'txContentUtxoInputs'
  -> [TxContentUtxoOutputs'] -- ^ 'txContentUtxoOutputs'
  -> TxContentUtxo
mkTxContentUtxo txContentUtxoHash txContentUtxoInputs txContentUtxoOutputs = TxContentUtxo{txContentUtxoHash = txContentUtxoHash,
                                                                                           txContentUtxoInputs = txContentUtxoInputs,
                                                                                           txContentUtxoOutputs = txContentUtxoOutputs}
-- | Defines the object schema located at @components.schemas.tx_content_utxo.properties.inputs.items@ in the specification.
-- 
-- 
data TxContentUtxoInputs' = TxContentUtxoInputs' {
  -- | address: Input address
  txContentUtxoInputs'Address :: Data.Text.Internal.Text
  -- | amount
  , txContentUtxoInputs'Amount :: ([TxContentUtxoInputs'Amount'])
  -- | output_index: UTXO index in the transaction
  , txContentUtxoInputs'OutputIndex :: Data.Scientific.Scientific
  -- | tx_hash: Hash of the UTXO transaction
  , txContentUtxoInputs'TxHash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxContentUtxoInputs'
    where toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'Address obj : "amount" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'Amount obj : "output_index" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'OutputIndex obj : "tx_hash" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'TxHash obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'Address obj) GHC.Base.<> (("amount" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'Amount obj) GHC.Base.<> (("output_index" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'OutputIndex obj) GHC.Base.<> ("tx_hash" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'TxHash obj))))
instance Data.Aeson.Types.FromJSON.FromJSON TxContentUtxoInputs'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TxContentUtxoInputs'" (\obj -> (((GHC.Base.pure TxContentUtxoInputs' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "output_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tx_hash"))
-- | Create a new 'TxContentUtxoInputs'' with all required fields.
mkTxContentUtxoInputs' :: Data.Text.Internal.Text -- ^ 'txContentUtxoInputs'Address'
  -> [TxContentUtxoInputs'Amount'] -- ^ 'txContentUtxoInputs'Amount'
  -> Data.Scientific.Scientific -- ^ 'txContentUtxoInputs'OutputIndex'
  -> Data.Text.Internal.Text -- ^ 'txContentUtxoInputs'TxHash'
  -> TxContentUtxoInputs'
mkTxContentUtxoInputs' txContentUtxoInputs'Address txContentUtxoInputs'Amount txContentUtxoInputs'OutputIndex txContentUtxoInputs'TxHash = TxContentUtxoInputs'{txContentUtxoInputs'Address = txContentUtxoInputs'Address,
                                                                                                                                                                txContentUtxoInputs'Amount = txContentUtxoInputs'Amount,
                                                                                                                                                                txContentUtxoInputs'OutputIndex = txContentUtxoInputs'OutputIndex,
                                                                                                                                                                txContentUtxoInputs'TxHash = txContentUtxoInputs'TxHash}
-- | Defines the object schema located at @components.schemas.tx_content_utxo.properties.inputs.items.properties.amount.items@ in the specification.
-- 
-- The sum of all the UTXO per asset
data TxContentUtxoInputs'Amount' = TxContentUtxoInputs'Amount' {
  -- | quantity: The quantity of the unit
  txContentUtxoInputs'Amount'Quantity :: Data.Text.Internal.Text
  -- | unit: The unit of the value
  , txContentUtxoInputs'Amount'Unit :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxContentUtxoInputs'Amount'
    where toJSON obj = Data.Aeson.Types.Internal.object ("quantity" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'Amount'Quantity obj : "unit" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'Amount'Unit obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("quantity" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'Amount'Quantity obj) GHC.Base.<> ("unit" Data.Aeson.Types.ToJSON..= txContentUtxoInputs'Amount'Unit obj))
instance Data.Aeson.Types.FromJSON.FromJSON TxContentUtxoInputs'Amount'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TxContentUtxoInputs'Amount'" (\obj -> (GHC.Base.pure TxContentUtxoInputs'Amount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unit"))
-- | Create a new 'TxContentUtxoInputs'Amount'' with all required fields.
mkTxContentUtxoInputs'Amount' :: Data.Text.Internal.Text -- ^ 'txContentUtxoInputs'Amount'Quantity'
  -> Data.Text.Internal.Text -- ^ 'txContentUtxoInputs'Amount'Unit'
  -> TxContentUtxoInputs'Amount'
mkTxContentUtxoInputs'Amount' txContentUtxoInputs'Amount'Quantity txContentUtxoInputs'Amount'Unit = TxContentUtxoInputs'Amount'{txContentUtxoInputs'Amount'Quantity = txContentUtxoInputs'Amount'Quantity,
                                                                                                                                txContentUtxoInputs'Amount'Unit = txContentUtxoInputs'Amount'Unit}
-- | Defines the object schema located at @components.schemas.tx_content_utxo.properties.outputs.items@ in the specification.
-- 
-- 
data TxContentUtxoOutputs' = TxContentUtxoOutputs' {
  -- | address: Output address
  txContentUtxoOutputs'Address :: Data.Text.Internal.Text
  -- | amount
  , txContentUtxoOutputs'Amount :: ([TxContentUtxoOutputs'Amount'])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxContentUtxoOutputs'
    where toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= txContentUtxoOutputs'Address obj : "amount" Data.Aeson.Types.ToJSON..= txContentUtxoOutputs'Amount obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= txContentUtxoOutputs'Address obj) GHC.Base.<> ("amount" Data.Aeson.Types.ToJSON..= txContentUtxoOutputs'Amount obj))
instance Data.Aeson.Types.FromJSON.FromJSON TxContentUtxoOutputs'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TxContentUtxoOutputs'" (\obj -> (GHC.Base.pure TxContentUtxoOutputs' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount"))
-- | Create a new 'TxContentUtxoOutputs'' with all required fields.
mkTxContentUtxoOutputs' :: Data.Text.Internal.Text -- ^ 'txContentUtxoOutputs'Address'
  -> [TxContentUtxoOutputs'Amount'] -- ^ 'txContentUtxoOutputs'Amount'
  -> TxContentUtxoOutputs'
mkTxContentUtxoOutputs' txContentUtxoOutputs'Address txContentUtxoOutputs'Amount = TxContentUtxoOutputs'{txContentUtxoOutputs'Address = txContentUtxoOutputs'Address,
                                                                                                         txContentUtxoOutputs'Amount = txContentUtxoOutputs'Amount}
-- | Defines the object schema located at @components.schemas.tx_content_utxo.properties.outputs.items.properties.amount.items@ in the specification.
-- 
-- The sum of all the UTXO per asset
data TxContentUtxoOutputs'Amount' = TxContentUtxoOutputs'Amount' {
  -- | quantity: The quantity of the unit
  txContentUtxoOutputs'Amount'Quantity :: Data.Text.Internal.Text
  -- | unit: The unit of the value
  , txContentUtxoOutputs'Amount'Unit :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxContentUtxoOutputs'Amount'
    where toJSON obj = Data.Aeson.Types.Internal.object ("quantity" Data.Aeson.Types.ToJSON..= txContentUtxoOutputs'Amount'Quantity obj : "unit" Data.Aeson.Types.ToJSON..= txContentUtxoOutputs'Amount'Unit obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("quantity" Data.Aeson.Types.ToJSON..= txContentUtxoOutputs'Amount'Quantity obj) GHC.Base.<> ("unit" Data.Aeson.Types.ToJSON..= txContentUtxoOutputs'Amount'Unit obj))
instance Data.Aeson.Types.FromJSON.FromJSON TxContentUtxoOutputs'Amount'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TxContentUtxoOutputs'Amount'" (\obj -> (GHC.Base.pure TxContentUtxoOutputs'Amount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unit"))
-- | Create a new 'TxContentUtxoOutputs'Amount'' with all required fields.
mkTxContentUtxoOutputs'Amount' :: Data.Text.Internal.Text -- ^ 'txContentUtxoOutputs'Amount'Quantity'
  -> Data.Text.Internal.Text -- ^ 'txContentUtxoOutputs'Amount'Unit'
  -> TxContentUtxoOutputs'Amount'
mkTxContentUtxoOutputs'Amount' txContentUtxoOutputs'Amount'Quantity txContentUtxoOutputs'Amount'Unit = TxContentUtxoOutputs'Amount'{txContentUtxoOutputs'Amount'Quantity = txContentUtxoOutputs'Amount'Quantity,
                                                                                                                                    txContentUtxoOutputs'Amount'Unit = txContentUtxoOutputs'Amount'Unit}
