-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TxContentMirs
module BlockfrostAPI.Types.TxContentMirs where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.tx_content_mirs.items@ in the specification.
-- 
-- 
data TxContentMirs = TxContentMirs {
  -- | address: Bech32 stake address
  txContentMirsAddress :: Data.Text.Internal.Text
  -- | amount: MIR amount in Lovelaces
  , txContentMirsAmount :: Data.Text.Internal.Text
  -- | cert_index: Index of the certificate within the transaction
  , txContentMirsCertIndex :: GHC.Integer.Type.Integer
  -- | pot: Source of MIR funds
  , txContentMirsPot :: TxContentMirsPot'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxContentMirs
    where toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= txContentMirsAddress obj : "amount" Data.Aeson.Types.ToJSON..= txContentMirsAmount obj : "cert_index" Data.Aeson.Types.ToJSON..= txContentMirsCertIndex obj : "pot" Data.Aeson.Types.ToJSON..= txContentMirsPot obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= txContentMirsAddress obj) GHC.Base.<> (("amount" Data.Aeson.Types.ToJSON..= txContentMirsAmount obj) GHC.Base.<> (("cert_index" Data.Aeson.Types.ToJSON..= txContentMirsCertIndex obj) GHC.Base.<> ("pot" Data.Aeson.Types.ToJSON..= txContentMirsPot obj))))
instance Data.Aeson.Types.FromJSON.FromJSON TxContentMirs
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TxContentMirs" (\obj -> (((GHC.Base.pure TxContentMirs GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cert_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pot"))
-- | Create a new 'TxContentMirs' with all required fields.
mkTxContentMirs :: Data.Text.Internal.Text -- ^ 'txContentMirsAddress'
  -> Data.Text.Internal.Text -- ^ 'txContentMirsAmount'
  -> GHC.Integer.Type.Integer -- ^ 'txContentMirsCertIndex'
  -> TxContentMirsPot' -- ^ 'txContentMirsPot'
  -> TxContentMirs
mkTxContentMirs txContentMirsAddress txContentMirsAmount txContentMirsCertIndex txContentMirsPot = TxContentMirs{txContentMirsAddress = txContentMirsAddress,
                                                                                                                 txContentMirsAmount = txContentMirsAmount,
                                                                                                                 txContentMirsCertIndex = txContentMirsCertIndex,
                                                                                                                 txContentMirsPot = txContentMirsPot}
-- | Defines the enum schema located at @components.schemas.tx_content_mirs.items.properties.pot@ in the specification.
-- 
-- Source of MIR funds
data TxContentMirsPot' =
   TxContentMirsPot'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | TxContentMirsPot'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | TxContentMirsPot'EnumReserve -- ^ Represents the JSON value @"reserve"@
  | TxContentMirsPot'EnumTreasury -- ^ Represents the JSON value @"treasury"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TxContentMirsPot'
    where toJSON (TxContentMirsPot'Other val) = val
          toJSON (TxContentMirsPot'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (TxContentMirsPot'EnumReserve) = "reserve"
          toJSON (TxContentMirsPot'EnumTreasury) = "treasury"
instance Data.Aeson.Types.FromJSON.FromJSON TxContentMirsPot'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "reserve" -> TxContentMirsPot'EnumReserve
                                            | val GHC.Classes.== "treasury" -> TxContentMirsPot'EnumTreasury
                                            | GHC.Base.otherwise -> TxContentMirsPot'Other val)
-- | Defines an alias for the schema located at @components.schemas.tx_content_mirs@ in the specification.
-- 
-- 
-- XXX: collision
-- type TxContentMirs = [TxContentMirs]
type TxContentMirs' = [TxContentMirs]
