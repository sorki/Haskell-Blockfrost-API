-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema MetricsEndpoint
module BlockfrostAPI.Types.MetricsEndpoint where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified BlockfrostAPI.Common
import BlockfrostAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.metrics_endpoint@ in the specification.
-- 
-- 
data MetricsEndpoint = MetricsEndpoint {
  -- | calls: Sum of all calls for a particular day and endpoint
  metricsEndpointCalls :: GHC.Integer.Type.Integer
  -- | endpoint: Endpoint parent name
  , metricsEndpointEndpoint :: Data.Text.Internal.Text
  -- | time: Starting time of the call count interval (ends midnight UTC) in UNIX time
  , metricsEndpointTime :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MetricsEndpoint
    where toJSON obj = Data.Aeson.Types.Internal.object ("calls" Data.Aeson.Types.ToJSON..= metricsEndpointCalls obj : "endpoint" Data.Aeson.Types.ToJSON..= metricsEndpointEndpoint obj : "time" Data.Aeson.Types.ToJSON..= metricsEndpointTime obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("calls" Data.Aeson.Types.ToJSON..= metricsEndpointCalls obj) GHC.Base.<> (("endpoint" Data.Aeson.Types.ToJSON..= metricsEndpointEndpoint obj) GHC.Base.<> ("time" Data.Aeson.Types.ToJSON..= metricsEndpointTime obj)))
instance Data.Aeson.Types.FromJSON.FromJSON MetricsEndpoint
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "MetricsEndpoint" (\obj -> ((GHC.Base.pure MetricsEndpoint GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "calls")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "endpoint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'MetricsEndpoint' with all required fields.
mkMetricsEndpoint :: GHC.Integer.Type.Integer -- ^ 'metricsEndpointCalls'
  -> Data.Text.Internal.Text -- ^ 'metricsEndpointEndpoint'
  -> GHC.Integer.Type.Integer -- ^ 'metricsEndpointTime'
  -> MetricsEndpoint
mkMetricsEndpoint metricsEndpointCalls metricsEndpointEndpoint metricsEndpointTime = MetricsEndpoint{metricsEndpointCalls = metricsEndpointCalls,
                                                                                                     metricsEndpointEndpoint = metricsEndpointEndpoint,
                                                                                                     metricsEndpointTime = metricsEndpointTime}
